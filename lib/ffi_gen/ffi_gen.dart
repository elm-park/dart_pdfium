// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  void FPDF_InitLibrary() {
    _FPDF_InitLibrary ??=
        _dylib.lookupFunction<_c_FPDF_InitLibrary, _dart_FPDF_InitLibrary>(
            'FPDF_InitLibrary');
    return _FPDF_InitLibrary();
  }

  _dart_FPDF_InitLibrary _FPDF_InitLibrary;

  void FPDF_InitLibraryWithConfig(
    ffi.Pointer<FPDF_LIBRARY_CONFIG> config,
  ) {
    _FPDF_InitLibraryWithConfig ??= _dylib.lookupFunction<
        _c_FPDF_InitLibraryWithConfig,
        _dart_FPDF_InitLibraryWithConfig>('FPDF_InitLibraryWithConfig');
    return _FPDF_InitLibraryWithConfig(
      config,
    );
  }

  _dart_FPDF_InitLibraryWithConfig _FPDF_InitLibraryWithConfig;

  void FPDF_DestroyLibrary() {
    _FPDF_DestroyLibrary ??= _dylib.lookupFunction<_c_FPDF_DestroyLibrary,
        _dart_FPDF_DestroyLibrary>('FPDF_DestroyLibrary');
    return _FPDF_DestroyLibrary();
  }

  _dart_FPDF_DestroyLibrary _FPDF_DestroyLibrary;

  void FPDF_SetSandBoxPolicy(
    int policy,
    int enable,
  ) {
    _FPDF_SetSandBoxPolicy ??= _dylib.lookupFunction<_c_FPDF_SetSandBoxPolicy,
        _dart_FPDF_SetSandBoxPolicy>('FPDF_SetSandBoxPolicy');
    return _FPDF_SetSandBoxPolicy(
      policy,
      enable,
    );
  }

  _dart_FPDF_SetSandBoxPolicy _FPDF_SetSandBoxPolicy;

  ffi.Pointer<fpdf_document_t__> FPDF_LoadDocument(
    ffi.Pointer<ffi.Int8> file_path,
    ffi.Pointer<ffi.Int8> password,
  ) {
    _FPDF_LoadDocument ??=
        _dylib.lookupFunction<_c_FPDF_LoadDocument, _dart_FPDF_LoadDocument>(
            'FPDF_LoadDocument');
    return _FPDF_LoadDocument(
      file_path,
      password,
    );
  }

  _dart_FPDF_LoadDocument _FPDF_LoadDocument;

  ffi.Pointer<fpdf_document_t__> FPDF_LoadMemDocument(
    ffi.Pointer<ffi.Void> data_buf,
    int size,
    ffi.Pointer<ffi.Int8> password,
  ) {
    _FPDF_LoadMemDocument ??= _dylib.lookupFunction<_c_FPDF_LoadMemDocument,
        _dart_FPDF_LoadMemDocument>('FPDF_LoadMemDocument');
    return _FPDF_LoadMemDocument(
      data_buf,
      size,
      password,
    );
  }

  _dart_FPDF_LoadMemDocument _FPDF_LoadMemDocument;

  ffi.Pointer<fpdf_document_t__> FPDF_LoadMemDocument64(
    ffi.Pointer<ffi.Void> data_buf,
    int size,
    ffi.Pointer<ffi.Int8> password,
  ) {
    _FPDF_LoadMemDocument64 ??= _dylib.lookupFunction<_c_FPDF_LoadMemDocument64,
        _dart_FPDF_LoadMemDocument64>('FPDF_LoadMemDocument64');
    return _FPDF_LoadMemDocument64(
      data_buf,
      size,
      password,
    );
  }

  _dart_FPDF_LoadMemDocument64 _FPDF_LoadMemDocument64;

  ffi.Pointer<fpdf_document_t__> FPDF_LoadCustomDocument(
    ffi.Pointer<FPDF_FILEACCESS> pFileAccess,
    ffi.Pointer<ffi.Int8> password,
  ) {
    _FPDF_LoadCustomDocument ??= _dylib.lookupFunction<
        _c_FPDF_LoadCustomDocument,
        _dart_FPDF_LoadCustomDocument>('FPDF_LoadCustomDocument');
    return _FPDF_LoadCustomDocument(
      pFileAccess,
      password,
    );
  }

  _dart_FPDF_LoadCustomDocument _FPDF_LoadCustomDocument;

  int FPDF_GetFileVersion(
    ffi.Pointer<fpdf_document_t__> doc,
    ffi.Pointer<ffi.Int32> fileVersion,
  ) {
    _FPDF_GetFileVersion ??= _dylib.lookupFunction<_c_FPDF_GetFileVersion,
        _dart_FPDF_GetFileVersion>('FPDF_GetFileVersion');
    return _FPDF_GetFileVersion(
      doc,
      fileVersion,
    );
  }

  _dart_FPDF_GetFileVersion _FPDF_GetFileVersion;

  int FPDF_GetLastError() {
    _FPDF_GetLastError ??=
        _dylib.lookupFunction<_c_FPDF_GetLastError, _dart_FPDF_GetLastError>(
            'FPDF_GetLastError');
    return _FPDF_GetLastError();
  }

  _dart_FPDF_GetLastError _FPDF_GetLastError;

  int FPDF_DocumentHasValidCrossReferenceTable(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_DocumentHasValidCrossReferenceTable ??= _dylib.lookupFunction<
            _c_FPDF_DocumentHasValidCrossReferenceTable,
            _dart_FPDF_DocumentHasValidCrossReferenceTable>(
        'FPDF_DocumentHasValidCrossReferenceTable');
    return _FPDF_DocumentHasValidCrossReferenceTable(
      document,
    );
  }

  _dart_FPDF_DocumentHasValidCrossReferenceTable
      _FPDF_DocumentHasValidCrossReferenceTable;

  int FPDF_GetDocPermissions(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_GetDocPermissions ??= _dylib.lookupFunction<_c_FPDF_GetDocPermissions,
        _dart_FPDF_GetDocPermissions>('FPDF_GetDocPermissions');
    return _FPDF_GetDocPermissions(
      document,
    );
  }

  _dart_FPDF_GetDocPermissions _FPDF_GetDocPermissions;

  int FPDF_GetSecurityHandlerRevision(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_GetSecurityHandlerRevision ??= _dylib.lookupFunction<
            _c_FPDF_GetSecurityHandlerRevision,
            _dart_FPDF_GetSecurityHandlerRevision>(
        'FPDF_GetSecurityHandlerRevision');
    return _FPDF_GetSecurityHandlerRevision(
      document,
    );
  }

  _dart_FPDF_GetSecurityHandlerRevision _FPDF_GetSecurityHandlerRevision;

  int FPDF_GetPageCount(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_GetPageCount ??=
        _dylib.lookupFunction<_c_FPDF_GetPageCount, _dart_FPDF_GetPageCount>(
            'FPDF_GetPageCount');
    return _FPDF_GetPageCount(
      document,
    );
  }

  _dart_FPDF_GetPageCount _FPDF_GetPageCount;

  ffi.Pointer<fpdf_page_t__> FPDF_LoadPage(
    ffi.Pointer<fpdf_document_t__> document,
    int page_index,
  ) {
    _FPDF_LoadPage ??= _dylib
        .lookupFunction<_c_FPDF_LoadPage, _dart_FPDF_LoadPage>('FPDF_LoadPage');
    return _FPDF_LoadPage(
      document,
      page_index,
    );
  }

  _dart_FPDF_LoadPage _FPDF_LoadPage;

  double FPDF_GetPageWidthF(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDF_GetPageWidthF ??=
        _dylib.lookupFunction<_c_FPDF_GetPageWidthF, _dart_FPDF_GetPageWidthF>(
            'FPDF_GetPageWidthF');
    return _FPDF_GetPageWidthF(
      page,
    );
  }

  _dart_FPDF_GetPageWidthF _FPDF_GetPageWidthF;

  double FPDF_GetPageWidth(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDF_GetPageWidth ??=
        _dylib.lookupFunction<_c_FPDF_GetPageWidth, _dart_FPDF_GetPageWidth>(
            'FPDF_GetPageWidth');
    return _FPDF_GetPageWidth(
      page,
    );
  }

  _dart_FPDF_GetPageWidth _FPDF_GetPageWidth;

  double FPDF_GetPageHeightF(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDF_GetPageHeightF ??= _dylib.lookupFunction<_c_FPDF_GetPageHeightF,
        _dart_FPDF_GetPageHeightF>('FPDF_GetPageHeightF');
    return _FPDF_GetPageHeightF(
      page,
    );
  }

  _dart_FPDF_GetPageHeightF _FPDF_GetPageHeightF;

  double FPDF_GetPageHeight(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDF_GetPageHeight ??=
        _dylib.lookupFunction<_c_FPDF_GetPageHeight, _dart_FPDF_GetPageHeight>(
            'FPDF_GetPageHeight');
    return _FPDF_GetPageHeight(
      page,
    );
  }

  _dart_FPDF_GetPageHeight _FPDF_GetPageHeight;

  int FPDF_GetPageBoundingBox(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<FS_RECTF> rect,
  ) {
    _FPDF_GetPageBoundingBox ??= _dylib.lookupFunction<
        _c_FPDF_GetPageBoundingBox,
        _dart_FPDF_GetPageBoundingBox>('FPDF_GetPageBoundingBox');
    return _FPDF_GetPageBoundingBox(
      page,
      rect,
    );
  }

  _dart_FPDF_GetPageBoundingBox _FPDF_GetPageBoundingBox;

  int FPDF_GetPageSizeByIndexF(
    ffi.Pointer<fpdf_document_t__> document,
    int page_index,
    ffi.Pointer<FS_SIZEF> size,
  ) {
    _FPDF_GetPageSizeByIndexF ??= _dylib.lookupFunction<
        _c_FPDF_GetPageSizeByIndexF,
        _dart_FPDF_GetPageSizeByIndexF>('FPDF_GetPageSizeByIndexF');
    return _FPDF_GetPageSizeByIndexF(
      document,
      page_index,
      size,
    );
  }

  _dart_FPDF_GetPageSizeByIndexF _FPDF_GetPageSizeByIndexF;

  int FPDF_GetPageSizeByIndex(
    ffi.Pointer<fpdf_document_t__> document,
    int page_index,
    ffi.Pointer<ffi.Double> width,
    ffi.Pointer<ffi.Double> height,
  ) {
    _FPDF_GetPageSizeByIndex ??= _dylib.lookupFunction<
        _c_FPDF_GetPageSizeByIndex,
        _dart_FPDF_GetPageSizeByIndex>('FPDF_GetPageSizeByIndex');
    return _FPDF_GetPageSizeByIndex(
      document,
      page_index,
      width,
      height,
    );
  }

  _dart_FPDF_GetPageSizeByIndex _FPDF_GetPageSizeByIndex;

  void FPDF_RenderPageBitmap(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int flags,
  ) {
    _FPDF_RenderPageBitmap ??= _dylib.lookupFunction<_c_FPDF_RenderPageBitmap,
        _dart_FPDF_RenderPageBitmap>('FPDF_RenderPageBitmap');
    return _FPDF_RenderPageBitmap(
      bitmap,
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      flags,
    );
  }

  _dart_FPDF_RenderPageBitmap _FPDF_RenderPageBitmap;

  void FPDF_RenderPageBitmapWithMatrix(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<FS_MATRIX> matrix,
    ffi.Pointer<FS_RECTF> clipping,
    int flags,
  ) {
    _FPDF_RenderPageBitmapWithMatrix ??= _dylib.lookupFunction<
            _c_FPDF_RenderPageBitmapWithMatrix,
            _dart_FPDF_RenderPageBitmapWithMatrix>(
        'FPDF_RenderPageBitmapWithMatrix');
    return _FPDF_RenderPageBitmapWithMatrix(
      bitmap,
      page,
      matrix,
      clipping,
      flags,
    );
  }

  _dart_FPDF_RenderPageBitmapWithMatrix _FPDF_RenderPageBitmapWithMatrix;

  void FPDF_ClosePage(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDF_ClosePage ??=
        _dylib.lookupFunction<_c_FPDF_ClosePage, _dart_FPDF_ClosePage>(
            'FPDF_ClosePage');
    return _FPDF_ClosePage(
      page,
    );
  }

  _dart_FPDF_ClosePage _FPDF_ClosePage;

  void FPDF_CloseDocument(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_CloseDocument ??=
        _dylib.lookupFunction<_c_FPDF_CloseDocument, _dart_FPDF_CloseDocument>(
            'FPDF_CloseDocument');
    return _FPDF_CloseDocument(
      document,
    );
  }

  _dart_FPDF_CloseDocument _FPDF_CloseDocument;

  int FPDF_DeviceToPage(
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int device_x,
    int device_y,
    ffi.Pointer<ffi.Double> page_x,
    ffi.Pointer<ffi.Double> page_y,
  ) {
    _FPDF_DeviceToPage ??=
        _dylib.lookupFunction<_c_FPDF_DeviceToPage, _dart_FPDF_DeviceToPage>(
            'FPDF_DeviceToPage');
    return _FPDF_DeviceToPage(
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      device_x,
      device_y,
      page_x,
      page_y,
    );
  }

  _dart_FPDF_DeviceToPage _FPDF_DeviceToPage;

  int FPDF_PageToDevice(
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    double page_x,
    double page_y,
    ffi.Pointer<ffi.Int32> device_x,
    ffi.Pointer<ffi.Int32> device_y,
  ) {
    _FPDF_PageToDevice ??=
        _dylib.lookupFunction<_c_FPDF_PageToDevice, _dart_FPDF_PageToDevice>(
            'FPDF_PageToDevice');
    return _FPDF_PageToDevice(
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      page_x,
      page_y,
      device_x,
      device_y,
    );
  }

  _dart_FPDF_PageToDevice _FPDF_PageToDevice;

  ffi.Pointer<fpdf_bitmap_t__> FPDFBitmap_Create(
    int width,
    int height,
    int alpha,
  ) {
    _FPDFBitmap_Create ??=
        _dylib.lookupFunction<_c_FPDFBitmap_Create, _dart_FPDFBitmap_Create>(
            'FPDFBitmap_Create');
    return _FPDFBitmap_Create(
      width,
      height,
      alpha,
    );
  }

  _dart_FPDFBitmap_Create _FPDFBitmap_Create;

  ffi.Pointer<fpdf_bitmap_t__> FPDFBitmap_CreateEx(
    int width,
    int height,
    int format,
    ffi.Pointer<ffi.Void> first_scan,
    int stride,
  ) {
    _FPDFBitmap_CreateEx ??= _dylib.lookupFunction<_c_FPDFBitmap_CreateEx,
        _dart_FPDFBitmap_CreateEx>('FPDFBitmap_CreateEx');
    return _FPDFBitmap_CreateEx(
      width,
      height,
      format,
      first_scan,
      stride,
    );
  }

  _dart_FPDFBitmap_CreateEx _FPDFBitmap_CreateEx;

  int FPDFBitmap_GetFormat(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    _FPDFBitmap_GetFormat ??= _dylib.lookupFunction<_c_FPDFBitmap_GetFormat,
        _dart_FPDFBitmap_GetFormat>('FPDFBitmap_GetFormat');
    return _FPDFBitmap_GetFormat(
      bitmap,
    );
  }

  _dart_FPDFBitmap_GetFormat _FPDFBitmap_GetFormat;

  void FPDFBitmap_FillRect(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
    int left,
    int top,
    int width,
    int height,
    int color,
  ) {
    _FPDFBitmap_FillRect ??= _dylib.lookupFunction<_c_FPDFBitmap_FillRect,
        _dart_FPDFBitmap_FillRect>('FPDFBitmap_FillRect');
    return _FPDFBitmap_FillRect(
      bitmap,
      left,
      top,
      width,
      height,
      color,
    );
  }

  _dart_FPDFBitmap_FillRect _FPDFBitmap_FillRect;

  ffi.Pointer<ffi.Void> FPDFBitmap_GetBuffer(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    _FPDFBitmap_GetBuffer ??= _dylib.lookupFunction<_c_FPDFBitmap_GetBuffer,
        _dart_FPDFBitmap_GetBuffer>('FPDFBitmap_GetBuffer');
    return _FPDFBitmap_GetBuffer(
      bitmap,
    );
  }

  _dart_FPDFBitmap_GetBuffer _FPDFBitmap_GetBuffer;

  int FPDFBitmap_GetWidth(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    _FPDFBitmap_GetWidth ??= _dylib.lookupFunction<_c_FPDFBitmap_GetWidth,
        _dart_FPDFBitmap_GetWidth>('FPDFBitmap_GetWidth');
    return _FPDFBitmap_GetWidth(
      bitmap,
    );
  }

  _dart_FPDFBitmap_GetWidth _FPDFBitmap_GetWidth;

  int FPDFBitmap_GetHeight(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    _FPDFBitmap_GetHeight ??= _dylib.lookupFunction<_c_FPDFBitmap_GetHeight,
        _dart_FPDFBitmap_GetHeight>('FPDFBitmap_GetHeight');
    return _FPDFBitmap_GetHeight(
      bitmap,
    );
  }

  _dart_FPDFBitmap_GetHeight _FPDFBitmap_GetHeight;

  int FPDFBitmap_GetStride(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    _FPDFBitmap_GetStride ??= _dylib.lookupFunction<_c_FPDFBitmap_GetStride,
        _dart_FPDFBitmap_GetStride>('FPDFBitmap_GetStride');
    return _FPDFBitmap_GetStride(
      bitmap,
    );
  }

  _dart_FPDFBitmap_GetStride _FPDFBitmap_GetStride;

  void FPDFBitmap_Destroy(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    _FPDFBitmap_Destroy ??=
        _dylib.lookupFunction<_c_FPDFBitmap_Destroy, _dart_FPDFBitmap_Destroy>(
            'FPDFBitmap_Destroy');
    return _FPDFBitmap_Destroy(
      bitmap,
    );
  }

  _dart_FPDFBitmap_Destroy _FPDFBitmap_Destroy;

  int FPDF_VIEWERREF_GetPrintScaling(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_VIEWERREF_GetPrintScaling ??= _dylib.lookupFunction<
        _c_FPDF_VIEWERREF_GetPrintScaling,
        _dart_FPDF_VIEWERREF_GetPrintScaling>('FPDF_VIEWERREF_GetPrintScaling');
    return _FPDF_VIEWERREF_GetPrintScaling(
      document,
    );
  }

  _dart_FPDF_VIEWERREF_GetPrintScaling _FPDF_VIEWERREF_GetPrintScaling;

  int FPDF_VIEWERREF_GetNumCopies(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_VIEWERREF_GetNumCopies ??= _dylib.lookupFunction<
        _c_FPDF_VIEWERREF_GetNumCopies,
        _dart_FPDF_VIEWERREF_GetNumCopies>('FPDF_VIEWERREF_GetNumCopies');
    return _FPDF_VIEWERREF_GetNumCopies(
      document,
    );
  }

  _dart_FPDF_VIEWERREF_GetNumCopies _FPDF_VIEWERREF_GetNumCopies;

  ffi.Pointer<fpdf_pagerange_t__> FPDF_VIEWERREF_GetPrintPageRange(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_VIEWERREF_GetPrintPageRange ??= _dylib.lookupFunction<
            _c_FPDF_VIEWERREF_GetPrintPageRange,
            _dart_FPDF_VIEWERREF_GetPrintPageRange>(
        'FPDF_VIEWERREF_GetPrintPageRange');
    return _FPDF_VIEWERREF_GetPrintPageRange(
      document,
    );
  }

  _dart_FPDF_VIEWERREF_GetPrintPageRange _FPDF_VIEWERREF_GetPrintPageRange;

  int FPDF_VIEWERREF_GetPrintPageRangeCount(
    ffi.Pointer<fpdf_pagerange_t__> pagerange,
  ) {
    _FPDF_VIEWERREF_GetPrintPageRangeCount ??= _dylib.lookupFunction<
            _c_FPDF_VIEWERREF_GetPrintPageRangeCount,
            _dart_FPDF_VIEWERREF_GetPrintPageRangeCount>(
        'FPDF_VIEWERREF_GetPrintPageRangeCount');
    return _FPDF_VIEWERREF_GetPrintPageRangeCount(
      pagerange,
    );
  }

  _dart_FPDF_VIEWERREF_GetPrintPageRangeCount
      _FPDF_VIEWERREF_GetPrintPageRangeCount;

  int FPDF_VIEWERREF_GetPrintPageRangeElement(
    ffi.Pointer<fpdf_pagerange_t__> pagerange,
    int index,
  ) {
    _FPDF_VIEWERREF_GetPrintPageRangeElement ??= _dylib.lookupFunction<
            _c_FPDF_VIEWERREF_GetPrintPageRangeElement,
            _dart_FPDF_VIEWERREF_GetPrintPageRangeElement>(
        'FPDF_VIEWERREF_GetPrintPageRangeElement');
    return _FPDF_VIEWERREF_GetPrintPageRangeElement(
      pagerange,
      index,
    );
  }

  _dart_FPDF_VIEWERREF_GetPrintPageRangeElement
      _FPDF_VIEWERREF_GetPrintPageRangeElement;

  int FPDF_VIEWERREF_GetDuplex(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_VIEWERREF_GetDuplex ??= _dylib.lookupFunction<
        _c_FPDF_VIEWERREF_GetDuplex,
        _dart_FPDF_VIEWERREF_GetDuplex>('FPDF_VIEWERREF_GetDuplex');
    return _FPDF_VIEWERREF_GetDuplex(
      document,
    );
  }

  _dart_FPDF_VIEWERREF_GetDuplex _FPDF_VIEWERREF_GetDuplex;

  int FPDF_VIEWERREF_GetName(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> buffer,
    int length,
  ) {
    _FPDF_VIEWERREF_GetName ??= _dylib.lookupFunction<_c_FPDF_VIEWERREF_GetName,
        _dart_FPDF_VIEWERREF_GetName>('FPDF_VIEWERREF_GetName');
    return _FPDF_VIEWERREF_GetName(
      document,
      key,
      buffer,
      length,
    );
  }

  _dart_FPDF_VIEWERREF_GetName _FPDF_VIEWERREF_GetName;

  int FPDF_CountNamedDests(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_CountNamedDests ??= _dylib.lookupFunction<_c_FPDF_CountNamedDests,
        _dart_FPDF_CountNamedDests>('FPDF_CountNamedDests');
    return _FPDF_CountNamedDests(
      document,
    );
  }

  _dart_FPDF_CountNamedDests _FPDF_CountNamedDests;

  ffi.Pointer<fpdf_dest_t__> FPDF_GetNamedDestByName(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _FPDF_GetNamedDestByName ??= _dylib.lookupFunction<
        _c_FPDF_GetNamedDestByName,
        _dart_FPDF_GetNamedDestByName>('FPDF_GetNamedDestByName');
    return _FPDF_GetNamedDestByName(
      document,
      name,
    );
  }

  _dart_FPDF_GetNamedDestByName _FPDF_GetNamedDestByName;

  ffi.Pointer<fpdf_dest_t__> FPDF_GetNamedDest(
    ffi.Pointer<fpdf_document_t__> document,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    ffi.Pointer<ffi.Int64> buflen,
  ) {
    _FPDF_GetNamedDest ??=
        _dylib.lookupFunction<_c_FPDF_GetNamedDest, _dart_FPDF_GetNamedDest>(
            'FPDF_GetNamedDest');
    return _FPDF_GetNamedDest(
      document,
      index,
      buffer,
      buflen,
    );
  }

  _dart_FPDF_GetNamedDest _FPDF_GetNamedDest;

  /// Experimental API.
  ///
  /// Determine if |document| represents a tagged PDF.
  ///
  /// For the definition of tagged PDF, See (see 10.7 "Tagged PDF" in PDF
  /// Reference 1.7).
  ///
  /// document - handle to a document.
  ///
  /// Returns |true| iff |document| is a tagged PDF.
  int FPDFCatalog_IsTagged(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDFCatalog_IsTagged ??= _dylib.lookupFunction<_c_FPDFCatalog_IsTagged,
        _dart_FPDFCatalog_IsTagged>('FPDFCatalog_IsTagged');
    return _FPDFCatalog_IsTagged(
      document,
    );
  }

  _dart_FPDFCatalog_IsTagged _FPDFCatalog_IsTagged;

  ffi.Pointer<fpdf_structtree_t__> FPDF_StructTree_GetForPage(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDF_StructTree_GetForPage ??= _dylib.lookupFunction<
        _c_FPDF_StructTree_GetForPage,
        _dart_FPDF_StructTree_GetForPage>('FPDF_StructTree_GetForPage');
    return _FPDF_StructTree_GetForPage(
      page,
    );
  }

  _dart_FPDF_StructTree_GetForPage _FPDF_StructTree_GetForPage;

  void FPDF_StructTree_Close(
    ffi.Pointer<fpdf_structtree_t__> struct_tree,
  ) {
    _FPDF_StructTree_Close ??= _dylib.lookupFunction<_c_FPDF_StructTree_Close,
        _dart_FPDF_StructTree_Close>('FPDF_StructTree_Close');
    return _FPDF_StructTree_Close(
      struct_tree,
    );
  }

  _dart_FPDF_StructTree_Close _FPDF_StructTree_Close;

  int FPDF_StructTree_CountChildren(
    ffi.Pointer<fpdf_structtree_t__> struct_tree,
  ) {
    _FPDF_StructTree_CountChildren ??= _dylib.lookupFunction<
        _c_FPDF_StructTree_CountChildren,
        _dart_FPDF_StructTree_CountChildren>('FPDF_StructTree_CountChildren');
    return _FPDF_StructTree_CountChildren(
      struct_tree,
    );
  }

  _dart_FPDF_StructTree_CountChildren _FPDF_StructTree_CountChildren;

  ffi.Pointer<fpdf_structelement_t__> FPDF_StructTree_GetChildAtIndex(
    ffi.Pointer<fpdf_structtree_t__> struct_tree,
    int index,
  ) {
    _FPDF_StructTree_GetChildAtIndex ??= _dylib.lookupFunction<
            _c_FPDF_StructTree_GetChildAtIndex,
            _dart_FPDF_StructTree_GetChildAtIndex>(
        'FPDF_StructTree_GetChildAtIndex');
    return _FPDF_StructTree_GetChildAtIndex(
      struct_tree,
      index,
    );
  }

  _dart_FPDF_StructTree_GetChildAtIndex _FPDF_StructTree_GetChildAtIndex;

  int FPDF_StructElement_GetAltText(
    ffi.Pointer<fpdf_structelement_t__> struct_element,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDF_StructElement_GetAltText ??= _dylib.lookupFunction<
        _c_FPDF_StructElement_GetAltText,
        _dart_FPDF_StructElement_GetAltText>('FPDF_StructElement_GetAltText');
    return _FPDF_StructElement_GetAltText(
      struct_element,
      buffer,
      buflen,
    );
  }

  _dart_FPDF_StructElement_GetAltText _FPDF_StructElement_GetAltText;

  int FPDF_StructElement_GetMarkedContentID(
    ffi.Pointer<fpdf_structelement_t__> struct_element,
  ) {
    _FPDF_StructElement_GetMarkedContentID ??= _dylib.lookupFunction<
            _c_FPDF_StructElement_GetMarkedContentID,
            _dart_FPDF_StructElement_GetMarkedContentID>(
        'FPDF_StructElement_GetMarkedContentID');
    return _FPDF_StructElement_GetMarkedContentID(
      struct_element,
    );
  }

  _dart_FPDF_StructElement_GetMarkedContentID
      _FPDF_StructElement_GetMarkedContentID;

  int FPDF_StructElement_GetType(
    ffi.Pointer<fpdf_structelement_t__> struct_element,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDF_StructElement_GetType ??= _dylib.lookupFunction<
        _c_FPDF_StructElement_GetType,
        _dart_FPDF_StructElement_GetType>('FPDF_StructElement_GetType');
    return _FPDF_StructElement_GetType(
      struct_element,
      buffer,
      buflen,
    );
  }

  _dart_FPDF_StructElement_GetType _FPDF_StructElement_GetType;

  int FPDF_StructElement_GetTitle(
    ffi.Pointer<fpdf_structelement_t__> struct_element,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDF_StructElement_GetTitle ??= _dylib.lookupFunction<
        _c_FPDF_StructElement_GetTitle,
        _dart_FPDF_StructElement_GetTitle>('FPDF_StructElement_GetTitle');
    return _FPDF_StructElement_GetTitle(
      struct_element,
      buffer,
      buflen,
    );
  }

  _dart_FPDF_StructElement_GetTitle _FPDF_StructElement_GetTitle;

  int FPDF_StructElement_CountChildren(
    ffi.Pointer<fpdf_structelement_t__> struct_element,
  ) {
    _FPDF_StructElement_CountChildren ??= _dylib.lookupFunction<
            _c_FPDF_StructElement_CountChildren,
            _dart_FPDF_StructElement_CountChildren>(
        'FPDF_StructElement_CountChildren');
    return _FPDF_StructElement_CountChildren(
      struct_element,
    );
  }

  _dart_FPDF_StructElement_CountChildren _FPDF_StructElement_CountChildren;

  ffi.Pointer<fpdf_structelement_t__> FPDF_StructElement_GetChildAtIndex(
    ffi.Pointer<fpdf_structelement_t__> struct_element,
    int index,
  ) {
    _FPDF_StructElement_GetChildAtIndex ??= _dylib.lookupFunction<
            _c_FPDF_StructElement_GetChildAtIndex,
            _dart_FPDF_StructElement_GetChildAtIndex>(
        'FPDF_StructElement_GetChildAtIndex');
    return _FPDF_StructElement_GetChildAtIndex(
      struct_element,
      index,
    );
  }

  _dart_FPDF_StructElement_GetChildAtIndex _FPDF_StructElement_GetChildAtIndex;

  ffi.Pointer<fpdf_textpage_t__> FPDFText_LoadPage(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDFText_LoadPage ??=
        _dylib.lookupFunction<_c_FPDFText_LoadPage, _dart_FPDFText_LoadPage>(
            'FPDFText_LoadPage');
    return _FPDFText_LoadPage(
      page,
    );
  }

  _dart_FPDFText_LoadPage _FPDFText_LoadPage;

  void FPDFText_ClosePage(
    ffi.Pointer<fpdf_textpage_t__> text_page,
  ) {
    _FPDFText_ClosePage ??=
        _dylib.lookupFunction<_c_FPDFText_ClosePage, _dart_FPDFText_ClosePage>(
            'FPDFText_ClosePage');
    return _FPDFText_ClosePage(
      text_page,
    );
  }

  _dart_FPDFText_ClosePage _FPDFText_ClosePage;

  int FPDFText_CountChars(
    ffi.Pointer<fpdf_textpage_t__> text_page,
  ) {
    _FPDFText_CountChars ??= _dylib.lookupFunction<_c_FPDFText_CountChars,
        _dart_FPDFText_CountChars>('FPDFText_CountChars');
    return _FPDFText_CountChars(
      text_page,
    );
  }

  _dart_FPDFText_CountChars _FPDFText_CountChars;

  int FPDFText_GetUnicode(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
  ) {
    _FPDFText_GetUnicode ??= _dylib.lookupFunction<_c_FPDFText_GetUnicode,
        _dart_FPDFText_GetUnicode>('FPDFText_GetUnicode');
    return _FPDFText_GetUnicode(
      text_page,
      index,
    );
  }

  _dart_FPDFText_GetUnicode _FPDFText_GetUnicode;

  double FPDFText_GetFontSize(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
  ) {
    _FPDFText_GetFontSize ??= _dylib.lookupFunction<_c_FPDFText_GetFontSize,
        _dart_FPDFText_GetFontSize>('FPDFText_GetFontSize');
    return _FPDFText_GetFontSize(
      text_page,
      index,
    );
  }

  _dart_FPDFText_GetFontSize _FPDFText_GetFontSize;

  int FPDFText_GetFontInfo(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Int32> flags,
  ) {
    _FPDFText_GetFontInfo ??= _dylib.lookupFunction<_c_FPDFText_GetFontInfo,
        _dart_FPDFText_GetFontInfo>('FPDFText_GetFontInfo');
    return _FPDFText_GetFontInfo(
      text_page,
      index,
      buffer,
      buflen,
      flags,
    );
  }

  _dart_FPDFText_GetFontInfo _FPDFText_GetFontInfo;

  int FPDFText_GetFontWeight(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
  ) {
    _FPDFText_GetFontWeight ??= _dylib.lookupFunction<_c_FPDFText_GetFontWeight,
        _dart_FPDFText_GetFontWeight>('FPDFText_GetFontWeight');
    return _FPDFText_GetFontWeight(
      text_page,
      index,
    );
  }

  _dart_FPDFText_GetFontWeight _FPDFText_GetFontWeight;

  int FPDFText_GetTextRenderMode(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
  ) {
    _FPDFText_GetTextRenderMode ??= _dylib.lookupFunction<
        _c_FPDFText_GetTextRenderMode,
        _dart_FPDFText_GetTextRenderMode>('FPDFText_GetTextRenderMode');
    return _FPDFText_GetTextRenderMode(
      text_page,
      index,
    );
  }

  _dart_FPDFText_GetTextRenderMode _FPDFText_GetTextRenderMode;

  int FPDFText_GetFillColor(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
    ffi.Pointer<ffi.Uint32> R,
    ffi.Pointer<ffi.Uint32> G,
    ffi.Pointer<ffi.Uint32> B,
    ffi.Pointer<ffi.Uint32> A,
  ) {
    _FPDFText_GetFillColor ??= _dylib.lookupFunction<_c_FPDFText_GetFillColor,
        _dart_FPDFText_GetFillColor>('FPDFText_GetFillColor');
    return _FPDFText_GetFillColor(
      text_page,
      index,
      R,
      G,
      B,
      A,
    );
  }

  _dart_FPDFText_GetFillColor _FPDFText_GetFillColor;

  int FPDFText_GetStrokeColor(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
    ffi.Pointer<ffi.Uint32> R,
    ffi.Pointer<ffi.Uint32> G,
    ffi.Pointer<ffi.Uint32> B,
    ffi.Pointer<ffi.Uint32> A,
  ) {
    _FPDFText_GetStrokeColor ??= _dylib.lookupFunction<
        _c_FPDFText_GetStrokeColor,
        _dart_FPDFText_GetStrokeColor>('FPDFText_GetStrokeColor');
    return _FPDFText_GetStrokeColor(
      text_page,
      index,
      R,
      G,
      B,
      A,
    );
  }

  _dart_FPDFText_GetStrokeColor _FPDFText_GetStrokeColor;

  double FPDFText_GetCharAngle(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
  ) {
    _FPDFText_GetCharAngle ??= _dylib.lookupFunction<_c_FPDFText_GetCharAngle,
        _dart_FPDFText_GetCharAngle>('FPDFText_GetCharAngle');
    return _FPDFText_GetCharAngle(
      text_page,
      index,
    );
  }

  _dart_FPDFText_GetCharAngle _FPDFText_GetCharAngle;

  int FPDFText_GetCharBox(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
    ffi.Pointer<ffi.Double> left,
    ffi.Pointer<ffi.Double> right,
    ffi.Pointer<ffi.Double> bottom,
    ffi.Pointer<ffi.Double> top,
  ) {
    _FPDFText_GetCharBox ??= _dylib.lookupFunction<_c_FPDFText_GetCharBox,
        _dart_FPDFText_GetCharBox>('FPDFText_GetCharBox');
    return _FPDFText_GetCharBox(
      text_page,
      index,
      left,
      right,
      bottom,
      top,
    );
  }

  _dart_FPDFText_GetCharBox _FPDFText_GetCharBox;

  int FPDFText_GetLooseCharBox(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
    ffi.Pointer<FS_RECTF> rect,
  ) {
    _FPDFText_GetLooseCharBox ??= _dylib.lookupFunction<
        _c_FPDFText_GetLooseCharBox,
        _dart_FPDFText_GetLooseCharBox>('FPDFText_GetLooseCharBox');
    return _FPDFText_GetLooseCharBox(
      text_page,
      index,
      rect,
    );
  }

  _dart_FPDFText_GetLooseCharBox _FPDFText_GetLooseCharBox;

  int FPDFText_GetMatrix(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
    ffi.Pointer<FS_MATRIX> matrix,
  ) {
    _FPDFText_GetMatrix ??=
        _dylib.lookupFunction<_c_FPDFText_GetMatrix, _dart_FPDFText_GetMatrix>(
            'FPDFText_GetMatrix');
    return _FPDFText_GetMatrix(
      text_page,
      index,
      matrix,
    );
  }

  _dart_FPDFText_GetMatrix _FPDFText_GetMatrix;

  int FPDFText_GetCharOrigin(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int index,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    _FPDFText_GetCharOrigin ??= _dylib.lookupFunction<_c_FPDFText_GetCharOrigin,
        _dart_FPDFText_GetCharOrigin>('FPDFText_GetCharOrigin');
    return _FPDFText_GetCharOrigin(
      text_page,
      index,
      x,
      y,
    );
  }

  _dart_FPDFText_GetCharOrigin _FPDFText_GetCharOrigin;

  int FPDFText_GetCharIndexAtPos(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    double x,
    double y,
    double xTolerance,
    double yTolerance,
  ) {
    _FPDFText_GetCharIndexAtPos ??= _dylib.lookupFunction<
        _c_FPDFText_GetCharIndexAtPos,
        _dart_FPDFText_GetCharIndexAtPos>('FPDFText_GetCharIndexAtPos');
    return _FPDFText_GetCharIndexAtPos(
      text_page,
      x,
      y,
      xTolerance,
      yTolerance,
    );
  }

  _dart_FPDFText_GetCharIndexAtPos _FPDFText_GetCharIndexAtPos;

  int FPDFText_GetText(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int start_index,
    int count,
    ffi.Pointer<ffi.Uint16> result,
  ) {
    _FPDFText_GetText ??=
        _dylib.lookupFunction<_c_FPDFText_GetText, _dart_FPDFText_GetText>(
            'FPDFText_GetText');
    return _FPDFText_GetText(
      text_page,
      start_index,
      count,
      result,
    );
  }

  _dart_FPDFText_GetText _FPDFText_GetText;

  int FPDFText_CountRects(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int start_index,
    int count,
  ) {
    _FPDFText_CountRects ??= _dylib.lookupFunction<_c_FPDFText_CountRects,
        _dart_FPDFText_CountRects>('FPDFText_CountRects');
    return _FPDFText_CountRects(
      text_page,
      start_index,
      count,
    );
  }

  _dart_FPDFText_CountRects _FPDFText_CountRects;

  int FPDFText_GetRect(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int rect_index,
    ffi.Pointer<ffi.Double> left,
    ffi.Pointer<ffi.Double> top,
    ffi.Pointer<ffi.Double> right,
    ffi.Pointer<ffi.Double> bottom,
  ) {
    _FPDFText_GetRect ??=
        _dylib.lookupFunction<_c_FPDFText_GetRect, _dart_FPDFText_GetRect>(
            'FPDFText_GetRect');
    return _FPDFText_GetRect(
      text_page,
      rect_index,
      left,
      top,
      right,
      bottom,
    );
  }

  _dart_FPDFText_GetRect _FPDFText_GetRect;

  int FPDFText_GetBoundedText(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    double left,
    double top,
    double right,
    double bottom,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFText_GetBoundedText ??= _dylib.lookupFunction<
        _c_FPDFText_GetBoundedText,
        _dart_FPDFText_GetBoundedText>('FPDFText_GetBoundedText');
    return _FPDFText_GetBoundedText(
      text_page,
      left,
      top,
      right,
      bottom,
      buffer,
      buflen,
    );
  }

  _dart_FPDFText_GetBoundedText _FPDFText_GetBoundedText;

  ffi.Pointer<fpdf_schhandle_t__> FPDFText_FindStart(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    ffi.Pointer<ffi.Uint16> findwhat,
    int flags,
    int start_index,
  ) {
    _FPDFText_FindStart ??=
        _dylib.lookupFunction<_c_FPDFText_FindStart, _dart_FPDFText_FindStart>(
            'FPDFText_FindStart');
    return _FPDFText_FindStart(
      text_page,
      findwhat,
      flags,
      start_index,
    );
  }

  _dart_FPDFText_FindStart _FPDFText_FindStart;

  int FPDFText_FindNext(
    ffi.Pointer<fpdf_schhandle_t__> handle,
  ) {
    _FPDFText_FindNext ??=
        _dylib.lookupFunction<_c_FPDFText_FindNext, _dart_FPDFText_FindNext>(
            'FPDFText_FindNext');
    return _FPDFText_FindNext(
      handle,
    );
  }

  _dart_FPDFText_FindNext _FPDFText_FindNext;

  int FPDFText_FindPrev(
    ffi.Pointer<fpdf_schhandle_t__> handle,
  ) {
    _FPDFText_FindPrev ??=
        _dylib.lookupFunction<_c_FPDFText_FindPrev, _dart_FPDFText_FindPrev>(
            'FPDFText_FindPrev');
    return _FPDFText_FindPrev(
      handle,
    );
  }

  _dart_FPDFText_FindPrev _FPDFText_FindPrev;

  int FPDFText_GetSchResultIndex(
    ffi.Pointer<fpdf_schhandle_t__> handle,
  ) {
    _FPDFText_GetSchResultIndex ??= _dylib.lookupFunction<
        _c_FPDFText_GetSchResultIndex,
        _dart_FPDFText_GetSchResultIndex>('FPDFText_GetSchResultIndex');
    return _FPDFText_GetSchResultIndex(
      handle,
    );
  }

  _dart_FPDFText_GetSchResultIndex _FPDFText_GetSchResultIndex;

  int FPDFText_GetSchCount(
    ffi.Pointer<fpdf_schhandle_t__> handle,
  ) {
    _FPDFText_GetSchCount ??= _dylib.lookupFunction<_c_FPDFText_GetSchCount,
        _dart_FPDFText_GetSchCount>('FPDFText_GetSchCount');
    return _FPDFText_GetSchCount(
      handle,
    );
  }

  _dart_FPDFText_GetSchCount _FPDFText_GetSchCount;

  void FPDFText_FindClose(
    ffi.Pointer<fpdf_schhandle_t__> handle,
  ) {
    _FPDFText_FindClose ??=
        _dylib.lookupFunction<_c_FPDFText_FindClose, _dart_FPDFText_FindClose>(
            'FPDFText_FindClose');
    return _FPDFText_FindClose(
      handle,
    );
  }

  _dart_FPDFText_FindClose _FPDFText_FindClose;

  ffi.Pointer<fpdf_pagelink_t__> FPDFLink_LoadWebLinks(
    ffi.Pointer<fpdf_textpage_t__> text_page,
  ) {
    _FPDFLink_LoadWebLinks ??= _dylib.lookupFunction<_c_FPDFLink_LoadWebLinks,
        _dart_FPDFLink_LoadWebLinks>('FPDFLink_LoadWebLinks');
    return _FPDFLink_LoadWebLinks(
      text_page,
    );
  }

  _dart_FPDFLink_LoadWebLinks _FPDFLink_LoadWebLinks;

  int FPDFLink_CountWebLinks(
    ffi.Pointer<fpdf_pagelink_t__> link_page,
  ) {
    _FPDFLink_CountWebLinks ??= _dylib.lookupFunction<_c_FPDFLink_CountWebLinks,
        _dart_FPDFLink_CountWebLinks>('FPDFLink_CountWebLinks');
    return _FPDFLink_CountWebLinks(
      link_page,
    );
  }

  _dart_FPDFLink_CountWebLinks _FPDFLink_CountWebLinks;

  int FPDFLink_GetURL(
    ffi.Pointer<fpdf_pagelink_t__> link_page,
    int link_index,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFLink_GetURL ??=
        _dylib.lookupFunction<_c_FPDFLink_GetURL, _dart_FPDFLink_GetURL>(
            'FPDFLink_GetURL');
    return _FPDFLink_GetURL(
      link_page,
      link_index,
      buffer,
      buflen,
    );
  }

  _dart_FPDFLink_GetURL _FPDFLink_GetURL;

  int FPDFLink_CountRects(
    ffi.Pointer<fpdf_pagelink_t__> link_page,
    int link_index,
  ) {
    _FPDFLink_CountRects ??= _dylib.lookupFunction<_c_FPDFLink_CountRects,
        _dart_FPDFLink_CountRects>('FPDFLink_CountRects');
    return _FPDFLink_CountRects(
      link_page,
      link_index,
    );
  }

  _dart_FPDFLink_CountRects _FPDFLink_CountRects;

  int FPDFLink_GetRect(
    ffi.Pointer<fpdf_pagelink_t__> link_page,
    int link_index,
    int rect_index,
    ffi.Pointer<ffi.Double> left,
    ffi.Pointer<ffi.Double> top,
    ffi.Pointer<ffi.Double> right,
    ffi.Pointer<ffi.Double> bottom,
  ) {
    _FPDFLink_GetRect ??=
        _dylib.lookupFunction<_c_FPDFLink_GetRect, _dart_FPDFLink_GetRect>(
            'FPDFLink_GetRect');
    return _FPDFLink_GetRect(
      link_page,
      link_index,
      rect_index,
      left,
      top,
      right,
      bottom,
    );
  }

  _dart_FPDFLink_GetRect _FPDFLink_GetRect;

  int FPDFLink_GetTextRange(
    ffi.Pointer<fpdf_pagelink_t__> link_page,
    int link_index,
    ffi.Pointer<ffi.Int32> start_char_index,
    ffi.Pointer<ffi.Int32> char_count,
  ) {
    _FPDFLink_GetTextRange ??= _dylib.lookupFunction<_c_FPDFLink_GetTextRange,
        _dart_FPDFLink_GetTextRange>('FPDFLink_GetTextRange');
    return _FPDFLink_GetTextRange(
      link_page,
      link_index,
      start_char_index,
      char_count,
    );
  }

  _dart_FPDFLink_GetTextRange _FPDFLink_GetTextRange;

  void FPDFLink_CloseWebLinks(
    ffi.Pointer<fpdf_pagelink_t__> link_page,
  ) {
    _FPDFLink_CloseWebLinks ??= _dylib.lookupFunction<_c_FPDFLink_CloseWebLinks,
        _dart_FPDFLink_CloseWebLinks>('FPDFLink_CloseWebLinks');
    return _FPDFLink_CloseWebLinks(
      link_page,
    );
  }

  _dart_FPDFLink_CloseWebLinks _FPDFLink_CloseWebLinks;

  ffi.Pointer<fpdf_bookmark_t__> FPDFBookmark_GetFirstChild(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_bookmark_t__> bookmark,
  ) {
    _FPDFBookmark_GetFirstChild ??= _dylib.lookupFunction<
        _c_FPDFBookmark_GetFirstChild,
        _dart_FPDFBookmark_GetFirstChild>('FPDFBookmark_GetFirstChild');
    return _FPDFBookmark_GetFirstChild(
      document,
      bookmark,
    );
  }

  _dart_FPDFBookmark_GetFirstChild _FPDFBookmark_GetFirstChild;

  ffi.Pointer<fpdf_bookmark_t__> FPDFBookmark_GetNextSibling(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_bookmark_t__> bookmark,
  ) {
    _FPDFBookmark_GetNextSibling ??= _dylib.lookupFunction<
        _c_FPDFBookmark_GetNextSibling,
        _dart_FPDFBookmark_GetNextSibling>('FPDFBookmark_GetNextSibling');
    return _FPDFBookmark_GetNextSibling(
      document,
      bookmark,
    );
  }

  _dart_FPDFBookmark_GetNextSibling _FPDFBookmark_GetNextSibling;

  int FPDFBookmark_GetTitle(
    ffi.Pointer<fpdf_bookmark_t__> bookmark,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDFBookmark_GetTitle ??= _dylib.lookupFunction<_c_FPDFBookmark_GetTitle,
        _dart_FPDFBookmark_GetTitle>('FPDFBookmark_GetTitle');
    return _FPDFBookmark_GetTitle(
      bookmark,
      buffer,
      buflen,
    );
  }

  _dart_FPDFBookmark_GetTitle _FPDFBookmark_GetTitle;

  ffi.Pointer<fpdf_bookmark_t__> FPDFBookmark_Find(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Uint16> title,
  ) {
    _FPDFBookmark_Find ??=
        _dylib.lookupFunction<_c_FPDFBookmark_Find, _dart_FPDFBookmark_Find>(
            'FPDFBookmark_Find');
    return _FPDFBookmark_Find(
      document,
      title,
    );
  }

  _dart_FPDFBookmark_Find _FPDFBookmark_Find;

  ffi.Pointer<fpdf_dest_t__> FPDFBookmark_GetDest(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_bookmark_t__> bookmark,
  ) {
    _FPDFBookmark_GetDest ??= _dylib.lookupFunction<_c_FPDFBookmark_GetDest,
        _dart_FPDFBookmark_GetDest>('FPDFBookmark_GetDest');
    return _FPDFBookmark_GetDest(
      document,
      bookmark,
    );
  }

  _dart_FPDFBookmark_GetDest _FPDFBookmark_GetDest;

  ffi.Pointer<fpdf_action_t__> FPDFBookmark_GetAction(
    ffi.Pointer<fpdf_bookmark_t__> bookmark,
  ) {
    _FPDFBookmark_GetAction ??= _dylib.lookupFunction<_c_FPDFBookmark_GetAction,
        _dart_FPDFBookmark_GetAction>('FPDFBookmark_GetAction');
    return _FPDFBookmark_GetAction(
      bookmark,
    );
  }

  _dart_FPDFBookmark_GetAction _FPDFBookmark_GetAction;

  int FPDFAction_GetType(
    ffi.Pointer<fpdf_action_t__> action,
  ) {
    _FPDFAction_GetType ??=
        _dylib.lookupFunction<_c_FPDFAction_GetType, _dart_FPDFAction_GetType>(
            'FPDFAction_GetType');
    return _FPDFAction_GetType(
      action,
    );
  }

  _dart_FPDFAction_GetType _FPDFAction_GetType;

  ffi.Pointer<fpdf_dest_t__> FPDFAction_GetDest(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_action_t__> action,
  ) {
    _FPDFAction_GetDest ??=
        _dylib.lookupFunction<_c_FPDFAction_GetDest, _dart_FPDFAction_GetDest>(
            'FPDFAction_GetDest');
    return _FPDFAction_GetDest(
      document,
      action,
    );
  }

  _dart_FPDFAction_GetDest _FPDFAction_GetDest;

  int FPDFAction_GetFilePath(
    ffi.Pointer<fpdf_action_t__> action,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDFAction_GetFilePath ??= _dylib.lookupFunction<_c_FPDFAction_GetFilePath,
        _dart_FPDFAction_GetFilePath>('FPDFAction_GetFilePath');
    return _FPDFAction_GetFilePath(
      action,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAction_GetFilePath _FPDFAction_GetFilePath;

  int FPDFAction_GetURIPath(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_action_t__> action,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDFAction_GetURIPath ??= _dylib.lookupFunction<_c_FPDFAction_GetURIPath,
        _dart_FPDFAction_GetURIPath>('FPDFAction_GetURIPath');
    return _FPDFAction_GetURIPath(
      document,
      action,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAction_GetURIPath _FPDFAction_GetURIPath;

  int FPDFDest_GetDestPageIndex(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_dest_t__> dest,
  ) {
    _FPDFDest_GetDestPageIndex ??= _dylib.lookupFunction<
        _c_FPDFDest_GetDestPageIndex,
        _dart_FPDFDest_GetDestPageIndex>('FPDFDest_GetDestPageIndex');
    return _FPDFDest_GetDestPageIndex(
      document,
      dest,
    );
  }

  _dart_FPDFDest_GetDestPageIndex _FPDFDest_GetDestPageIndex;

  int FPDFDest_GetView(
    ffi.Pointer<fpdf_dest_t__> dest,
    ffi.Pointer<ffi.Uint64> pNumParams,
    ffi.Pointer<ffi.Float> pParams,
  ) {
    _FPDFDest_GetView ??=
        _dylib.lookupFunction<_c_FPDFDest_GetView, _dart_FPDFDest_GetView>(
            'FPDFDest_GetView');
    return _FPDFDest_GetView(
      dest,
      pNumParams,
      pParams,
    );
  }

  _dart_FPDFDest_GetView _FPDFDest_GetView;

  int FPDFDest_GetLocationInPage(
    ffi.Pointer<fpdf_dest_t__> dest,
    ffi.Pointer<ffi.Int32> hasXVal,
    ffi.Pointer<ffi.Int32> hasYVal,
    ffi.Pointer<ffi.Int32> hasZoomVal,
    ffi.Pointer<ffi.Float> x,
    ffi.Pointer<ffi.Float> y,
    ffi.Pointer<ffi.Float> zoom,
  ) {
    _FPDFDest_GetLocationInPage ??= _dylib.lookupFunction<
        _c_FPDFDest_GetLocationInPage,
        _dart_FPDFDest_GetLocationInPage>('FPDFDest_GetLocationInPage');
    return _FPDFDest_GetLocationInPage(
      dest,
      hasXVal,
      hasYVal,
      hasZoomVal,
      x,
      y,
      zoom,
    );
  }

  _dart_FPDFDest_GetLocationInPage _FPDFDest_GetLocationInPage;

  ffi.Pointer<fpdf_link_t__> FPDFLink_GetLinkAtPoint(
    ffi.Pointer<fpdf_page_t__> page,
    double x,
    double y,
  ) {
    _FPDFLink_GetLinkAtPoint ??= _dylib.lookupFunction<
        _c_FPDFLink_GetLinkAtPoint,
        _dart_FPDFLink_GetLinkAtPoint>('FPDFLink_GetLinkAtPoint');
    return _FPDFLink_GetLinkAtPoint(
      page,
      x,
      y,
    );
  }

  _dart_FPDFLink_GetLinkAtPoint _FPDFLink_GetLinkAtPoint;

  int FPDFLink_GetLinkZOrderAtPoint(
    ffi.Pointer<fpdf_page_t__> page,
    double x,
    double y,
  ) {
    _FPDFLink_GetLinkZOrderAtPoint ??= _dylib.lookupFunction<
        _c_FPDFLink_GetLinkZOrderAtPoint,
        _dart_FPDFLink_GetLinkZOrderAtPoint>('FPDFLink_GetLinkZOrderAtPoint');
    return _FPDFLink_GetLinkZOrderAtPoint(
      page,
      x,
      y,
    );
  }

  _dart_FPDFLink_GetLinkZOrderAtPoint _FPDFLink_GetLinkZOrderAtPoint;

  ffi.Pointer<fpdf_dest_t__> FPDFLink_GetDest(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_link_t__> link,
  ) {
    _FPDFLink_GetDest ??=
        _dylib.lookupFunction<_c_FPDFLink_GetDest, _dart_FPDFLink_GetDest>(
            'FPDFLink_GetDest');
    return _FPDFLink_GetDest(
      document,
      link,
    );
  }

  _dart_FPDFLink_GetDest _FPDFLink_GetDest;

  ffi.Pointer<fpdf_action_t__> FPDFLink_GetAction(
    ffi.Pointer<fpdf_link_t__> link,
  ) {
    _FPDFLink_GetAction ??=
        _dylib.lookupFunction<_c_FPDFLink_GetAction, _dart_FPDFLink_GetAction>(
            'FPDFLink_GetAction');
    return _FPDFLink_GetAction(
      link,
    );
  }

  _dart_FPDFLink_GetAction _FPDFLink_GetAction;

  int FPDFLink_Enumerate(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Int32> start_pos,
    ffi.Pointer<ffi.Pointer<fpdf_link_t__>> link_annot,
  ) {
    _FPDFLink_Enumerate ??=
        _dylib.lookupFunction<_c_FPDFLink_Enumerate, _dart_FPDFLink_Enumerate>(
            'FPDFLink_Enumerate');
    return _FPDFLink_Enumerate(
      page,
      start_pos,
      link_annot,
    );
  }

  _dart_FPDFLink_Enumerate _FPDFLink_Enumerate;

  int FPDFLink_GetAnnotRect(
    ffi.Pointer<fpdf_link_t__> link_annot,
    ffi.Pointer<FS_RECTF> rect,
  ) {
    _FPDFLink_GetAnnotRect ??= _dylib.lookupFunction<_c_FPDFLink_GetAnnotRect,
        _dart_FPDFLink_GetAnnotRect>('FPDFLink_GetAnnotRect');
    return _FPDFLink_GetAnnotRect(
      link_annot,
      rect,
    );
  }

  _dart_FPDFLink_GetAnnotRect _FPDFLink_GetAnnotRect;

  int FPDFLink_CountQuadPoints(
    ffi.Pointer<fpdf_link_t__> link_annot,
  ) {
    _FPDFLink_CountQuadPoints ??= _dylib.lookupFunction<
        _c_FPDFLink_CountQuadPoints,
        _dart_FPDFLink_CountQuadPoints>('FPDFLink_CountQuadPoints');
    return _FPDFLink_CountQuadPoints(
      link_annot,
    );
  }

  _dart_FPDFLink_CountQuadPoints _FPDFLink_CountQuadPoints;

  int FPDFLink_GetQuadPoints(
    ffi.Pointer<fpdf_link_t__> link_annot,
    int quad_index,
    ffi.Pointer<FS_QUADPOINTSF> quad_points,
  ) {
    _FPDFLink_GetQuadPoints ??= _dylib.lookupFunction<_c_FPDFLink_GetQuadPoints,
        _dart_FPDFLink_GetQuadPoints>('FPDFLink_GetQuadPoints');
    return _FPDFLink_GetQuadPoints(
      link_annot,
      quad_index,
      quad_points,
    );
  }

  _dart_FPDFLink_GetQuadPoints _FPDFLink_GetQuadPoints;

  int FPDF_GetFileIdentifier(
    ffi.Pointer<fpdf_document_t__> document,
    int id_type,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDF_GetFileIdentifier ??= _dylib.lookupFunction<_c_FPDF_GetFileIdentifier,
        _dart_FPDF_GetFileIdentifier>('FPDF_GetFileIdentifier');
    return _FPDF_GetFileIdentifier(
      document,
      id_type,
      buffer,
      buflen,
    );
  }

  _dart_FPDF_GetFileIdentifier _FPDF_GetFileIdentifier;

  int FPDF_GetMetaText(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Int8> tag,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDF_GetMetaText ??=
        _dylib.lookupFunction<_c_FPDF_GetMetaText, _dart_FPDF_GetMetaText>(
            'FPDF_GetMetaText');
    return _FPDF_GetMetaText(
      document,
      tag,
      buffer,
      buflen,
    );
  }

  _dart_FPDF_GetMetaText _FPDF_GetMetaText;

  int FPDF_GetPageLabel(
    ffi.Pointer<fpdf_document_t__> document,
    int page_index,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDF_GetPageLabel ??=
        _dylib.lookupFunction<_c_FPDF_GetPageLabel, _dart_FPDF_GetPageLabel>(
            'FPDF_GetPageLabel');
    return _FPDF_GetPageLabel(
      document,
      page_index,
      buffer,
      buflen,
    );
  }

  _dart_FPDF_GetPageLabel _FPDF_GetPageLabel;

  ffi.Pointer<fpdf_document_t__> FPDF_CreateNewDocument() {
    _FPDF_CreateNewDocument ??= _dylib.lookupFunction<_c_FPDF_CreateNewDocument,
        _dart_FPDF_CreateNewDocument>('FPDF_CreateNewDocument');
    return _FPDF_CreateNewDocument();
  }

  _dart_FPDF_CreateNewDocument _FPDF_CreateNewDocument;

  ffi.Pointer<fpdf_page_t__> FPDFPage_New(
    ffi.Pointer<fpdf_document_t__> document,
    int page_index,
    double width,
    double height,
  ) {
    _FPDFPage_New ??= _dylib
        .lookupFunction<_c_FPDFPage_New, _dart_FPDFPage_New>('FPDFPage_New');
    return _FPDFPage_New(
      document,
      page_index,
      width,
      height,
    );
  }

  _dart_FPDFPage_New _FPDFPage_New;

  void FPDFPage_Delete(
    ffi.Pointer<fpdf_document_t__> document,
    int page_index,
  ) {
    _FPDFPage_Delete ??=
        _dylib.lookupFunction<_c_FPDFPage_Delete, _dart_FPDFPage_Delete>(
            'FPDFPage_Delete');
    return _FPDFPage_Delete(
      document,
      page_index,
    );
  }

  _dart_FPDFPage_Delete _FPDFPage_Delete;

  int FPDFPage_GetRotation(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDFPage_GetRotation ??= _dylib.lookupFunction<_c_FPDFPage_GetRotation,
        _dart_FPDFPage_GetRotation>('FPDFPage_GetRotation');
    return _FPDFPage_GetRotation(
      page,
    );
  }

  _dart_FPDFPage_GetRotation _FPDFPage_GetRotation;

  void FPDFPage_SetRotation(
    ffi.Pointer<fpdf_page_t__> page,
    int rotate,
  ) {
    _FPDFPage_SetRotation ??= _dylib.lookupFunction<_c_FPDFPage_SetRotation,
        _dart_FPDFPage_SetRotation>('FPDFPage_SetRotation');
    return _FPDFPage_SetRotation(
      page,
      rotate,
    );
  }

  _dart_FPDFPage_SetRotation _FPDFPage_SetRotation;

  void FPDFPage_InsertObject(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<fpdf_pageobject_t__> page_obj,
  ) {
    _FPDFPage_InsertObject ??= _dylib.lookupFunction<_c_FPDFPage_InsertObject,
        _dart_FPDFPage_InsertObject>('FPDFPage_InsertObject');
    return _FPDFPage_InsertObject(
      page,
      page_obj,
    );
  }

  _dart_FPDFPage_InsertObject _FPDFPage_InsertObject;

  int FPDFPage_RemoveObject(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<fpdf_pageobject_t__> page_obj,
  ) {
    _FPDFPage_RemoveObject ??= _dylib.lookupFunction<_c_FPDFPage_RemoveObject,
        _dart_FPDFPage_RemoveObject>('FPDFPage_RemoveObject');
    return _FPDFPage_RemoveObject(
      page,
      page_obj,
    );
  }

  _dart_FPDFPage_RemoveObject _FPDFPage_RemoveObject;

  int FPDFPage_CountObjects(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDFPage_CountObjects ??= _dylib.lookupFunction<_c_FPDFPage_CountObjects,
        _dart_FPDFPage_CountObjects>('FPDFPage_CountObjects');
    return _FPDFPage_CountObjects(
      page,
    );
  }

  _dart_FPDFPage_CountObjects _FPDFPage_CountObjects;

  ffi.Pointer<fpdf_pageobject_t__> FPDFPage_GetObject(
    ffi.Pointer<fpdf_page_t__> page,
    int index,
  ) {
    _FPDFPage_GetObject ??=
        _dylib.lookupFunction<_c_FPDFPage_GetObject, _dart_FPDFPage_GetObject>(
            'FPDFPage_GetObject');
    return _FPDFPage_GetObject(
      page,
      index,
    );
  }

  _dart_FPDFPage_GetObject _FPDFPage_GetObject;

  int FPDFPage_HasTransparency(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDFPage_HasTransparency ??= _dylib.lookupFunction<
        _c_FPDFPage_HasTransparency,
        _dart_FPDFPage_HasTransparency>('FPDFPage_HasTransparency');
    return _FPDFPage_HasTransparency(
      page,
    );
  }

  _dart_FPDFPage_HasTransparency _FPDFPage_HasTransparency;

  int FPDFPage_GenerateContent(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDFPage_GenerateContent ??= _dylib.lookupFunction<
        _c_FPDFPage_GenerateContent,
        _dart_FPDFPage_GenerateContent>('FPDFPage_GenerateContent');
    return _FPDFPage_GenerateContent(
      page,
    );
  }

  _dart_FPDFPage_GenerateContent _FPDFPage_GenerateContent;

  void FPDFPageObj_Destroy(
    ffi.Pointer<fpdf_pageobject_t__> page_obj,
  ) {
    _FPDFPageObj_Destroy ??= _dylib.lookupFunction<_c_FPDFPageObj_Destroy,
        _dart_FPDFPageObj_Destroy>('FPDFPageObj_Destroy');
    return _FPDFPageObj_Destroy(
      page_obj,
    );
  }

  _dart_FPDFPageObj_Destroy _FPDFPageObj_Destroy;

  int FPDFPageObj_HasTransparency(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
  ) {
    _FPDFPageObj_HasTransparency ??= _dylib.lookupFunction<
        _c_FPDFPageObj_HasTransparency,
        _dart_FPDFPageObj_HasTransparency>('FPDFPageObj_HasTransparency');
    return _FPDFPageObj_HasTransparency(
      page_object,
    );
  }

  _dart_FPDFPageObj_HasTransparency _FPDFPageObj_HasTransparency;

  int FPDFPageObj_GetType(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
  ) {
    _FPDFPageObj_GetType ??= _dylib.lookupFunction<_c_FPDFPageObj_GetType,
        _dart_FPDFPageObj_GetType>('FPDFPageObj_GetType');
    return _FPDFPageObj_GetType(
      page_object,
    );
  }

  _dart_FPDFPageObj_GetType _FPDFPageObj_GetType;

  void FPDFPageObj_Transform(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    double a,
    double b,
    double c,
    double d,
    double e,
    double f,
  ) {
    _FPDFPageObj_Transform ??= _dylib.lookupFunction<_c_FPDFPageObj_Transform,
        _dart_FPDFPageObj_Transform>('FPDFPageObj_Transform');
    return _FPDFPageObj_Transform(
      page_object,
      a,
      b,
      c,
      d,
      e,
      f,
    );
  }

  _dart_FPDFPageObj_Transform _FPDFPageObj_Transform;

  void FPDFPage_TransformAnnots(
    ffi.Pointer<fpdf_page_t__> page,
    double a,
    double b,
    double c,
    double d,
    double e,
    double f,
  ) {
    _FPDFPage_TransformAnnots ??= _dylib.lookupFunction<
        _c_FPDFPage_TransformAnnots,
        _dart_FPDFPage_TransformAnnots>('FPDFPage_TransformAnnots');
    return _FPDFPage_TransformAnnots(
      page,
      a,
      b,
      c,
      d,
      e,
      f,
    );
  }

  _dart_FPDFPage_TransformAnnots _FPDFPage_TransformAnnots;

  ffi.Pointer<fpdf_pageobject_t__> FPDFPageObj_NewImageObj(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDFPageObj_NewImageObj ??= _dylib.lookupFunction<
        _c_FPDFPageObj_NewImageObj,
        _dart_FPDFPageObj_NewImageObj>('FPDFPageObj_NewImageObj');
    return _FPDFPageObj_NewImageObj(
      document,
    );
  }

  _dart_FPDFPageObj_NewImageObj _FPDFPageObj_NewImageObj;

  int FPDFPageObj_CountMarks(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
  ) {
    _FPDFPageObj_CountMarks ??= _dylib.lookupFunction<_c_FPDFPageObj_CountMarks,
        _dart_FPDFPageObj_CountMarks>('FPDFPageObj_CountMarks');
    return _FPDFPageObj_CountMarks(
      page_object,
    );
  }

  _dart_FPDFPageObj_CountMarks _FPDFPageObj_CountMarks;

  ffi.Pointer<fpdf_pageobjectmark_t__> FPDFPageObj_GetMark(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    int index,
  ) {
    _FPDFPageObj_GetMark ??= _dylib.lookupFunction<_c_FPDFPageObj_GetMark,
        _dart_FPDFPageObj_GetMark>('FPDFPageObj_GetMark');
    return _FPDFPageObj_GetMark(
      page_object,
      index,
    );
  }

  _dart_FPDFPageObj_GetMark _FPDFPageObj_GetMark;

  ffi.Pointer<fpdf_pageobjectmark_t__> FPDFPageObj_AddMark(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _FPDFPageObj_AddMark ??= _dylib.lookupFunction<_c_FPDFPageObj_AddMark,
        _dart_FPDFPageObj_AddMark>('FPDFPageObj_AddMark');
    return _FPDFPageObj_AddMark(
      page_object,
      name,
    );
  }

  _dart_FPDFPageObj_AddMark _FPDFPageObj_AddMark;

  int FPDFPageObj_RemoveMark(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ) {
    _FPDFPageObj_RemoveMark ??= _dylib.lookupFunction<_c_FPDFPageObj_RemoveMark,
        _dart_FPDFPageObj_RemoveMark>('FPDFPageObj_RemoveMark');
    return _FPDFPageObj_RemoveMark(
      page_object,
      mark,
    );
  }

  _dart_FPDFPageObj_RemoveMark _FPDFPageObj_RemoveMark;

  int FPDFPageObjMark_GetName(
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Uint64> out_buflen,
  ) {
    _FPDFPageObjMark_GetName ??= _dylib.lookupFunction<
        _c_FPDFPageObjMark_GetName,
        _dart_FPDFPageObjMark_GetName>('FPDFPageObjMark_GetName');
    return _FPDFPageObjMark_GetName(
      mark,
      buffer,
      buflen,
      out_buflen,
    );
  }

  _dart_FPDFPageObjMark_GetName _FPDFPageObjMark_GetName;

  int FPDFPageObjMark_CountParams(
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ) {
    _FPDFPageObjMark_CountParams ??= _dylib.lookupFunction<
        _c_FPDFPageObjMark_CountParams,
        _dart_FPDFPageObjMark_CountParams>('FPDFPageObjMark_CountParams');
    return _FPDFPageObjMark_CountParams(
      mark,
    );
  }

  _dart_FPDFPageObjMark_CountParams _FPDFPageObjMark_CountParams;

  int FPDFPageObjMark_GetParamKey(
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Uint64> out_buflen,
  ) {
    _FPDFPageObjMark_GetParamKey ??= _dylib.lookupFunction<
        _c_FPDFPageObjMark_GetParamKey,
        _dart_FPDFPageObjMark_GetParamKey>('FPDFPageObjMark_GetParamKey');
    return _FPDFPageObjMark_GetParamKey(
      mark,
      index,
      buffer,
      buflen,
      out_buflen,
    );
  }

  _dart_FPDFPageObjMark_GetParamKey _FPDFPageObjMark_GetParamKey;

  int FPDFPageObjMark_GetParamValueType(
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    ffi.Pointer<ffi.Int8> key,
  ) {
    _FPDFPageObjMark_GetParamValueType ??= _dylib.lookupFunction<
            _c_FPDFPageObjMark_GetParamValueType,
            _dart_FPDFPageObjMark_GetParamValueType>(
        'FPDFPageObjMark_GetParamValueType');
    return _FPDFPageObjMark_GetParamValueType(
      mark,
      key,
    );
  }

  _dart_FPDFPageObjMark_GetParamValueType _FPDFPageObjMark_GetParamValueType;

  int FPDFPageObjMark_GetParamIntValue(
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int32> out_value,
  ) {
    _FPDFPageObjMark_GetParamIntValue ??= _dylib.lookupFunction<
            _c_FPDFPageObjMark_GetParamIntValue,
            _dart_FPDFPageObjMark_GetParamIntValue>(
        'FPDFPageObjMark_GetParamIntValue');
    return _FPDFPageObjMark_GetParamIntValue(
      mark,
      key,
      out_value,
    );
  }

  _dart_FPDFPageObjMark_GetParamIntValue _FPDFPageObjMark_GetParamIntValue;

  int FPDFPageObjMark_GetParamStringValue(
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Uint64> out_buflen,
  ) {
    _FPDFPageObjMark_GetParamStringValue ??= _dylib.lookupFunction<
            _c_FPDFPageObjMark_GetParamStringValue,
            _dart_FPDFPageObjMark_GetParamStringValue>(
        'FPDFPageObjMark_GetParamStringValue');
    return _FPDFPageObjMark_GetParamStringValue(
      mark,
      key,
      buffer,
      buflen,
      out_buflen,
    );
  }

  _dart_FPDFPageObjMark_GetParamStringValue
      _FPDFPageObjMark_GetParamStringValue;

  int FPDFPageObjMark_GetParamBlobValue(
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Uint64> out_buflen,
  ) {
    _FPDFPageObjMark_GetParamBlobValue ??= _dylib.lookupFunction<
            _c_FPDFPageObjMark_GetParamBlobValue,
            _dart_FPDFPageObjMark_GetParamBlobValue>(
        'FPDFPageObjMark_GetParamBlobValue');
    return _FPDFPageObjMark_GetParamBlobValue(
      mark,
      key,
      buffer,
      buflen,
      out_buflen,
    );
  }

  _dart_FPDFPageObjMark_GetParamBlobValue _FPDFPageObjMark_GetParamBlobValue;

  int FPDFPageObjMark_SetIntParam(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    ffi.Pointer<ffi.Int8> key,
    int value,
  ) {
    _FPDFPageObjMark_SetIntParam ??= _dylib.lookupFunction<
        _c_FPDFPageObjMark_SetIntParam,
        _dart_FPDFPageObjMark_SetIntParam>('FPDFPageObjMark_SetIntParam');
    return _FPDFPageObjMark_SetIntParam(
      document,
      page_object,
      mark,
      key,
      value,
    );
  }

  _dart_FPDFPageObjMark_SetIntParam _FPDFPageObjMark_SetIntParam;

  int FPDFPageObjMark_SetStringParam(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> value,
  ) {
    _FPDFPageObjMark_SetStringParam ??= _dylib.lookupFunction<
        _c_FPDFPageObjMark_SetStringParam,
        _dart_FPDFPageObjMark_SetStringParam>('FPDFPageObjMark_SetStringParam');
    return _FPDFPageObjMark_SetStringParam(
      document,
      page_object,
      mark,
      key,
      value,
    );
  }

  _dart_FPDFPageObjMark_SetStringParam _FPDFPageObjMark_SetStringParam;

  int FPDFPageObjMark_SetBlobParam(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Void> value,
    int value_len,
  ) {
    _FPDFPageObjMark_SetBlobParam ??= _dylib.lookupFunction<
        _c_FPDFPageObjMark_SetBlobParam,
        _dart_FPDFPageObjMark_SetBlobParam>('FPDFPageObjMark_SetBlobParam');
    return _FPDFPageObjMark_SetBlobParam(
      document,
      page_object,
      mark,
      key,
      value,
      value_len,
    );
  }

  _dart_FPDFPageObjMark_SetBlobParam _FPDFPageObjMark_SetBlobParam;

  int FPDFPageObjMark_RemoveParam(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<fpdf_pageobjectmark_t__> mark,
    ffi.Pointer<ffi.Int8> key,
  ) {
    _FPDFPageObjMark_RemoveParam ??= _dylib.lookupFunction<
        _c_FPDFPageObjMark_RemoveParam,
        _dart_FPDFPageObjMark_RemoveParam>('FPDFPageObjMark_RemoveParam');
    return _FPDFPageObjMark_RemoveParam(
      page_object,
      mark,
      key,
    );
  }

  _dart_FPDFPageObjMark_RemoveParam _FPDFPageObjMark_RemoveParam;

  int FPDFImageObj_LoadJpegFile(
    ffi.Pointer<ffi.Pointer<fpdf_page_t__>> pages,
    int count,
    ffi.Pointer<fpdf_pageobject_t__> image_object,
    ffi.Pointer<FPDF_FILEACCESS> file_access,
  ) {
    _FPDFImageObj_LoadJpegFile ??= _dylib.lookupFunction<
        _c_FPDFImageObj_LoadJpegFile,
        _dart_FPDFImageObj_LoadJpegFile>('FPDFImageObj_LoadJpegFile');
    return _FPDFImageObj_LoadJpegFile(
      pages,
      count,
      image_object,
      file_access,
    );
  }

  _dart_FPDFImageObj_LoadJpegFile _FPDFImageObj_LoadJpegFile;

  int FPDFImageObj_LoadJpegFileInline(
    ffi.Pointer<ffi.Pointer<fpdf_page_t__>> pages,
    int count,
    ffi.Pointer<fpdf_pageobject_t__> image_object,
    ffi.Pointer<FPDF_FILEACCESS> file_access,
  ) {
    _FPDFImageObj_LoadJpegFileInline ??= _dylib.lookupFunction<
            _c_FPDFImageObj_LoadJpegFileInline,
            _dart_FPDFImageObj_LoadJpegFileInline>(
        'FPDFImageObj_LoadJpegFileInline');
    return _FPDFImageObj_LoadJpegFileInline(
      pages,
      count,
      image_object,
      file_access,
    );
  }

  _dart_FPDFImageObj_LoadJpegFileInline _FPDFImageObj_LoadJpegFileInline;

  int FPDFImageObj_GetMatrix(
    ffi.Pointer<fpdf_pageobject_t__> image_object,
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> b,
    ffi.Pointer<ffi.Double> c,
    ffi.Pointer<ffi.Double> d,
    ffi.Pointer<ffi.Double> e,
    ffi.Pointer<ffi.Double> f,
  ) {
    _FPDFImageObj_GetMatrix ??= _dylib.lookupFunction<_c_FPDFImageObj_GetMatrix,
        _dart_FPDFImageObj_GetMatrix>('FPDFImageObj_GetMatrix');
    return _FPDFImageObj_GetMatrix(
      image_object,
      a,
      b,
      c,
      d,
      e,
      f,
    );
  }

  _dart_FPDFImageObj_GetMatrix _FPDFImageObj_GetMatrix;

  int FPDFImageObj_SetMatrix(
    ffi.Pointer<fpdf_pageobject_t__> image_object,
    double a,
    double b,
    double c,
    double d,
    double e,
    double f,
  ) {
    _FPDFImageObj_SetMatrix ??= _dylib.lookupFunction<_c_FPDFImageObj_SetMatrix,
        _dart_FPDFImageObj_SetMatrix>('FPDFImageObj_SetMatrix');
    return _FPDFImageObj_SetMatrix(
      image_object,
      a,
      b,
      c,
      d,
      e,
      f,
    );
  }

  _dart_FPDFImageObj_SetMatrix _FPDFImageObj_SetMatrix;

  int FPDFImageObj_SetBitmap(
    ffi.Pointer<ffi.Pointer<fpdf_page_t__>> pages,
    int count,
    ffi.Pointer<fpdf_pageobject_t__> image_object,
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ) {
    _FPDFImageObj_SetBitmap ??= _dylib.lookupFunction<_c_FPDFImageObj_SetBitmap,
        _dart_FPDFImageObj_SetBitmap>('FPDFImageObj_SetBitmap');
    return _FPDFImageObj_SetBitmap(
      pages,
      count,
      image_object,
      bitmap,
    );
  }

  _dart_FPDFImageObj_SetBitmap _FPDFImageObj_SetBitmap;

  ffi.Pointer<fpdf_bitmap_t__> FPDFImageObj_GetBitmap(
    ffi.Pointer<fpdf_pageobject_t__> image_object,
  ) {
    _FPDFImageObj_GetBitmap ??= _dylib.lookupFunction<_c_FPDFImageObj_GetBitmap,
        _dart_FPDFImageObj_GetBitmap>('FPDFImageObj_GetBitmap');
    return _FPDFImageObj_GetBitmap(
      image_object,
    );
  }

  _dart_FPDFImageObj_GetBitmap _FPDFImageObj_GetBitmap;

  int FPDFImageObj_GetImageDataDecoded(
    ffi.Pointer<fpdf_pageobject_t__> image_object,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDFImageObj_GetImageDataDecoded ??= _dylib.lookupFunction<
            _c_FPDFImageObj_GetImageDataDecoded,
            _dart_FPDFImageObj_GetImageDataDecoded>(
        'FPDFImageObj_GetImageDataDecoded');
    return _FPDFImageObj_GetImageDataDecoded(
      image_object,
      buffer,
      buflen,
    );
  }

  _dart_FPDFImageObj_GetImageDataDecoded _FPDFImageObj_GetImageDataDecoded;

  int FPDFImageObj_GetImageDataRaw(
    ffi.Pointer<fpdf_pageobject_t__> image_object,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDFImageObj_GetImageDataRaw ??= _dylib.lookupFunction<
        _c_FPDFImageObj_GetImageDataRaw,
        _dart_FPDFImageObj_GetImageDataRaw>('FPDFImageObj_GetImageDataRaw');
    return _FPDFImageObj_GetImageDataRaw(
      image_object,
      buffer,
      buflen,
    );
  }

  _dart_FPDFImageObj_GetImageDataRaw _FPDFImageObj_GetImageDataRaw;

  int FPDFImageObj_GetImageFilterCount(
    ffi.Pointer<fpdf_pageobject_t__> image_object,
  ) {
    _FPDFImageObj_GetImageFilterCount ??= _dylib.lookupFunction<
            _c_FPDFImageObj_GetImageFilterCount,
            _dart_FPDFImageObj_GetImageFilterCount>(
        'FPDFImageObj_GetImageFilterCount');
    return _FPDFImageObj_GetImageFilterCount(
      image_object,
    );
  }

  _dart_FPDFImageObj_GetImageFilterCount _FPDFImageObj_GetImageFilterCount;

  int FPDFImageObj_GetImageFilter(
    ffi.Pointer<fpdf_pageobject_t__> image_object,
    int index,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDFImageObj_GetImageFilter ??= _dylib.lookupFunction<
        _c_FPDFImageObj_GetImageFilter,
        _dart_FPDFImageObj_GetImageFilter>('FPDFImageObj_GetImageFilter');
    return _FPDFImageObj_GetImageFilter(
      image_object,
      index,
      buffer,
      buflen,
    );
  }

  _dart_FPDFImageObj_GetImageFilter _FPDFImageObj_GetImageFilter;

  int FPDFImageObj_GetImageMetadata(
    ffi.Pointer<fpdf_pageobject_t__> image_object,
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<FPDF_IMAGEOBJ_METADATA> metadata,
  ) {
    _FPDFImageObj_GetImageMetadata ??= _dylib.lookupFunction<
        _c_FPDFImageObj_GetImageMetadata,
        _dart_FPDFImageObj_GetImageMetadata>('FPDFImageObj_GetImageMetadata');
    return _FPDFImageObj_GetImageMetadata(
      image_object,
      page,
      metadata,
    );
  }

  _dart_FPDFImageObj_GetImageMetadata _FPDFImageObj_GetImageMetadata;

  ffi.Pointer<fpdf_pageobject_t__> FPDFPageObj_CreateNewPath(
    double x,
    double y,
  ) {
    _FPDFPageObj_CreateNewPath ??= _dylib.lookupFunction<
        _c_FPDFPageObj_CreateNewPath,
        _dart_FPDFPageObj_CreateNewPath>('FPDFPageObj_CreateNewPath');
    return _FPDFPageObj_CreateNewPath(
      x,
      y,
    );
  }

  _dart_FPDFPageObj_CreateNewPath _FPDFPageObj_CreateNewPath;

  ffi.Pointer<fpdf_pageobject_t__> FPDFPageObj_CreateNewRect(
    double x,
    double y,
    double w,
    double h,
  ) {
    _FPDFPageObj_CreateNewRect ??= _dylib.lookupFunction<
        _c_FPDFPageObj_CreateNewRect,
        _dart_FPDFPageObj_CreateNewRect>('FPDFPageObj_CreateNewRect');
    return _FPDFPageObj_CreateNewRect(
      x,
      y,
      w,
      h,
    );
  }

  _dart_FPDFPageObj_CreateNewRect _FPDFPageObj_CreateNewRect;

  int FPDFPageObj_GetBounds(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<ffi.Float> left,
    ffi.Pointer<ffi.Float> bottom,
    ffi.Pointer<ffi.Float> right,
    ffi.Pointer<ffi.Float> top,
  ) {
    _FPDFPageObj_GetBounds ??= _dylib.lookupFunction<_c_FPDFPageObj_GetBounds,
        _dart_FPDFPageObj_GetBounds>('FPDFPageObj_GetBounds');
    return _FPDFPageObj_GetBounds(
      page_object,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPageObj_GetBounds _FPDFPageObj_GetBounds;

  void FPDFPageObj_SetBlendMode(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<ffi.Int8> blend_mode,
  ) {
    _FPDFPageObj_SetBlendMode ??= _dylib.lookupFunction<
        _c_FPDFPageObj_SetBlendMode,
        _dart_FPDFPageObj_SetBlendMode>('FPDFPageObj_SetBlendMode');
    return _FPDFPageObj_SetBlendMode(
      page_object,
      blend_mode,
    );
  }

  _dart_FPDFPageObj_SetBlendMode _FPDFPageObj_SetBlendMode;

  int FPDFPageObj_SetStrokeColor(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    int R,
    int G,
    int B,
    int A,
  ) {
    _FPDFPageObj_SetStrokeColor ??= _dylib.lookupFunction<
        _c_FPDFPageObj_SetStrokeColor,
        _dart_FPDFPageObj_SetStrokeColor>('FPDFPageObj_SetStrokeColor');
    return _FPDFPageObj_SetStrokeColor(
      page_object,
      R,
      G,
      B,
      A,
    );
  }

  _dart_FPDFPageObj_SetStrokeColor _FPDFPageObj_SetStrokeColor;

  int FPDFPageObj_GetStrokeColor(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<ffi.Uint32> R,
    ffi.Pointer<ffi.Uint32> G,
    ffi.Pointer<ffi.Uint32> B,
    ffi.Pointer<ffi.Uint32> A,
  ) {
    _FPDFPageObj_GetStrokeColor ??= _dylib.lookupFunction<
        _c_FPDFPageObj_GetStrokeColor,
        _dart_FPDFPageObj_GetStrokeColor>('FPDFPageObj_GetStrokeColor');
    return _FPDFPageObj_GetStrokeColor(
      page_object,
      R,
      G,
      B,
      A,
    );
  }

  _dart_FPDFPageObj_GetStrokeColor _FPDFPageObj_GetStrokeColor;

  int FPDFPageObj_SetStrokeWidth(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    double width,
  ) {
    _FPDFPageObj_SetStrokeWidth ??= _dylib.lookupFunction<
        _c_FPDFPageObj_SetStrokeWidth,
        _dart_FPDFPageObj_SetStrokeWidth>('FPDFPageObj_SetStrokeWidth');
    return _FPDFPageObj_SetStrokeWidth(
      page_object,
      width,
    );
  }

  _dart_FPDFPageObj_SetStrokeWidth _FPDFPageObj_SetStrokeWidth;

  int FPDFPageObj_GetStrokeWidth(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<ffi.Float> width,
  ) {
    _FPDFPageObj_GetStrokeWidth ??= _dylib.lookupFunction<
        _c_FPDFPageObj_GetStrokeWidth,
        _dart_FPDFPageObj_GetStrokeWidth>('FPDFPageObj_GetStrokeWidth');
    return _FPDFPageObj_GetStrokeWidth(
      page_object,
      width,
    );
  }

  _dart_FPDFPageObj_GetStrokeWidth _FPDFPageObj_GetStrokeWidth;

  int FPDFPageObj_GetLineJoin(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
  ) {
    _FPDFPageObj_GetLineJoin ??= _dylib.lookupFunction<
        _c_FPDFPageObj_GetLineJoin,
        _dart_FPDFPageObj_GetLineJoin>('FPDFPageObj_GetLineJoin');
    return _FPDFPageObj_GetLineJoin(
      page_object,
    );
  }

  _dart_FPDFPageObj_GetLineJoin _FPDFPageObj_GetLineJoin;

  int FPDFPageObj_SetLineJoin(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    int line_join,
  ) {
    _FPDFPageObj_SetLineJoin ??= _dylib.lookupFunction<
        _c_FPDFPageObj_SetLineJoin,
        _dart_FPDFPageObj_SetLineJoin>('FPDFPageObj_SetLineJoin');
    return _FPDFPageObj_SetLineJoin(
      page_object,
      line_join,
    );
  }

  _dart_FPDFPageObj_SetLineJoin _FPDFPageObj_SetLineJoin;

  int FPDFPageObj_GetLineCap(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
  ) {
    _FPDFPageObj_GetLineCap ??= _dylib.lookupFunction<_c_FPDFPageObj_GetLineCap,
        _dart_FPDFPageObj_GetLineCap>('FPDFPageObj_GetLineCap');
    return _FPDFPageObj_GetLineCap(
      page_object,
    );
  }

  _dart_FPDFPageObj_GetLineCap _FPDFPageObj_GetLineCap;

  int FPDFPageObj_SetLineCap(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    int line_cap,
  ) {
    _FPDFPageObj_SetLineCap ??= _dylib.lookupFunction<_c_FPDFPageObj_SetLineCap,
        _dart_FPDFPageObj_SetLineCap>('FPDFPageObj_SetLineCap');
    return _FPDFPageObj_SetLineCap(
      page_object,
      line_cap,
    );
  }

  _dart_FPDFPageObj_SetLineCap _FPDFPageObj_SetLineCap;

  int FPDFPageObj_SetFillColor(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    int R,
    int G,
    int B,
    int A,
  ) {
    _FPDFPageObj_SetFillColor ??= _dylib.lookupFunction<
        _c_FPDFPageObj_SetFillColor,
        _dart_FPDFPageObj_SetFillColor>('FPDFPageObj_SetFillColor');
    return _FPDFPageObj_SetFillColor(
      page_object,
      R,
      G,
      B,
      A,
    );
  }

  _dart_FPDFPageObj_SetFillColor _FPDFPageObj_SetFillColor;

  int FPDFPageObj_GetFillColor(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    ffi.Pointer<ffi.Uint32> R,
    ffi.Pointer<ffi.Uint32> G,
    ffi.Pointer<ffi.Uint32> B,
    ffi.Pointer<ffi.Uint32> A,
  ) {
    _FPDFPageObj_GetFillColor ??= _dylib.lookupFunction<
        _c_FPDFPageObj_GetFillColor,
        _dart_FPDFPageObj_GetFillColor>('FPDFPageObj_GetFillColor');
    return _FPDFPageObj_GetFillColor(
      page_object,
      R,
      G,
      B,
      A,
    );
  }

  _dart_FPDFPageObj_GetFillColor _FPDFPageObj_GetFillColor;

  int FPDFPath_CountSegments(
    ffi.Pointer<fpdf_pageobject_t__> path,
  ) {
    _FPDFPath_CountSegments ??= _dylib.lookupFunction<_c_FPDFPath_CountSegments,
        _dart_FPDFPath_CountSegments>('FPDFPath_CountSegments');
    return _FPDFPath_CountSegments(
      path,
    );
  }

  _dart_FPDFPath_CountSegments _FPDFPath_CountSegments;

  ffi.Pointer<fpdf_pathsegment_t> FPDFPath_GetPathSegment(
    ffi.Pointer<fpdf_pageobject_t__> path,
    int index,
  ) {
    _FPDFPath_GetPathSegment ??= _dylib.lookupFunction<
        _c_FPDFPath_GetPathSegment,
        _dart_FPDFPath_GetPathSegment>('FPDFPath_GetPathSegment');
    return _FPDFPath_GetPathSegment(
      path,
      index,
    );
  }

  _dart_FPDFPath_GetPathSegment _FPDFPath_GetPathSegment;

  int FPDFPathSegment_GetPoint(
    ffi.Pointer<fpdf_pathsegment_t> segment,
    ffi.Pointer<ffi.Float> x,
    ffi.Pointer<ffi.Float> y,
  ) {
    _FPDFPathSegment_GetPoint ??= _dylib.lookupFunction<
        _c_FPDFPathSegment_GetPoint,
        _dart_FPDFPathSegment_GetPoint>('FPDFPathSegment_GetPoint');
    return _FPDFPathSegment_GetPoint(
      segment,
      x,
      y,
    );
  }

  _dart_FPDFPathSegment_GetPoint _FPDFPathSegment_GetPoint;

  int FPDFPathSegment_GetType(
    ffi.Pointer<fpdf_pathsegment_t> segment,
  ) {
    _FPDFPathSegment_GetType ??= _dylib.lookupFunction<
        _c_FPDFPathSegment_GetType,
        _dart_FPDFPathSegment_GetType>('FPDFPathSegment_GetType');
    return _FPDFPathSegment_GetType(
      segment,
    );
  }

  _dart_FPDFPathSegment_GetType _FPDFPathSegment_GetType;

  int FPDFPathSegment_GetClose(
    ffi.Pointer<fpdf_pathsegment_t> segment,
  ) {
    _FPDFPathSegment_GetClose ??= _dylib.lookupFunction<
        _c_FPDFPathSegment_GetClose,
        _dart_FPDFPathSegment_GetClose>('FPDFPathSegment_GetClose');
    return _FPDFPathSegment_GetClose(
      segment,
    );
  }

  _dart_FPDFPathSegment_GetClose _FPDFPathSegment_GetClose;

  int FPDFPath_MoveTo(
    ffi.Pointer<fpdf_pageobject_t__> path,
    double x,
    double y,
  ) {
    _FPDFPath_MoveTo ??=
        _dylib.lookupFunction<_c_FPDFPath_MoveTo, _dart_FPDFPath_MoveTo>(
            'FPDFPath_MoveTo');
    return _FPDFPath_MoveTo(
      path,
      x,
      y,
    );
  }

  _dart_FPDFPath_MoveTo _FPDFPath_MoveTo;

  int FPDFPath_LineTo(
    ffi.Pointer<fpdf_pageobject_t__> path,
    double x,
    double y,
  ) {
    _FPDFPath_LineTo ??=
        _dylib.lookupFunction<_c_FPDFPath_LineTo, _dart_FPDFPath_LineTo>(
            'FPDFPath_LineTo');
    return _FPDFPath_LineTo(
      path,
      x,
      y,
    );
  }

  _dart_FPDFPath_LineTo _FPDFPath_LineTo;

  int FPDFPath_BezierTo(
    ffi.Pointer<fpdf_pageobject_t__> path,
    double x1,
    double y1,
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    _FPDFPath_BezierTo ??=
        _dylib.lookupFunction<_c_FPDFPath_BezierTo, _dart_FPDFPath_BezierTo>(
            'FPDFPath_BezierTo');
    return _FPDFPath_BezierTo(
      path,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
    );
  }

  _dart_FPDFPath_BezierTo _FPDFPath_BezierTo;

  int FPDFPath_Close(
    ffi.Pointer<fpdf_pageobject_t__> path,
  ) {
    _FPDFPath_Close ??=
        _dylib.lookupFunction<_c_FPDFPath_Close, _dart_FPDFPath_Close>(
            'FPDFPath_Close');
    return _FPDFPath_Close(
      path,
    );
  }

  _dart_FPDFPath_Close _FPDFPath_Close;

  int FPDFPath_SetDrawMode(
    ffi.Pointer<fpdf_pageobject_t__> path,
    int fillmode,
    int stroke,
  ) {
    _FPDFPath_SetDrawMode ??= _dylib.lookupFunction<_c_FPDFPath_SetDrawMode,
        _dart_FPDFPath_SetDrawMode>('FPDFPath_SetDrawMode');
    return _FPDFPath_SetDrawMode(
      path,
      fillmode,
      stroke,
    );
  }

  _dart_FPDFPath_SetDrawMode _FPDFPath_SetDrawMode;

  int FPDFPath_GetDrawMode(
    ffi.Pointer<fpdf_pageobject_t__> path,
    ffi.Pointer<ffi.Int32> fillmode,
    ffi.Pointer<ffi.Int32> stroke,
  ) {
    _FPDFPath_GetDrawMode ??= _dylib.lookupFunction<_c_FPDFPath_GetDrawMode,
        _dart_FPDFPath_GetDrawMode>('FPDFPath_GetDrawMode');
    return _FPDFPath_GetDrawMode(
      path,
      fillmode,
      stroke,
    );
  }

  _dart_FPDFPath_GetDrawMode _FPDFPath_GetDrawMode;

  int FPDFPath_GetMatrix(
    ffi.Pointer<fpdf_pageobject_t__> path,
    ffi.Pointer<FS_MATRIX> matrix,
  ) {
    _FPDFPath_GetMatrix ??=
        _dylib.lookupFunction<_c_FPDFPath_GetMatrix, _dart_FPDFPath_GetMatrix>(
            'FPDFPath_GetMatrix');
    return _FPDFPath_GetMatrix(
      path,
      matrix,
    );
  }

  _dart_FPDFPath_GetMatrix _FPDFPath_GetMatrix;

  int FPDFPath_SetMatrix(
    ffi.Pointer<fpdf_pageobject_t__> path,
    ffi.Pointer<FS_MATRIX> matrix,
  ) {
    _FPDFPath_SetMatrix ??=
        _dylib.lookupFunction<_c_FPDFPath_SetMatrix, _dart_FPDFPath_SetMatrix>(
            'FPDFPath_SetMatrix');
    return _FPDFPath_SetMatrix(
      path,
      matrix,
    );
  }

  _dart_FPDFPath_SetMatrix _FPDFPath_SetMatrix;

  ffi.Pointer<fpdf_pageobject_t__> FPDFPageObj_NewTextObj(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Int8> font,
    double font_size,
  ) {
    _FPDFPageObj_NewTextObj ??= _dylib.lookupFunction<_c_FPDFPageObj_NewTextObj,
        _dart_FPDFPageObj_NewTextObj>('FPDFPageObj_NewTextObj');
    return _FPDFPageObj_NewTextObj(
      document,
      font,
      font_size,
    );
  }

  _dart_FPDFPageObj_NewTextObj _FPDFPageObj_NewTextObj;

  int FPDFText_SetText(
    ffi.Pointer<fpdf_pageobject_t__> text_object,
    ffi.Pointer<ffi.Uint16> text,
  ) {
    _FPDFText_SetText ??=
        _dylib.lookupFunction<_c_FPDFText_SetText, _dart_FPDFText_SetText>(
            'FPDFText_SetText');
    return _FPDFText_SetText(
      text_object,
      text,
    );
  }

  _dart_FPDFText_SetText _FPDFText_SetText;

  ffi.Pointer<fpdf_font_t__> FPDFText_LoadFont(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Uint8> data,
    int size,
    int font_type,
    int cid,
  ) {
    _FPDFText_LoadFont ??=
        _dylib.lookupFunction<_c_FPDFText_LoadFont, _dart_FPDFText_LoadFont>(
            'FPDFText_LoadFont');
    return _FPDFText_LoadFont(
      document,
      data,
      size,
      font_type,
      cid,
    );
  }

  _dart_FPDFText_LoadFont _FPDFText_LoadFont;

  ffi.Pointer<fpdf_font_t__> FPDFText_LoadStandardFont(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Int8> font,
  ) {
    _FPDFText_LoadStandardFont ??= _dylib.lookupFunction<
        _c_FPDFText_LoadStandardFont,
        _dart_FPDFText_LoadStandardFont>('FPDFText_LoadStandardFont');
    return _FPDFText_LoadStandardFont(
      document,
      font,
    );
  }

  _dart_FPDFText_LoadStandardFont _FPDFText_LoadStandardFont;

  int FPDFTextObj_GetMatrix(
    ffi.Pointer<fpdf_pageobject_t__> text,
    ffi.Pointer<FS_MATRIX> matrix,
  ) {
    _FPDFTextObj_GetMatrix ??= _dylib.lookupFunction<_c_FPDFTextObj_GetMatrix,
        _dart_FPDFTextObj_GetMatrix>('FPDFTextObj_GetMatrix');
    return _FPDFTextObj_GetMatrix(
      text,
      matrix,
    );
  }

  _dart_FPDFTextObj_GetMatrix _FPDFTextObj_GetMatrix;

  double FPDFTextObj_GetFontSize(
    ffi.Pointer<fpdf_pageobject_t__> text,
  ) {
    _FPDFTextObj_GetFontSize ??= _dylib.lookupFunction<
        _c_FPDFTextObj_GetFontSize,
        _dart_FPDFTextObj_GetFontSize>('FPDFTextObj_GetFontSize');
    return _FPDFTextObj_GetFontSize(
      text,
    );
  }

  _dart_FPDFTextObj_GetFontSize _FPDFTextObj_GetFontSize;

  void FPDFFont_Close(
    ffi.Pointer<fpdf_font_t__> font,
  ) {
    _FPDFFont_Close ??=
        _dylib.lookupFunction<_c_FPDFFont_Close, _dart_FPDFFont_Close>(
            'FPDFFont_Close');
    return _FPDFFont_Close(
      font,
    );
  }

  _dart_FPDFFont_Close _FPDFFont_Close;

  ffi.Pointer<fpdf_pageobject_t__> FPDFPageObj_CreateTextObj(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<fpdf_font_t__> font,
    double font_size,
  ) {
    _FPDFPageObj_CreateTextObj ??= _dylib.lookupFunction<
        _c_FPDFPageObj_CreateTextObj,
        _dart_FPDFPageObj_CreateTextObj>('FPDFPageObj_CreateTextObj');
    return _FPDFPageObj_CreateTextObj(
      document,
      font,
      font_size,
    );
  }

  _dart_FPDFPageObj_CreateTextObj _FPDFPageObj_CreateTextObj;

  int FPDFTextObj_GetTextRenderMode(
    ffi.Pointer<fpdf_pageobject_t__> text,
  ) {
    _FPDFTextObj_GetTextRenderMode ??= _dylib.lookupFunction<
        _c_FPDFTextObj_GetTextRenderMode,
        _dart_FPDFTextObj_GetTextRenderMode>('FPDFTextObj_GetTextRenderMode');
    return _FPDFTextObj_GetTextRenderMode(
      text,
    );
  }

  _dart_FPDFTextObj_GetTextRenderMode _FPDFTextObj_GetTextRenderMode;

  int FPDFTextObj_SetTextRenderMode(
    ffi.Pointer<fpdf_pageobject_t__> text,
    int render_mode,
  ) {
    _FPDFTextObj_SetTextRenderMode ??= _dylib.lookupFunction<
        _c_FPDFTextObj_SetTextRenderMode,
        _dart_FPDFTextObj_SetTextRenderMode>('FPDFTextObj_SetTextRenderMode');
    return _FPDFTextObj_SetTextRenderMode(
      text,
      render_mode,
    );
  }

  _dart_FPDFTextObj_SetTextRenderMode _FPDFTextObj_SetTextRenderMode;

  int FPDFTextObj_GetFontName(
    ffi.Pointer<fpdf_pageobject_t__> text,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    _FPDFTextObj_GetFontName ??= _dylib.lookupFunction<
        _c_FPDFTextObj_GetFontName,
        _dart_FPDFTextObj_GetFontName>('FPDFTextObj_GetFontName');
    return _FPDFTextObj_GetFontName(
      text,
      buffer,
      length,
    );
  }

  _dart_FPDFTextObj_GetFontName _FPDFTextObj_GetFontName;

  int FPDFTextObj_GetText(
    ffi.Pointer<fpdf_pageobject_t__> text_object,
    ffi.Pointer<fpdf_textpage_t__> text_page,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    _FPDFTextObj_GetText ??= _dylib.lookupFunction<_c_FPDFTextObj_GetText,
        _dart_FPDFTextObj_GetText>('FPDFTextObj_GetText');
    return _FPDFTextObj_GetText(
      text_object,
      text_page,
      buffer,
      length,
    );
  }

  _dart_FPDFTextObj_GetText _FPDFTextObj_GetText;

  int FPDFFormObj_CountObjects(
    ffi.Pointer<fpdf_pageobject_t__> form_object,
  ) {
    _FPDFFormObj_CountObjects ??= _dylib.lookupFunction<
        _c_FPDFFormObj_CountObjects,
        _dart_FPDFFormObj_CountObjects>('FPDFFormObj_CountObjects');
    return _FPDFFormObj_CountObjects(
      form_object,
    );
  }

  _dart_FPDFFormObj_CountObjects _FPDFFormObj_CountObjects;

  ffi.Pointer<fpdf_pageobject_t__> FPDFFormObj_GetObject(
    ffi.Pointer<fpdf_pageobject_t__> form_object,
    int index,
  ) {
    _FPDFFormObj_GetObject ??= _dylib.lookupFunction<_c_FPDFFormObj_GetObject,
        _dart_FPDFFormObj_GetObject>('FPDFFormObj_GetObject');
    return _FPDFFormObj_GetObject(
      form_object,
      index,
    );
  }

  _dart_FPDFFormObj_GetObject _FPDFFormObj_GetObject;

  int FPDFFormObj_GetMatrix(
    ffi.Pointer<fpdf_pageobject_t__> form_object,
    ffi.Pointer<FS_MATRIX> matrix,
  ) {
    _FPDFFormObj_GetMatrix ??= _dylib.lookupFunction<_c_FPDFFormObj_GetMatrix,
        _dart_FPDFFormObj_GetMatrix>('FPDFFormObj_GetMatrix');
    return _FPDFFormObj_GetMatrix(
      form_object,
      matrix,
    );
  }

  _dart_FPDFFormObj_GetMatrix _FPDFFormObj_GetMatrix;

  /// Set "MediaBox" entry to the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - The left of the rectangle.
  /// bottom - The bottom of the rectangle.
  /// right  - The right of the rectangle.
  /// top    - The top of the rectangle.
  void FPDFPage_SetMediaBox(
    ffi.Pointer<fpdf_page_t__> page,
    double left,
    double bottom,
    double right,
    double top,
  ) {
    _FPDFPage_SetMediaBox ??= _dylib.lookupFunction<_c_FPDFPage_SetMediaBox,
        _dart_FPDFPage_SetMediaBox>('FPDFPage_SetMediaBox');
    return _FPDFPage_SetMediaBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_SetMediaBox _FPDFPage_SetMediaBox;

  /// Set "CropBox" entry to the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - The left of the rectangle.
  /// bottom - The bottom of the rectangle.
  /// right  - The right of the rectangle.
  /// top    - The top of the rectangle.
  void FPDFPage_SetCropBox(
    ffi.Pointer<fpdf_page_t__> page,
    double left,
    double bottom,
    double right,
    double top,
  ) {
    _FPDFPage_SetCropBox ??= _dylib.lookupFunction<_c_FPDFPage_SetCropBox,
        _dart_FPDFPage_SetCropBox>('FPDFPage_SetCropBox');
    return _FPDFPage_SetCropBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_SetCropBox _FPDFPage_SetCropBox;

  /// Set "BleedBox" entry to the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - The left of the rectangle.
  /// bottom - The bottom of the rectangle.
  /// right  - The right of the rectangle.
  /// top    - The top of the rectangle.
  void FPDFPage_SetBleedBox(
    ffi.Pointer<fpdf_page_t__> page,
    double left,
    double bottom,
    double right,
    double top,
  ) {
    _FPDFPage_SetBleedBox ??= _dylib.lookupFunction<_c_FPDFPage_SetBleedBox,
        _dart_FPDFPage_SetBleedBox>('FPDFPage_SetBleedBox');
    return _FPDFPage_SetBleedBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_SetBleedBox _FPDFPage_SetBleedBox;

  /// Set "TrimBox" entry to the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - The left of the rectangle.
  /// bottom - The bottom of the rectangle.
  /// right  - The right of the rectangle.
  /// top    - The top of the rectangle.
  void FPDFPage_SetTrimBox(
    ffi.Pointer<fpdf_page_t__> page,
    double left,
    double bottom,
    double right,
    double top,
  ) {
    _FPDFPage_SetTrimBox ??= _dylib.lookupFunction<_c_FPDFPage_SetTrimBox,
        _dart_FPDFPage_SetTrimBox>('FPDFPage_SetTrimBox');
    return _FPDFPage_SetTrimBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_SetTrimBox _FPDFPage_SetTrimBox;

  /// Set "ArtBox" entry to the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - The left of the rectangle.
  /// bottom - The bottom of the rectangle.
  /// right  - The right of the rectangle.
  /// top    - The top of the rectangle.
  void FPDFPage_SetArtBox(
    ffi.Pointer<fpdf_page_t__> page,
    double left,
    double bottom,
    double right,
    double top,
  ) {
    _FPDFPage_SetArtBox ??=
        _dylib.lookupFunction<_c_FPDFPage_SetArtBox, _dart_FPDFPage_SetArtBox>(
            'FPDFPage_SetArtBox');
    return _FPDFPage_SetArtBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_SetArtBox _FPDFPage_SetArtBox;

  /// Get "MediaBox" entry from the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - Pointer to a float value receiving the left of the rectangle.
  /// bottom - Pointer to a float value receiving the bottom of the rectangle.
  /// right  - Pointer to a float value receiving the right of the rectangle.
  /// top    - Pointer to a float value receiving the top of the rectangle.
  ///
  /// On success, return true and write to the out parameters. Otherwise return
  /// false and leave the out parameters unmodified.
  int FPDFPage_GetMediaBox(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Float> left,
    ffi.Pointer<ffi.Float> bottom,
    ffi.Pointer<ffi.Float> right,
    ffi.Pointer<ffi.Float> top,
  ) {
    _FPDFPage_GetMediaBox ??= _dylib.lookupFunction<_c_FPDFPage_GetMediaBox,
        _dart_FPDFPage_GetMediaBox>('FPDFPage_GetMediaBox');
    return _FPDFPage_GetMediaBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_GetMediaBox _FPDFPage_GetMediaBox;

  /// Get "CropBox" entry from the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - Pointer to a float value receiving the left of the rectangle.
  /// bottom - Pointer to a float value receiving the bottom of the rectangle.
  /// right  - Pointer to a float value receiving the right of the rectangle.
  /// top    - Pointer to a float value receiving the top of the rectangle.
  ///
  /// On success, return true and write to the out parameters. Otherwise return
  /// false and leave the out parameters unmodified.
  int FPDFPage_GetCropBox(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Float> left,
    ffi.Pointer<ffi.Float> bottom,
    ffi.Pointer<ffi.Float> right,
    ffi.Pointer<ffi.Float> top,
  ) {
    _FPDFPage_GetCropBox ??= _dylib.lookupFunction<_c_FPDFPage_GetCropBox,
        _dart_FPDFPage_GetCropBox>('FPDFPage_GetCropBox');
    return _FPDFPage_GetCropBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_GetCropBox _FPDFPage_GetCropBox;

  /// Get "BleedBox" entry from the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - Pointer to a float value receiving the left of the rectangle.
  /// bottom - Pointer to a float value receiving the bottom of the rectangle.
  /// right  - Pointer to a float value receiving the right of the rectangle.
  /// top    - Pointer to a float value receiving the top of the rectangle.
  ///
  /// On success, return true and write to the out parameters. Otherwise return
  /// false and leave the out parameters unmodified.
  int FPDFPage_GetBleedBox(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Float> left,
    ffi.Pointer<ffi.Float> bottom,
    ffi.Pointer<ffi.Float> right,
    ffi.Pointer<ffi.Float> top,
  ) {
    _FPDFPage_GetBleedBox ??= _dylib.lookupFunction<_c_FPDFPage_GetBleedBox,
        _dart_FPDFPage_GetBleedBox>('FPDFPage_GetBleedBox');
    return _FPDFPage_GetBleedBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_GetBleedBox _FPDFPage_GetBleedBox;

  /// Get "TrimBox" entry from the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - Pointer to a float value receiving the left of the rectangle.
  /// bottom - Pointer to a float value receiving the bottom of the rectangle.
  /// right  - Pointer to a float value receiving the right of the rectangle.
  /// top    - Pointer to a float value receiving the top of the rectangle.
  ///
  /// On success, return true and write to the out parameters. Otherwise return
  /// false and leave the out parameters unmodified.
  int FPDFPage_GetTrimBox(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Float> left,
    ffi.Pointer<ffi.Float> bottom,
    ffi.Pointer<ffi.Float> right,
    ffi.Pointer<ffi.Float> top,
  ) {
    _FPDFPage_GetTrimBox ??= _dylib.lookupFunction<_c_FPDFPage_GetTrimBox,
        _dart_FPDFPage_GetTrimBox>('FPDFPage_GetTrimBox');
    return _FPDFPage_GetTrimBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_GetTrimBox _FPDFPage_GetTrimBox;

  /// Get "ArtBox" entry from the page dictionary.
  ///
  /// page   - Handle to a page.
  /// left   - Pointer to a float value receiving the left of the rectangle.
  /// bottom - Pointer to a float value receiving the bottom of the rectangle.
  /// right  - Pointer to a float value receiving the right of the rectangle.
  /// top    - Pointer to a float value receiving the top of the rectangle.
  ///
  /// On success, return true and write to the out parameters. Otherwise return
  /// false and leave the out parameters unmodified.
  int FPDFPage_GetArtBox(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Float> left,
    ffi.Pointer<ffi.Float> bottom,
    ffi.Pointer<ffi.Float> right,
    ffi.Pointer<ffi.Float> top,
  ) {
    _FPDFPage_GetArtBox ??=
        _dylib.lookupFunction<_c_FPDFPage_GetArtBox, _dart_FPDFPage_GetArtBox>(
            'FPDFPage_GetArtBox');
    return _FPDFPage_GetArtBox(
      page,
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDFPage_GetArtBox _FPDFPage_GetArtBox;

  /// Apply transforms to |page|.
  ///
  /// If |matrix| is provided it will be applied to transform the page.
  /// If |clipRect| is provided it will be used to clip the resulting page.
  /// If neither |matrix| or |clipRect| are provided this method returns |false|.
  /// Returns |true| if transforms are applied.
  ///
  /// This function will transform the whole page, and would take effect to all the
  /// objects in the page.
  ///
  /// page        - Page handle.
  /// matrix      - Transform matrix.
  /// clipRect    - Clipping rectangle.
  int FPDFPage_TransFormWithClip(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<FS_MATRIX> matrix,
    ffi.Pointer<FS_RECTF> clipRect,
  ) {
    _FPDFPage_TransFormWithClip ??= _dylib.lookupFunction<
        _c_FPDFPage_TransFormWithClip,
        _dart_FPDFPage_TransFormWithClip>('FPDFPage_TransFormWithClip');
    return _FPDFPage_TransFormWithClip(
      page,
      matrix,
      clipRect,
    );
  }

  _dart_FPDFPage_TransFormWithClip _FPDFPage_TransFormWithClip;

  /// Transform (scale, rotate, shear, move) the clip path of page object.
  /// page_object - Handle to a page object. Returned by
  /// FPDFPageObj_NewImageObj().
  ///
  /// a  - The coefficient "a" of the matrix.
  /// b  - The coefficient "b" of the matrix.
  /// c  - The coefficient "c" of the matrix.
  /// d  - The coefficient "d" of the matrix.
  /// e  - The coefficient "e" of the matrix.
  /// f  - The coefficient "f" of the matrix.
  void FPDFPageObj_TransformClipPath(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
    double a,
    double b,
    double c,
    double d,
    double e,
    double f,
  ) {
    _FPDFPageObj_TransformClipPath ??= _dylib.lookupFunction<
        _c_FPDFPageObj_TransformClipPath,
        _dart_FPDFPageObj_TransformClipPath>('FPDFPageObj_TransformClipPath');
    return _FPDFPageObj_TransformClipPath(
      page_object,
      a,
      b,
      c,
      d,
      e,
      f,
    );
  }

  _dart_FPDFPageObj_TransformClipPath _FPDFPageObj_TransformClipPath;

  ffi.Pointer<fpdf_clippath_t__> FPDFPageObj_GetClipPath(
    ffi.Pointer<fpdf_pageobject_t__> page_object,
  ) {
    _FPDFPageObj_GetClipPath ??= _dylib.lookupFunction<
        _c_FPDFPageObj_GetClipPath,
        _dart_FPDFPageObj_GetClipPath>('FPDFPageObj_GetClipPath');
    return _FPDFPageObj_GetClipPath(
      page_object,
    );
  }

  _dart_FPDFPageObj_GetClipPath _FPDFPageObj_GetClipPath;

  int FPDFClipPath_CountPaths(
    ffi.Pointer<fpdf_clippath_t__> clip_path,
  ) {
    _FPDFClipPath_CountPaths ??= _dylib.lookupFunction<
        _c_FPDFClipPath_CountPaths,
        _dart_FPDFClipPath_CountPaths>('FPDFClipPath_CountPaths');
    return _FPDFClipPath_CountPaths(
      clip_path,
    );
  }

  _dart_FPDFClipPath_CountPaths _FPDFClipPath_CountPaths;

  int FPDFClipPath_CountPathSegments(
    ffi.Pointer<fpdf_clippath_t__> clip_path,
    int path_index,
  ) {
    _FPDFClipPath_CountPathSegments ??= _dylib.lookupFunction<
        _c_FPDFClipPath_CountPathSegments,
        _dart_FPDFClipPath_CountPathSegments>('FPDFClipPath_CountPathSegments');
    return _FPDFClipPath_CountPathSegments(
      clip_path,
      path_index,
    );
  }

  _dart_FPDFClipPath_CountPathSegments _FPDFClipPath_CountPathSegments;

  ffi.Pointer<fpdf_pathsegment_t> FPDFClipPath_GetPathSegment(
    ffi.Pointer<fpdf_clippath_t__> clip_path,
    int path_index,
    int segment_index,
  ) {
    _FPDFClipPath_GetPathSegment ??= _dylib.lookupFunction<
        _c_FPDFClipPath_GetPathSegment,
        _dart_FPDFClipPath_GetPathSegment>('FPDFClipPath_GetPathSegment');
    return _FPDFClipPath_GetPathSegment(
      clip_path,
      path_index,
      segment_index,
    );
  }

  _dart_FPDFClipPath_GetPathSegment _FPDFClipPath_GetPathSegment;

  /// Create a new clip path, with a rectangle inserted.
  ///
  /// Caller takes ownership of the returned FPDF_CLIPPATH. It should be freed with
  /// FPDF_DestroyClipPath().
  ///
  /// left   - The left of the clip box.
  /// bottom - The bottom of the clip box.
  /// right  - The right of the clip box.
  /// top    - The top of the clip box.
  ffi.Pointer<fpdf_clippath_t__> FPDF_CreateClipPath(
    double left,
    double bottom,
    double right,
    double top,
  ) {
    _FPDF_CreateClipPath ??= _dylib.lookupFunction<_c_FPDF_CreateClipPath,
        _dart_FPDF_CreateClipPath>('FPDF_CreateClipPath');
    return _FPDF_CreateClipPath(
      left,
      bottom,
      right,
      top,
    );
  }

  _dart_FPDF_CreateClipPath _FPDF_CreateClipPath;

  /// Destroy the clip path.
  ///
  /// clipPath - A handle to the clip path. It will be invalid after this call.
  void FPDF_DestroyClipPath(
    ffi.Pointer<fpdf_clippath_t__> clipPath,
  ) {
    _FPDF_DestroyClipPath ??= _dylib.lookupFunction<_c_FPDF_DestroyClipPath,
        _dart_FPDF_DestroyClipPath>('FPDF_DestroyClipPath');
    return _FPDF_DestroyClipPath(
      clipPath,
    );
  }

  _dart_FPDF_DestroyClipPath _FPDF_DestroyClipPath;

  /// Clip the page content, the page content that outside the clipping region
  /// become invisible.
  ///
  /// A clip path will be inserted before the page content stream or content array.
  /// In this way, the page content will be clipped by this clip path.
  ///
  /// page        - A page handle.
  /// clipPath    - A handle to the clip path. (Does not take ownership.)
  void FPDFPage_InsertClipPath(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<fpdf_clippath_t__> clipPath,
  ) {
    _FPDFPage_InsertClipPath ??= _dylib.lookupFunction<
        _c_FPDFPage_InsertClipPath,
        _dart_FPDFPage_InsertClipPath>('FPDFPage_InsertClipPath');
    return _FPDFPage_InsertClipPath(
      page,
      clipPath,
    );
  }

  _dart_FPDFPage_InsertClipPath _FPDFPage_InsertClipPath;

  ffi.Pointer<fpdf_form_handle_t__> FPDFDOC_InitFormFillEnvironment(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<FPDF_FORMFILLINFO> formInfo,
  ) {
    _FPDFDOC_InitFormFillEnvironment ??= _dylib.lookupFunction<
            _c_FPDFDOC_InitFormFillEnvironment,
            _dart_FPDFDOC_InitFormFillEnvironment>(
        'FPDFDOC_InitFormFillEnvironment');
    return _FPDFDOC_InitFormFillEnvironment(
      document,
      formInfo,
    );
  }

  _dart_FPDFDOC_InitFormFillEnvironment _FPDFDOC_InitFormFillEnvironment;

  void FPDFDOC_ExitFormFillEnvironment(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ) {
    _FPDFDOC_ExitFormFillEnvironment ??= _dylib.lookupFunction<
            _c_FPDFDOC_ExitFormFillEnvironment,
            _dart_FPDFDOC_ExitFormFillEnvironment>(
        'FPDFDOC_ExitFormFillEnvironment');
    return _FPDFDOC_ExitFormFillEnvironment(
      hHandle,
    );
  }

  _dart_FPDFDOC_ExitFormFillEnvironment _FPDFDOC_ExitFormFillEnvironment;

  void FORM_OnAfterLoadPage(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ) {
    _FORM_OnAfterLoadPage ??= _dylib.lookupFunction<_c_FORM_OnAfterLoadPage,
        _dart_FORM_OnAfterLoadPage>('FORM_OnAfterLoadPage');
    return _FORM_OnAfterLoadPage(
      page,
      hHandle,
    );
  }

  _dart_FORM_OnAfterLoadPage _FORM_OnAfterLoadPage;

  void FORM_OnBeforeClosePage(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ) {
    _FORM_OnBeforeClosePage ??= _dylib.lookupFunction<_c_FORM_OnBeforeClosePage,
        _dart_FORM_OnBeforeClosePage>('FORM_OnBeforeClosePage');
    return _FORM_OnBeforeClosePage(
      page,
      hHandle,
    );
  }

  _dart_FORM_OnBeforeClosePage _FORM_OnBeforeClosePage;

  void FORM_DoDocumentJSAction(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ) {
    _FORM_DoDocumentJSAction ??= _dylib.lookupFunction<
        _c_FORM_DoDocumentJSAction,
        _dart_FORM_DoDocumentJSAction>('FORM_DoDocumentJSAction');
    return _FORM_DoDocumentJSAction(
      hHandle,
    );
  }

  _dart_FORM_DoDocumentJSAction _FORM_DoDocumentJSAction;

  void FORM_DoDocumentOpenAction(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ) {
    _FORM_DoDocumentOpenAction ??= _dylib.lookupFunction<
        _c_FORM_DoDocumentOpenAction,
        _dart_FORM_DoDocumentOpenAction>('FORM_DoDocumentOpenAction');
    return _FORM_DoDocumentOpenAction(
      hHandle,
    );
  }

  _dart_FORM_DoDocumentOpenAction _FORM_DoDocumentOpenAction;

  void FORM_DoDocumentAAction(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    int aaType,
  ) {
    _FORM_DoDocumentAAction ??= _dylib.lookupFunction<_c_FORM_DoDocumentAAction,
        _dart_FORM_DoDocumentAAction>('FORM_DoDocumentAAction');
    return _FORM_DoDocumentAAction(
      hHandle,
      aaType,
    );
  }

  _dart_FORM_DoDocumentAAction _FORM_DoDocumentAAction;

  void FORM_DoPageAAction(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    int aaType,
  ) {
    _FORM_DoPageAAction ??=
        _dylib.lookupFunction<_c_FORM_DoPageAAction, _dart_FORM_DoPageAAction>(
            'FORM_DoPageAAction');
    return _FORM_DoPageAAction(
      page,
      hHandle,
      aaType,
    );
  }

  _dart_FORM_DoPageAAction _FORM_DoPageAAction;

  int FORM_OnMouseMove(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int modifier,
    double page_x,
    double page_y,
  ) {
    _FORM_OnMouseMove ??=
        _dylib.lookupFunction<_c_FORM_OnMouseMove, _dart_FORM_OnMouseMove>(
            'FORM_OnMouseMove');
    return _FORM_OnMouseMove(
      hHandle,
      page,
      modifier,
      page_x,
      page_y,
    );
  }

  _dart_FORM_OnMouseMove _FORM_OnMouseMove;

  int FORM_OnMouseWheel(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int modifier,
    ffi.Pointer<FS_POINTF> page_coord,
    int delta_x,
    int delta_y,
  ) {
    _FORM_OnMouseWheel ??=
        _dylib.lookupFunction<_c_FORM_OnMouseWheel, _dart_FORM_OnMouseWheel>(
            'FORM_OnMouseWheel');
    return _FORM_OnMouseWheel(
      hHandle,
      page,
      modifier,
      page_coord,
      delta_x,
      delta_y,
    );
  }

  _dart_FORM_OnMouseWheel _FORM_OnMouseWheel;

  int FORM_OnFocus(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int modifier,
    double page_x,
    double page_y,
  ) {
    _FORM_OnFocus ??= _dylib
        .lookupFunction<_c_FORM_OnFocus, _dart_FORM_OnFocus>('FORM_OnFocus');
    return _FORM_OnFocus(
      hHandle,
      page,
      modifier,
      page_x,
      page_y,
    );
  }

  _dart_FORM_OnFocus _FORM_OnFocus;

  int FORM_OnLButtonDown(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int modifier,
    double page_x,
    double page_y,
  ) {
    _FORM_OnLButtonDown ??=
        _dylib.lookupFunction<_c_FORM_OnLButtonDown, _dart_FORM_OnLButtonDown>(
            'FORM_OnLButtonDown');
    return _FORM_OnLButtonDown(
      hHandle,
      page,
      modifier,
      page_x,
      page_y,
    );
  }

  _dart_FORM_OnLButtonDown _FORM_OnLButtonDown;

  int FORM_OnRButtonDown(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int modifier,
    double page_x,
    double page_y,
  ) {
    _FORM_OnRButtonDown ??=
        _dylib.lookupFunction<_c_FORM_OnRButtonDown, _dart_FORM_OnRButtonDown>(
            'FORM_OnRButtonDown');
    return _FORM_OnRButtonDown(
      hHandle,
      page,
      modifier,
      page_x,
      page_y,
    );
  }

  _dart_FORM_OnRButtonDown _FORM_OnRButtonDown;

  int FORM_OnLButtonUp(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int modifier,
    double page_x,
    double page_y,
  ) {
    _FORM_OnLButtonUp ??=
        _dylib.lookupFunction<_c_FORM_OnLButtonUp, _dart_FORM_OnLButtonUp>(
            'FORM_OnLButtonUp');
    return _FORM_OnLButtonUp(
      hHandle,
      page,
      modifier,
      page_x,
      page_y,
    );
  }

  _dart_FORM_OnLButtonUp _FORM_OnLButtonUp;

  int FORM_OnRButtonUp(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int modifier,
    double page_x,
    double page_y,
  ) {
    _FORM_OnRButtonUp ??=
        _dylib.lookupFunction<_c_FORM_OnRButtonUp, _dart_FORM_OnRButtonUp>(
            'FORM_OnRButtonUp');
    return _FORM_OnRButtonUp(
      hHandle,
      page,
      modifier,
      page_x,
      page_y,
    );
  }

  _dart_FORM_OnRButtonUp _FORM_OnRButtonUp;

  int FORM_OnLButtonDoubleClick(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int modifier,
    double page_x,
    double page_y,
  ) {
    _FORM_OnLButtonDoubleClick ??= _dylib.lookupFunction<
        _c_FORM_OnLButtonDoubleClick,
        _dart_FORM_OnLButtonDoubleClick>('FORM_OnLButtonDoubleClick');
    return _FORM_OnLButtonDoubleClick(
      hHandle,
      page,
      modifier,
      page_x,
      page_y,
    );
  }

  _dart_FORM_OnLButtonDoubleClick _FORM_OnLButtonDoubleClick;

  int FORM_OnKeyDown(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int nKeyCode,
    int modifier,
  ) {
    _FORM_OnKeyDown ??=
        _dylib.lookupFunction<_c_FORM_OnKeyDown, _dart_FORM_OnKeyDown>(
            'FORM_OnKeyDown');
    return _FORM_OnKeyDown(
      hHandle,
      page,
      nKeyCode,
      modifier,
    );
  }

  _dart_FORM_OnKeyDown _FORM_OnKeyDown;

  int FORM_OnKeyUp(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int nKeyCode,
    int modifier,
  ) {
    _FORM_OnKeyUp ??= _dylib
        .lookupFunction<_c_FORM_OnKeyUp, _dart_FORM_OnKeyUp>('FORM_OnKeyUp');
    return _FORM_OnKeyUp(
      hHandle,
      page,
      nKeyCode,
      modifier,
    );
  }

  _dart_FORM_OnKeyUp _FORM_OnKeyUp;

  int FORM_OnChar(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int nChar,
    int modifier,
  ) {
    _FORM_OnChar ??=
        _dylib.lookupFunction<_c_FORM_OnChar, _dart_FORM_OnChar>('FORM_OnChar');
    return _FORM_OnChar(
      hHandle,
      page,
      nChar,
      modifier,
    );
  }

  _dart_FORM_OnChar _FORM_OnChar;

  int FORM_GetFocusedText(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FORM_GetFocusedText ??= _dylib.lookupFunction<_c_FORM_GetFocusedText,
        _dart_FORM_GetFocusedText>('FORM_GetFocusedText');
    return _FORM_GetFocusedText(
      hHandle,
      page,
      buffer,
      buflen,
    );
  }

  _dart_FORM_GetFocusedText _FORM_GetFocusedText;

  int FORM_GetSelectedText(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FORM_GetSelectedText ??= _dylib.lookupFunction<_c_FORM_GetSelectedText,
        _dart_FORM_GetSelectedText>('FORM_GetSelectedText');
    return _FORM_GetSelectedText(
      hHandle,
      page,
      buffer,
      buflen,
    );
  }

  _dart_FORM_GetSelectedText _FORM_GetSelectedText;

  void FORM_ReplaceSelection(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Uint16> wsText,
  ) {
    _FORM_ReplaceSelection ??= _dylib.lookupFunction<_c_FORM_ReplaceSelection,
        _dart_FORM_ReplaceSelection>('FORM_ReplaceSelection');
    return _FORM_ReplaceSelection(
      hHandle,
      page,
      wsText,
    );
  }

  _dart_FORM_ReplaceSelection _FORM_ReplaceSelection;

  int FORM_CanUndo(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FORM_CanUndo ??= _dylib
        .lookupFunction<_c_FORM_CanUndo, _dart_FORM_CanUndo>('FORM_CanUndo');
    return _FORM_CanUndo(
      hHandle,
      page,
    );
  }

  _dart_FORM_CanUndo _FORM_CanUndo;

  int FORM_CanRedo(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FORM_CanRedo ??= _dylib
        .lookupFunction<_c_FORM_CanRedo, _dart_FORM_CanRedo>('FORM_CanRedo');
    return _FORM_CanRedo(
      hHandle,
      page,
    );
  }

  _dart_FORM_CanRedo _FORM_CanRedo;

  int FORM_Undo(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FORM_Undo ??=
        _dylib.lookupFunction<_c_FORM_Undo, _dart_FORM_Undo>('FORM_Undo');
    return _FORM_Undo(
      hHandle,
      page,
    );
  }

  _dart_FORM_Undo _FORM_Undo;

  int FORM_Redo(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FORM_Redo ??=
        _dylib.lookupFunction<_c_FORM_Redo, _dart_FORM_Redo>('FORM_Redo');
    return _FORM_Redo(
      hHandle,
      page,
    );
  }

  _dart_FORM_Redo _FORM_Redo;

  int FORM_ForceToKillFocus(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ) {
    _FORM_ForceToKillFocus ??= _dylib.lookupFunction<_c_FORM_ForceToKillFocus,
        _dart_FORM_ForceToKillFocus>('FORM_ForceToKillFocus');
    return _FORM_ForceToKillFocus(
      hHandle,
    );
  }

  _dart_FORM_ForceToKillFocus _FORM_ForceToKillFocus;

  int FORM_GetFocusedAnnot(
    ffi.Pointer<fpdf_form_handle_t__> handle,
    ffi.Pointer<ffi.Int32> page_index,
    ffi.Pointer<ffi.Pointer<fpdf_annotation_t__>> annot,
  ) {
    _FORM_GetFocusedAnnot ??= _dylib.lookupFunction<_c_FORM_GetFocusedAnnot,
        _dart_FORM_GetFocusedAnnot>('FORM_GetFocusedAnnot');
    return _FORM_GetFocusedAnnot(
      handle,
      page_index,
      annot,
    );
  }

  _dart_FORM_GetFocusedAnnot _FORM_GetFocusedAnnot;

  int FORM_SetFocusedAnnot(
    ffi.Pointer<fpdf_form_handle_t__> handle,
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FORM_SetFocusedAnnot ??= _dylib.lookupFunction<_c_FORM_SetFocusedAnnot,
        _dart_FORM_SetFocusedAnnot>('FORM_SetFocusedAnnot');
    return _FORM_SetFocusedAnnot(
      handle,
      annot,
    );
  }

  _dart_FORM_SetFocusedAnnot _FORM_SetFocusedAnnot;

  int FPDFPage_HasFormFieldAtPoint(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    double page_x,
    double page_y,
  ) {
    _FPDFPage_HasFormFieldAtPoint ??= _dylib.lookupFunction<
        _c_FPDFPage_HasFormFieldAtPoint,
        _dart_FPDFPage_HasFormFieldAtPoint>('FPDFPage_HasFormFieldAtPoint');
    return _FPDFPage_HasFormFieldAtPoint(
      hHandle,
      page,
      page_x,
      page_y,
    );
  }

  _dart_FPDFPage_HasFormFieldAtPoint _FPDFPage_HasFormFieldAtPoint;

  int FPDFPage_FormFieldZOrderAtPoint(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    double page_x,
    double page_y,
  ) {
    _FPDFPage_FormFieldZOrderAtPoint ??= _dylib.lookupFunction<
            _c_FPDFPage_FormFieldZOrderAtPoint,
            _dart_FPDFPage_FormFieldZOrderAtPoint>(
        'FPDFPage_FormFieldZOrderAtPoint');
    return _FPDFPage_FormFieldZOrderAtPoint(
      hHandle,
      page,
      page_x,
      page_y,
    );
  }

  _dart_FPDFPage_FormFieldZOrderAtPoint _FPDFPage_FormFieldZOrderAtPoint;

  void FPDF_SetFormFieldHighlightColor(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    int fieldType,
    int color,
  ) {
    _FPDF_SetFormFieldHighlightColor ??= _dylib.lookupFunction<
            _c_FPDF_SetFormFieldHighlightColor,
            _dart_FPDF_SetFormFieldHighlightColor>(
        'FPDF_SetFormFieldHighlightColor');
    return _FPDF_SetFormFieldHighlightColor(
      hHandle,
      fieldType,
      color,
    );
  }

  _dart_FPDF_SetFormFieldHighlightColor _FPDF_SetFormFieldHighlightColor;

  void FPDF_SetFormFieldHighlightAlpha(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    int alpha,
  ) {
    _FPDF_SetFormFieldHighlightAlpha ??= _dylib.lookupFunction<
            _c_FPDF_SetFormFieldHighlightAlpha,
            _dart_FPDF_SetFormFieldHighlightAlpha>(
        'FPDF_SetFormFieldHighlightAlpha');
    return _FPDF_SetFormFieldHighlightAlpha(
      hHandle,
      alpha,
    );
  }

  _dart_FPDF_SetFormFieldHighlightAlpha _FPDF_SetFormFieldHighlightAlpha;

  void FPDF_RemoveFormFieldHighlight(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ) {
    _FPDF_RemoveFormFieldHighlight ??= _dylib.lookupFunction<
        _c_FPDF_RemoveFormFieldHighlight,
        _dart_FPDF_RemoveFormFieldHighlight>('FPDF_RemoveFormFieldHighlight');
    return _FPDF_RemoveFormFieldHighlight(
      hHandle,
    );
  }

  _dart_FPDF_RemoveFormFieldHighlight _FPDF_RemoveFormFieldHighlight;

  void FPDF_FFLDraw(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int flags,
  ) {
    _FPDF_FFLDraw ??= _dylib
        .lookupFunction<_c_FPDF_FFLDraw, _dart_FPDF_FFLDraw>('FPDF_FFLDraw');
    return _FPDF_FFLDraw(
      hHandle,
      bitmap,
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      flags,
    );
  }

  _dart_FPDF_FFLDraw _FPDF_FFLDraw;

  int FPDF_GetFormType(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_GetFormType ??=
        _dylib.lookupFunction<_c_FPDF_GetFormType, _dart_FPDF_GetFormType>(
            'FPDF_GetFormType');
    return _FPDF_GetFormType(
      document,
    );
  }

  _dart_FPDF_GetFormType _FPDF_GetFormType;

  int FORM_SetIndexSelected(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int index,
    int selected,
  ) {
    _FORM_SetIndexSelected ??= _dylib.lookupFunction<_c_FORM_SetIndexSelected,
        _dart_FORM_SetIndexSelected>('FORM_SetIndexSelected');
    return _FORM_SetIndexSelected(
      hHandle,
      page,
      index,
      selected,
    );
  }

  _dart_FORM_SetIndexSelected _FORM_SetIndexSelected;

  int FORM_IsIndexSelected(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    int index,
  ) {
    _FORM_IsIndexSelected ??= _dylib.lookupFunction<_c_FORM_IsIndexSelected,
        _dart_FORM_IsIndexSelected>('FORM_IsIndexSelected');
    return _FORM_IsIndexSelected(
      hHandle,
      page,
      index,
    );
  }

  _dart_FORM_IsIndexSelected _FORM_IsIndexSelected;

  int FPDF_LoadXFA(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDF_LoadXFA ??= _dylib
        .lookupFunction<_c_FPDF_LoadXFA, _dart_FPDF_LoadXFA>('FPDF_LoadXFA');
    return _FPDF_LoadXFA(
      document,
    );
  }

  _dart_FPDF_LoadXFA _FPDF_LoadXFA;

  int FPDFAnnot_IsSupportedSubtype(
    int subtype,
  ) {
    _FPDFAnnot_IsSupportedSubtype ??= _dylib.lookupFunction<
        _c_FPDFAnnot_IsSupportedSubtype,
        _dart_FPDFAnnot_IsSupportedSubtype>('FPDFAnnot_IsSupportedSubtype');
    return _FPDFAnnot_IsSupportedSubtype(
      subtype,
    );
  }

  _dart_FPDFAnnot_IsSupportedSubtype _FPDFAnnot_IsSupportedSubtype;

  ffi.Pointer<fpdf_annotation_t__> FPDFPage_CreateAnnot(
    ffi.Pointer<fpdf_page_t__> page,
    int subtype,
  ) {
    _FPDFPage_CreateAnnot ??= _dylib.lookupFunction<_c_FPDFPage_CreateAnnot,
        _dart_FPDFPage_CreateAnnot>('FPDFPage_CreateAnnot');
    return _FPDFPage_CreateAnnot(
      page,
      subtype,
    );
  }

  _dart_FPDFPage_CreateAnnot _FPDFPage_CreateAnnot;

  int FPDFPage_GetAnnotCount(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDFPage_GetAnnotCount ??= _dylib.lookupFunction<_c_FPDFPage_GetAnnotCount,
        _dart_FPDFPage_GetAnnotCount>('FPDFPage_GetAnnotCount');
    return _FPDFPage_GetAnnotCount(
      page,
    );
  }

  _dart_FPDFPage_GetAnnotCount _FPDFPage_GetAnnotCount;

  ffi.Pointer<fpdf_annotation_t__> FPDFPage_GetAnnot(
    ffi.Pointer<fpdf_page_t__> page,
    int index,
  ) {
    _FPDFPage_GetAnnot ??=
        _dylib.lookupFunction<_c_FPDFPage_GetAnnot, _dart_FPDFPage_GetAnnot>(
            'FPDFPage_GetAnnot');
    return _FPDFPage_GetAnnot(
      page,
      index,
    );
  }

  _dart_FPDFPage_GetAnnot _FPDFPage_GetAnnot;

  int FPDFPage_GetAnnotIndex(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFPage_GetAnnotIndex ??= _dylib.lookupFunction<_c_FPDFPage_GetAnnotIndex,
        _dart_FPDFPage_GetAnnotIndex>('FPDFPage_GetAnnotIndex');
    return _FPDFPage_GetAnnotIndex(
      page,
      annot,
    );
  }

  _dart_FPDFPage_GetAnnotIndex _FPDFPage_GetAnnotIndex;

  void FPDFPage_CloseAnnot(
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFPage_CloseAnnot ??= _dylib.lookupFunction<_c_FPDFPage_CloseAnnot,
        _dart_FPDFPage_CloseAnnot>('FPDFPage_CloseAnnot');
    return _FPDFPage_CloseAnnot(
      annot,
    );
  }

  _dart_FPDFPage_CloseAnnot _FPDFPage_CloseAnnot;

  int FPDFPage_RemoveAnnot(
    ffi.Pointer<fpdf_page_t__> page,
    int index,
  ) {
    _FPDFPage_RemoveAnnot ??= _dylib.lookupFunction<_c_FPDFPage_RemoveAnnot,
        _dart_FPDFPage_RemoveAnnot>('FPDFPage_RemoveAnnot');
    return _FPDFPage_RemoveAnnot(
      page,
      index,
    );
  }

  _dart_FPDFPage_RemoveAnnot _FPDFPage_RemoveAnnot;

  int FPDFAnnot_GetSubtype(
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_GetSubtype ??= _dylib.lookupFunction<_c_FPDFAnnot_GetSubtype,
        _dart_FPDFAnnot_GetSubtype>('FPDFAnnot_GetSubtype');
    return _FPDFAnnot_GetSubtype(
      annot,
    );
  }

  _dart_FPDFAnnot_GetSubtype _FPDFAnnot_GetSubtype;

  int FPDFAnnot_IsObjectSupportedSubtype(
    int subtype,
  ) {
    _FPDFAnnot_IsObjectSupportedSubtype ??= _dylib.lookupFunction<
            _c_FPDFAnnot_IsObjectSupportedSubtype,
            _dart_FPDFAnnot_IsObjectSupportedSubtype>(
        'FPDFAnnot_IsObjectSupportedSubtype');
    return _FPDFAnnot_IsObjectSupportedSubtype(
      subtype,
    );
  }

  _dart_FPDFAnnot_IsObjectSupportedSubtype _FPDFAnnot_IsObjectSupportedSubtype;

  int FPDFAnnot_UpdateObject(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<fpdf_pageobject_t__> obj,
  ) {
    _FPDFAnnot_UpdateObject ??= _dylib.lookupFunction<_c_FPDFAnnot_UpdateObject,
        _dart_FPDFAnnot_UpdateObject>('FPDFAnnot_UpdateObject');
    return _FPDFAnnot_UpdateObject(
      annot,
      obj,
    );
  }

  _dart_FPDFAnnot_UpdateObject _FPDFAnnot_UpdateObject;

  int FPDFAnnot_AddInkStroke(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<FS_POINTF> points,
    int point_count,
  ) {
    _FPDFAnnot_AddInkStroke ??= _dylib.lookupFunction<_c_FPDFAnnot_AddInkStroke,
        _dart_FPDFAnnot_AddInkStroke>('FPDFAnnot_AddInkStroke');
    return _FPDFAnnot_AddInkStroke(
      annot,
      points,
      point_count,
    );
  }

  _dart_FPDFAnnot_AddInkStroke _FPDFAnnot_AddInkStroke;

  int FPDFAnnot_RemoveInkList(
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_RemoveInkList ??= _dylib.lookupFunction<
        _c_FPDFAnnot_RemoveInkList,
        _dart_FPDFAnnot_RemoveInkList>('FPDFAnnot_RemoveInkList');
    return _FPDFAnnot_RemoveInkList(
      annot,
    );
  }

  _dart_FPDFAnnot_RemoveInkList _FPDFAnnot_RemoveInkList;

  int FPDFAnnot_AppendObject(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<fpdf_pageobject_t__> obj,
  ) {
    _FPDFAnnot_AppendObject ??= _dylib.lookupFunction<_c_FPDFAnnot_AppendObject,
        _dart_FPDFAnnot_AppendObject>('FPDFAnnot_AppendObject');
    return _FPDFAnnot_AppendObject(
      annot,
      obj,
    );
  }

  _dart_FPDFAnnot_AppendObject _FPDFAnnot_AppendObject;

  int FPDFAnnot_GetObjectCount(
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_GetObjectCount ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetObjectCount,
        _dart_FPDFAnnot_GetObjectCount>('FPDFAnnot_GetObjectCount');
    return _FPDFAnnot_GetObjectCount(
      annot,
    );
  }

  _dart_FPDFAnnot_GetObjectCount _FPDFAnnot_GetObjectCount;

  ffi.Pointer<fpdf_pageobject_t__> FPDFAnnot_GetObject(
    ffi.Pointer<fpdf_annotation_t__> annot,
    int index,
  ) {
    _FPDFAnnot_GetObject ??= _dylib.lookupFunction<_c_FPDFAnnot_GetObject,
        _dart_FPDFAnnot_GetObject>('FPDFAnnot_GetObject');
    return _FPDFAnnot_GetObject(
      annot,
      index,
    );
  }

  _dart_FPDFAnnot_GetObject _FPDFAnnot_GetObject;

  int FPDFAnnot_RemoveObject(
    ffi.Pointer<fpdf_annotation_t__> annot,
    int index,
  ) {
    _FPDFAnnot_RemoveObject ??= _dylib.lookupFunction<_c_FPDFAnnot_RemoveObject,
        _dart_FPDFAnnot_RemoveObject>('FPDFAnnot_RemoveObject');
    return _FPDFAnnot_RemoveObject(
      annot,
      index,
    );
  }

  _dart_FPDFAnnot_RemoveObject _FPDFAnnot_RemoveObject;

  int FPDFAnnot_SetColor(
    ffi.Pointer<fpdf_annotation_t__> annot,
    int type,
    int R,
    int G,
    int B,
    int A,
  ) {
    _FPDFAnnot_SetColor ??=
        _dylib.lookupFunction<_c_FPDFAnnot_SetColor, _dart_FPDFAnnot_SetColor>(
            'FPDFAnnot_SetColor');
    return _FPDFAnnot_SetColor(
      annot,
      type,
      R,
      G,
      B,
      A,
    );
  }

  _dart_FPDFAnnot_SetColor _FPDFAnnot_SetColor;

  int FPDFAnnot_GetColor(
    ffi.Pointer<fpdf_annotation_t__> annot,
    int type,
    ffi.Pointer<ffi.Uint32> R,
    ffi.Pointer<ffi.Uint32> G,
    ffi.Pointer<ffi.Uint32> B,
    ffi.Pointer<ffi.Uint32> A,
  ) {
    _FPDFAnnot_GetColor ??=
        _dylib.lookupFunction<_c_FPDFAnnot_GetColor, _dart_FPDFAnnot_GetColor>(
            'FPDFAnnot_GetColor');
    return _FPDFAnnot_GetColor(
      annot,
      type,
      R,
      G,
      B,
      A,
    );
  }

  _dart_FPDFAnnot_GetColor _FPDFAnnot_GetColor;

  int FPDFAnnot_HasAttachmentPoints(
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_HasAttachmentPoints ??= _dylib.lookupFunction<
        _c_FPDFAnnot_HasAttachmentPoints,
        _dart_FPDFAnnot_HasAttachmentPoints>('FPDFAnnot_HasAttachmentPoints');
    return _FPDFAnnot_HasAttachmentPoints(
      annot,
    );
  }

  _dart_FPDFAnnot_HasAttachmentPoints _FPDFAnnot_HasAttachmentPoints;

  int FPDFAnnot_SetAttachmentPoints(
    ffi.Pointer<fpdf_annotation_t__> annot,
    int quad_index,
    ffi.Pointer<FS_QUADPOINTSF> quad_points,
  ) {
    _FPDFAnnot_SetAttachmentPoints ??= _dylib.lookupFunction<
        _c_FPDFAnnot_SetAttachmentPoints,
        _dart_FPDFAnnot_SetAttachmentPoints>('FPDFAnnot_SetAttachmentPoints');
    return _FPDFAnnot_SetAttachmentPoints(
      annot,
      quad_index,
      quad_points,
    );
  }

  _dart_FPDFAnnot_SetAttachmentPoints _FPDFAnnot_SetAttachmentPoints;

  int FPDFAnnot_AppendAttachmentPoints(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<FS_QUADPOINTSF> quad_points,
  ) {
    _FPDFAnnot_AppendAttachmentPoints ??= _dylib.lookupFunction<
            _c_FPDFAnnot_AppendAttachmentPoints,
            _dart_FPDFAnnot_AppendAttachmentPoints>(
        'FPDFAnnot_AppendAttachmentPoints');
    return _FPDFAnnot_AppendAttachmentPoints(
      annot,
      quad_points,
    );
  }

  _dart_FPDFAnnot_AppendAttachmentPoints _FPDFAnnot_AppendAttachmentPoints;

  int FPDFAnnot_CountAttachmentPoints(
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_CountAttachmentPoints ??= _dylib.lookupFunction<
            _c_FPDFAnnot_CountAttachmentPoints,
            _dart_FPDFAnnot_CountAttachmentPoints>(
        'FPDFAnnot_CountAttachmentPoints');
    return _FPDFAnnot_CountAttachmentPoints(
      annot,
    );
  }

  _dart_FPDFAnnot_CountAttachmentPoints _FPDFAnnot_CountAttachmentPoints;

  int FPDFAnnot_GetAttachmentPoints(
    ffi.Pointer<fpdf_annotation_t__> annot,
    int quad_index,
    ffi.Pointer<FS_QUADPOINTSF> quad_points,
  ) {
    _FPDFAnnot_GetAttachmentPoints ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetAttachmentPoints,
        _dart_FPDFAnnot_GetAttachmentPoints>('FPDFAnnot_GetAttachmentPoints');
    return _FPDFAnnot_GetAttachmentPoints(
      annot,
      quad_index,
      quad_points,
    );
  }

  _dart_FPDFAnnot_GetAttachmentPoints _FPDFAnnot_GetAttachmentPoints;

  int FPDFAnnot_SetRect(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<FS_RECTF> rect,
  ) {
    _FPDFAnnot_SetRect ??=
        _dylib.lookupFunction<_c_FPDFAnnot_SetRect, _dart_FPDFAnnot_SetRect>(
            'FPDFAnnot_SetRect');
    return _FPDFAnnot_SetRect(
      annot,
      rect,
    );
  }

  _dart_FPDFAnnot_SetRect _FPDFAnnot_SetRect;

  int FPDFAnnot_GetRect(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<FS_RECTF> rect,
  ) {
    _FPDFAnnot_GetRect ??=
        _dylib.lookupFunction<_c_FPDFAnnot_GetRect, _dart_FPDFAnnot_GetRect>(
            'FPDFAnnot_GetRect');
    return _FPDFAnnot_GetRect(
      annot,
      rect,
    );
  }

  _dart_FPDFAnnot_GetRect _FPDFAnnot_GetRect;

  int FPDFAnnot_HasKey(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Int8> key,
  ) {
    _FPDFAnnot_HasKey ??=
        _dylib.lookupFunction<_c_FPDFAnnot_HasKey, _dart_FPDFAnnot_HasKey>(
            'FPDFAnnot_HasKey');
    return _FPDFAnnot_HasKey(
      annot,
      key,
    );
  }

  _dart_FPDFAnnot_HasKey _FPDFAnnot_HasKey;

  int FPDFAnnot_GetValueType(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Int8> key,
  ) {
    _FPDFAnnot_GetValueType ??= _dylib.lookupFunction<_c_FPDFAnnot_GetValueType,
        _dart_FPDFAnnot_GetValueType>('FPDFAnnot_GetValueType');
    return _FPDFAnnot_GetValueType(
      annot,
      key,
    );
  }

  _dart_FPDFAnnot_GetValueType _FPDFAnnot_GetValueType;

  int FPDFAnnot_SetStringValue(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Uint16> value,
  ) {
    _FPDFAnnot_SetStringValue ??= _dylib.lookupFunction<
        _c_FPDFAnnot_SetStringValue,
        _dart_FPDFAnnot_SetStringValue>('FPDFAnnot_SetStringValue');
    return _FPDFAnnot_SetStringValue(
      annot,
      key,
      value,
    );
  }

  _dart_FPDFAnnot_SetStringValue _FPDFAnnot_SetStringValue;

  int FPDFAnnot_GetStringValue(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFAnnot_GetStringValue ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetStringValue,
        _dart_FPDFAnnot_GetStringValue>('FPDFAnnot_GetStringValue');
    return _FPDFAnnot_GetStringValue(
      annot,
      key,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAnnot_GetStringValue _FPDFAnnot_GetStringValue;

  int FPDFAnnot_GetNumberValue(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Float> value,
  ) {
    _FPDFAnnot_GetNumberValue ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetNumberValue,
        _dart_FPDFAnnot_GetNumberValue>('FPDFAnnot_GetNumberValue');
    return _FPDFAnnot_GetNumberValue(
      annot,
      key,
      value,
    );
  }

  _dart_FPDFAnnot_GetNumberValue _FPDFAnnot_GetNumberValue;

  int FPDFAnnot_SetAP(
    ffi.Pointer<fpdf_annotation_t__> annot,
    int appearanceMode,
    ffi.Pointer<ffi.Uint16> value,
  ) {
    _FPDFAnnot_SetAP ??=
        _dylib.lookupFunction<_c_FPDFAnnot_SetAP, _dart_FPDFAnnot_SetAP>(
            'FPDFAnnot_SetAP');
    return _FPDFAnnot_SetAP(
      annot,
      appearanceMode,
      value,
    );
  }

  _dart_FPDFAnnot_SetAP _FPDFAnnot_SetAP;

  int FPDFAnnot_GetAP(
    ffi.Pointer<fpdf_annotation_t__> annot,
    int appearanceMode,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFAnnot_GetAP ??=
        _dylib.lookupFunction<_c_FPDFAnnot_GetAP, _dart_FPDFAnnot_GetAP>(
            'FPDFAnnot_GetAP');
    return _FPDFAnnot_GetAP(
      annot,
      appearanceMode,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAnnot_GetAP _FPDFAnnot_GetAP;

  ffi.Pointer<fpdf_annotation_t__> FPDFAnnot_GetLinkedAnnot(
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Int8> key,
  ) {
    _FPDFAnnot_GetLinkedAnnot ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetLinkedAnnot,
        _dart_FPDFAnnot_GetLinkedAnnot>('FPDFAnnot_GetLinkedAnnot');
    return _FPDFAnnot_GetLinkedAnnot(
      annot,
      key,
    );
  }

  _dart_FPDFAnnot_GetLinkedAnnot _FPDFAnnot_GetLinkedAnnot;

  int FPDFAnnot_GetFlags(
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_GetFlags ??=
        _dylib.lookupFunction<_c_FPDFAnnot_GetFlags, _dart_FPDFAnnot_GetFlags>(
            'FPDFAnnot_GetFlags');
    return _FPDFAnnot_GetFlags(
      annot,
    );
  }

  _dart_FPDFAnnot_GetFlags _FPDFAnnot_GetFlags;

  int FPDFAnnot_SetFlags(
    ffi.Pointer<fpdf_annotation_t__> annot,
    int flags,
  ) {
    _FPDFAnnot_SetFlags ??=
        _dylib.lookupFunction<_c_FPDFAnnot_SetFlags, _dart_FPDFAnnot_SetFlags>(
            'FPDFAnnot_SetFlags');
    return _FPDFAnnot_SetFlags(
      annot,
      flags,
    );
  }

  _dart_FPDFAnnot_SetFlags _FPDFAnnot_SetFlags;

  int FPDFAnnot_GetFormFieldFlags(
    ffi.Pointer<fpdf_form_handle_t__> handle,
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_GetFormFieldFlags ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetFormFieldFlags,
        _dart_FPDFAnnot_GetFormFieldFlags>('FPDFAnnot_GetFormFieldFlags');
    return _FPDFAnnot_GetFormFieldFlags(
      handle,
      annot,
    );
  }

  _dart_FPDFAnnot_GetFormFieldFlags _FPDFAnnot_GetFormFieldFlags;

  ffi.Pointer<fpdf_annotation_t__> FPDFAnnot_GetFormFieldAtPoint(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<FS_POINTF> point,
  ) {
    _FPDFAnnot_GetFormFieldAtPoint ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetFormFieldAtPoint,
        _dart_FPDFAnnot_GetFormFieldAtPoint>('FPDFAnnot_GetFormFieldAtPoint');
    return _FPDFAnnot_GetFormFieldAtPoint(
      hHandle,
      page,
      point,
    );
  }

  _dart_FPDFAnnot_GetFormFieldAtPoint _FPDFAnnot_GetFormFieldAtPoint;

  int FPDFAnnot_GetFormFieldName(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFAnnot_GetFormFieldName ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetFormFieldName,
        _dart_FPDFAnnot_GetFormFieldName>('FPDFAnnot_GetFormFieldName');
    return _FPDFAnnot_GetFormFieldName(
      hHandle,
      annot,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAnnot_GetFormFieldName _FPDFAnnot_GetFormFieldName;

  int FPDFAnnot_GetFormFieldType(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_GetFormFieldType ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetFormFieldType,
        _dart_FPDFAnnot_GetFormFieldType>('FPDFAnnot_GetFormFieldType');
    return _FPDFAnnot_GetFormFieldType(
      hHandle,
      annot,
    );
  }

  _dart_FPDFAnnot_GetFormFieldType _FPDFAnnot_GetFormFieldType;

  int FPDFAnnot_GetFormFieldValue(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFAnnot_GetFormFieldValue ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetFormFieldValue,
        _dart_FPDFAnnot_GetFormFieldValue>('FPDFAnnot_GetFormFieldValue');
    return _FPDFAnnot_GetFormFieldValue(
      hHandle,
      annot,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAnnot_GetFormFieldValue _FPDFAnnot_GetFormFieldValue;

  int FPDFAnnot_GetOptionCount(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_GetOptionCount ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetOptionCount,
        _dart_FPDFAnnot_GetOptionCount>('FPDFAnnot_GetOptionCount');
    return _FPDFAnnot_GetOptionCount(
      hHandle,
      annot,
    );
  }

  _dart_FPDFAnnot_GetOptionCount _FPDFAnnot_GetOptionCount;

  int FPDFAnnot_GetOptionLabel(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
    int index,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFAnnot_GetOptionLabel ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetOptionLabel,
        _dart_FPDFAnnot_GetOptionLabel>('FPDFAnnot_GetOptionLabel');
    return _FPDFAnnot_GetOptionLabel(
      hHandle,
      annot,
      index,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAnnot_GetOptionLabel _FPDFAnnot_GetOptionLabel;

  int FPDFAnnot_IsOptionSelected(
    ffi.Pointer<fpdf_form_handle_t__> handle,
    ffi.Pointer<fpdf_annotation_t__> annot,
    int index,
  ) {
    _FPDFAnnot_IsOptionSelected ??= _dylib.lookupFunction<
        _c_FPDFAnnot_IsOptionSelected,
        _dart_FPDFAnnot_IsOptionSelected>('FPDFAnnot_IsOptionSelected');
    return _FPDFAnnot_IsOptionSelected(
      handle,
      annot,
      index,
    );
  }

  _dart_FPDFAnnot_IsOptionSelected _FPDFAnnot_IsOptionSelected;

  int FPDFAnnot_GetFontSize(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Float> value,
  ) {
    _FPDFAnnot_GetFontSize ??= _dylib.lookupFunction<_c_FPDFAnnot_GetFontSize,
        _dart_FPDFAnnot_GetFontSize>('FPDFAnnot_GetFontSize');
    return _FPDFAnnot_GetFontSize(
      hHandle,
      annot,
      value,
    );
  }

  _dart_FPDFAnnot_GetFontSize _FPDFAnnot_GetFontSize;

  int FPDFAnnot_IsChecked(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_IsChecked ??= _dylib.lookupFunction<_c_FPDFAnnot_IsChecked,
        _dart_FPDFAnnot_IsChecked>('FPDFAnnot_IsChecked');
    return _FPDFAnnot_IsChecked(
      hHandle,
      annot,
    );
  }

  _dart_FPDFAnnot_IsChecked _FPDFAnnot_IsChecked;

  int FPDFAnnot_SetFocusableSubtypes(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<ffi.Int32> subtypes,
    int count,
  ) {
    _FPDFAnnot_SetFocusableSubtypes ??= _dylib.lookupFunction<
        _c_FPDFAnnot_SetFocusableSubtypes,
        _dart_FPDFAnnot_SetFocusableSubtypes>('FPDFAnnot_SetFocusableSubtypes');
    return _FPDFAnnot_SetFocusableSubtypes(
      hHandle,
      subtypes,
      count,
    );
  }

  _dart_FPDFAnnot_SetFocusableSubtypes _FPDFAnnot_SetFocusableSubtypes;

  int FPDFAnnot_GetFocusableSubtypesCount(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ) {
    _FPDFAnnot_GetFocusableSubtypesCount ??= _dylib.lookupFunction<
            _c_FPDFAnnot_GetFocusableSubtypesCount,
            _dart_FPDFAnnot_GetFocusableSubtypesCount>(
        'FPDFAnnot_GetFocusableSubtypesCount');
    return _FPDFAnnot_GetFocusableSubtypesCount(
      hHandle,
    );
  }

  _dart_FPDFAnnot_GetFocusableSubtypesCount
      _FPDFAnnot_GetFocusableSubtypesCount;

  int FPDFAnnot_GetFocusableSubtypes(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<ffi.Int32> subtypes,
    int count,
  ) {
    _FPDFAnnot_GetFocusableSubtypes ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetFocusableSubtypes,
        _dart_FPDFAnnot_GetFocusableSubtypes>('FPDFAnnot_GetFocusableSubtypes');
    return _FPDFAnnot_GetFocusableSubtypes(
      hHandle,
      subtypes,
      count,
    );
  }

  _dart_FPDFAnnot_GetFocusableSubtypes _FPDFAnnot_GetFocusableSubtypes;

  ffi.Pointer<fpdf_link_t__> FPDFAnnot_GetLink(
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_GetLink ??=
        _dylib.lookupFunction<_c_FPDFAnnot_GetLink, _dart_FPDFAnnot_GetLink>(
            'FPDFAnnot_GetLink');
    return _FPDFAnnot_GetLink(
      annot,
    );
  }

  _dart_FPDFAnnot_GetLink _FPDFAnnot_GetLink;

  int FPDFAnnot_GetFormControlCount(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_GetFormControlCount ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetFormControlCount,
        _dart_FPDFAnnot_GetFormControlCount>('FPDFAnnot_GetFormControlCount');
    return _FPDFAnnot_GetFormControlCount(
      hHandle,
      annot,
    );
  }

  _dart_FPDFAnnot_GetFormControlCount _FPDFAnnot_GetFormControlCount;

  int FPDFAnnot_GetFormControlIndex(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
  ) {
    _FPDFAnnot_GetFormControlIndex ??= _dylib.lookupFunction<
        _c_FPDFAnnot_GetFormControlIndex,
        _dart_FPDFAnnot_GetFormControlIndex>('FPDFAnnot_GetFormControlIndex');
    return _FPDFAnnot_GetFormControlIndex(
      hHandle,
      annot,
    );
  }

  _dart_FPDFAnnot_GetFormControlIndex _FPDFAnnot_GetFormControlIndex;

  int FPDFAnnot_GetFormFieldExportValue(
    ffi.Pointer<fpdf_form_handle_t__> hHandle,
    ffi.Pointer<fpdf_annotation_t__> annot,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFAnnot_GetFormFieldExportValue ??= _dylib.lookupFunction<
            _c_FPDFAnnot_GetFormFieldExportValue,
            _dart_FPDFAnnot_GetFormFieldExportValue>(
        'FPDFAnnot_GetFormFieldExportValue');
    return _FPDFAnnot_GetFormFieldExportValue(
      hHandle,
      annot,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAnnot_GetFormFieldExportValue _FPDFAnnot_GetFormFieldExportValue;

  int FPDF_ImportPages(
    ffi.Pointer<fpdf_document_t__> dest_doc,
    ffi.Pointer<fpdf_document_t__> src_doc,
    ffi.Pointer<ffi.Int8> pagerange,
    int index,
  ) {
    _FPDF_ImportPages ??=
        _dylib.lookupFunction<_c_FPDF_ImportPages, _dart_FPDF_ImportPages>(
            'FPDF_ImportPages');
    return _FPDF_ImportPages(
      dest_doc,
      src_doc,
      pagerange,
      index,
    );
  }

  _dart_FPDF_ImportPages _FPDF_ImportPages;

  ffi.Pointer<fpdf_document_t__> FPDF_ImportNPagesToOne(
    ffi.Pointer<fpdf_document_t__> src_doc,
    double output_width,
    double output_height,
    int num_pages_on_x_axis,
    int num_pages_on_y_axis,
  ) {
    _FPDF_ImportNPagesToOne ??= _dylib.lookupFunction<_c_FPDF_ImportNPagesToOne,
        _dart_FPDF_ImportNPagesToOne>('FPDF_ImportNPagesToOne');
    return _FPDF_ImportNPagesToOne(
      src_doc,
      output_width,
      output_height,
      num_pages_on_x_axis,
      num_pages_on_y_axis,
    );
  }

  _dart_FPDF_ImportNPagesToOne _FPDF_ImportNPagesToOne;

  int FPDF_CopyViewerPreferences(
    ffi.Pointer<fpdf_document_t__> dest_doc,
    ffi.Pointer<fpdf_document_t__> src_doc,
  ) {
    _FPDF_CopyViewerPreferences ??= _dylib.lookupFunction<
        _c_FPDF_CopyViewerPreferences,
        _dart_FPDF_CopyViewerPreferences>('FPDF_CopyViewerPreferences');
    return _FPDF_CopyViewerPreferences(
      dest_doc,
      src_doc,
    );
  }

  _dart_FPDF_CopyViewerPreferences _FPDF_CopyViewerPreferences;

  int FPDFDoc_GetJavaScriptActionCount(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDFDoc_GetJavaScriptActionCount ??= _dylib.lookupFunction<
            _c_FPDFDoc_GetJavaScriptActionCount,
            _dart_FPDFDoc_GetJavaScriptActionCount>(
        'FPDFDoc_GetJavaScriptActionCount');
    return _FPDFDoc_GetJavaScriptActionCount(
      document,
    );
  }

  _dart_FPDFDoc_GetJavaScriptActionCount _FPDFDoc_GetJavaScriptActionCount;

  ffi.Pointer<fpdf_javascript_action_t> FPDFDoc_GetJavaScriptAction(
    ffi.Pointer<fpdf_document_t__> document,
    int index,
  ) {
    _FPDFDoc_GetJavaScriptAction ??= _dylib.lookupFunction<
        _c_FPDFDoc_GetJavaScriptAction,
        _dart_FPDFDoc_GetJavaScriptAction>('FPDFDoc_GetJavaScriptAction');
    return _FPDFDoc_GetJavaScriptAction(
      document,
      index,
    );
  }

  _dart_FPDFDoc_GetJavaScriptAction _FPDFDoc_GetJavaScriptAction;

  void FPDFDoc_CloseJavaScriptAction(
    ffi.Pointer<fpdf_javascript_action_t> javascript,
  ) {
    _FPDFDoc_CloseJavaScriptAction ??= _dylib.lookupFunction<
        _c_FPDFDoc_CloseJavaScriptAction,
        _dart_FPDFDoc_CloseJavaScriptAction>('FPDFDoc_CloseJavaScriptAction');
    return _FPDFDoc_CloseJavaScriptAction(
      javascript,
    );
  }

  _dart_FPDFDoc_CloseJavaScriptAction _FPDFDoc_CloseJavaScriptAction;

  int FPDFJavaScriptAction_GetName(
    ffi.Pointer<fpdf_javascript_action_t> javascript,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFJavaScriptAction_GetName ??= _dylib.lookupFunction<
        _c_FPDFJavaScriptAction_GetName,
        _dart_FPDFJavaScriptAction_GetName>('FPDFJavaScriptAction_GetName');
    return _FPDFJavaScriptAction_GetName(
      javascript,
      buffer,
      buflen,
    );
  }

  _dart_FPDFJavaScriptAction_GetName _FPDFJavaScriptAction_GetName;

  int FPDFJavaScriptAction_GetScript(
    ffi.Pointer<fpdf_javascript_action_t> javascript,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFJavaScriptAction_GetScript ??= _dylib.lookupFunction<
        _c_FPDFJavaScriptAction_GetScript,
        _dart_FPDFJavaScriptAction_GetScript>('FPDFJavaScriptAction_GetScript');
    return _FPDFJavaScriptAction_GetScript(
      javascript,
      buffer,
      buflen,
    );
  }

  _dart_FPDFJavaScriptAction_GetScript _FPDFJavaScriptAction_GetScript;

  int FPDFPage_Flatten(
    ffi.Pointer<fpdf_page_t__> page,
    int nFlag,
  ) {
    _FPDFPage_Flatten ??=
        _dylib.lookupFunction<_c_FPDFPage_Flatten, _dart_FPDFPage_Flatten>(
            'FPDFPage_Flatten');
    return _FPDFPage_Flatten(
      page,
      nFlag,
    );
  }

  _dart_FPDFPage_Flatten _FPDFPage_Flatten;

  int FPDF_SaveAsCopy(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<FPDF_FILEWRITE> pFileWrite,
    int flags,
  ) {
    _FPDF_SaveAsCopy ??=
        _dylib.lookupFunction<_c_FPDF_SaveAsCopy, _dart_FPDF_SaveAsCopy>(
            'FPDF_SaveAsCopy');
    return _FPDF_SaveAsCopy(
      document,
      pFileWrite,
      flags,
    );
  }

  _dart_FPDF_SaveAsCopy _FPDF_SaveAsCopy;

  int FPDF_SaveWithVersion(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<FPDF_FILEWRITE> pFileWrite,
    int flags,
    int fileVersion,
  ) {
    _FPDF_SaveWithVersion ??= _dylib.lookupFunction<_c_FPDF_SaveWithVersion,
        _dart_FPDF_SaveWithVersion>('FPDF_SaveWithVersion');
    return _FPDF_SaveWithVersion(
      document,
      pFileWrite,
      flags,
      fileVersion,
    );
  }

  _dart_FPDF_SaveWithVersion _FPDF_SaveWithVersion;

  ffi.Pointer<FPDF_CharsetFontMap> FPDF_GetDefaultTTFMap() {
    _FPDF_GetDefaultTTFMap ??= _dylib.lookupFunction<_c_FPDF_GetDefaultTTFMap,
        _dart_FPDF_GetDefaultTTFMap>('FPDF_GetDefaultTTFMap');
    return _FPDF_GetDefaultTTFMap();
  }

  _dart_FPDF_GetDefaultTTFMap _FPDF_GetDefaultTTFMap;

  void FPDF_AddInstalledFont(
    ffi.Pointer<ffi.Void> mapper,
    ffi.Pointer<ffi.Int8> face,
    int charset,
  ) {
    _FPDF_AddInstalledFont ??= _dylib.lookupFunction<_c_FPDF_AddInstalledFont,
        _dart_FPDF_AddInstalledFont>('FPDF_AddInstalledFont');
    return _FPDF_AddInstalledFont(
      mapper,
      face,
      charset,
    );
  }

  _dart_FPDF_AddInstalledFont _FPDF_AddInstalledFont;

  void FPDF_SetSystemFontInfo(
    ffi.Pointer<FPDF_SYSFONTINFO> pFontInfo,
  ) {
    _FPDF_SetSystemFontInfo ??= _dylib.lookupFunction<_c_FPDF_SetSystemFontInfo,
        _dart_FPDF_SetSystemFontInfo>('FPDF_SetSystemFontInfo');
    return _FPDF_SetSystemFontInfo(
      pFontInfo,
    );
  }

  _dart_FPDF_SetSystemFontInfo _FPDF_SetSystemFontInfo;

  ffi.Pointer<FPDF_SYSFONTINFO> FPDF_GetDefaultSystemFontInfo() {
    _FPDF_GetDefaultSystemFontInfo ??= _dylib.lookupFunction<
        _c_FPDF_GetDefaultSystemFontInfo,
        _dart_FPDF_GetDefaultSystemFontInfo>('FPDF_GetDefaultSystemFontInfo');
    return _FPDF_GetDefaultSystemFontInfo();
  }

  _dart_FPDF_GetDefaultSystemFontInfo _FPDF_GetDefaultSystemFontInfo;

  void FPDF_FreeDefaultSystemFontInfo(
    ffi.Pointer<FPDF_SYSFONTINFO> pFontInfo,
  ) {
    _FPDF_FreeDefaultSystemFontInfo ??= _dylib.lookupFunction<
        _c_FPDF_FreeDefaultSystemFontInfo,
        _dart_FPDF_FreeDefaultSystemFontInfo>('FPDF_FreeDefaultSystemFontInfo');
    return _FPDF_FreeDefaultSystemFontInfo(
      pFontInfo,
    );
  }

  _dart_FPDF_FreeDefaultSystemFontInfo _FPDF_FreeDefaultSystemFontInfo;

  int FPDFDoc_GetAttachmentCount(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDFDoc_GetAttachmentCount ??= _dylib.lookupFunction<
        _c_FPDFDoc_GetAttachmentCount,
        _dart_FPDFDoc_GetAttachmentCount>('FPDFDoc_GetAttachmentCount');
    return _FPDFDoc_GetAttachmentCount(
      document,
    );
  }

  _dart_FPDFDoc_GetAttachmentCount _FPDFDoc_GetAttachmentCount;

  ffi.Pointer<fpdf_attachment_t__> FPDFDoc_AddAttachment(
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Uint16> name,
  ) {
    _FPDFDoc_AddAttachment ??= _dylib.lookupFunction<_c_FPDFDoc_AddAttachment,
        _dart_FPDFDoc_AddAttachment>('FPDFDoc_AddAttachment');
    return _FPDFDoc_AddAttachment(
      document,
      name,
    );
  }

  _dart_FPDFDoc_AddAttachment _FPDFDoc_AddAttachment;

  ffi.Pointer<fpdf_attachment_t__> FPDFDoc_GetAttachment(
    ffi.Pointer<fpdf_document_t__> document,
    int index,
  ) {
    _FPDFDoc_GetAttachment ??= _dylib.lookupFunction<_c_FPDFDoc_GetAttachment,
        _dart_FPDFDoc_GetAttachment>('FPDFDoc_GetAttachment');
    return _FPDFDoc_GetAttachment(
      document,
      index,
    );
  }

  _dart_FPDFDoc_GetAttachment _FPDFDoc_GetAttachment;

  int FPDFDoc_DeleteAttachment(
    ffi.Pointer<fpdf_document_t__> document,
    int index,
  ) {
    _FPDFDoc_DeleteAttachment ??= _dylib.lookupFunction<
        _c_FPDFDoc_DeleteAttachment,
        _dart_FPDFDoc_DeleteAttachment>('FPDFDoc_DeleteAttachment');
    return _FPDFDoc_DeleteAttachment(
      document,
      index,
    );
  }

  _dart_FPDFDoc_DeleteAttachment _FPDFDoc_DeleteAttachment;

  int FPDFAttachment_GetName(
    ffi.Pointer<fpdf_attachment_t__> attachment,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFAttachment_GetName ??= _dylib.lookupFunction<_c_FPDFAttachment_GetName,
        _dart_FPDFAttachment_GetName>('FPDFAttachment_GetName');
    return _FPDFAttachment_GetName(
      attachment,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAttachment_GetName _FPDFAttachment_GetName;

  int FPDFAttachment_HasKey(
    ffi.Pointer<fpdf_attachment_t__> attachment,
    ffi.Pointer<ffi.Int8> key,
  ) {
    _FPDFAttachment_HasKey ??= _dylib.lookupFunction<_c_FPDFAttachment_HasKey,
        _dart_FPDFAttachment_HasKey>('FPDFAttachment_HasKey');
    return _FPDFAttachment_HasKey(
      attachment,
      key,
    );
  }

  _dart_FPDFAttachment_HasKey _FPDFAttachment_HasKey;

  int FPDFAttachment_GetValueType(
    ffi.Pointer<fpdf_attachment_t__> attachment,
    ffi.Pointer<ffi.Int8> key,
  ) {
    _FPDFAttachment_GetValueType ??= _dylib.lookupFunction<
        _c_FPDFAttachment_GetValueType,
        _dart_FPDFAttachment_GetValueType>('FPDFAttachment_GetValueType');
    return _FPDFAttachment_GetValueType(
      attachment,
      key,
    );
  }

  _dart_FPDFAttachment_GetValueType _FPDFAttachment_GetValueType;

  int FPDFAttachment_SetStringValue(
    ffi.Pointer<fpdf_attachment_t__> attachment,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Uint16> value,
  ) {
    _FPDFAttachment_SetStringValue ??= _dylib.lookupFunction<
        _c_FPDFAttachment_SetStringValue,
        _dart_FPDFAttachment_SetStringValue>('FPDFAttachment_SetStringValue');
    return _FPDFAttachment_SetStringValue(
      attachment,
      key,
      value,
    );
  }

  _dart_FPDFAttachment_SetStringValue _FPDFAttachment_SetStringValue;

  int FPDFAttachment_GetStringValue(
    ffi.Pointer<fpdf_attachment_t__> attachment,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Uint16> buffer,
    int buflen,
  ) {
    _FPDFAttachment_GetStringValue ??= _dylib.lookupFunction<
        _c_FPDFAttachment_GetStringValue,
        _dart_FPDFAttachment_GetStringValue>('FPDFAttachment_GetStringValue');
    return _FPDFAttachment_GetStringValue(
      attachment,
      key,
      buffer,
      buflen,
    );
  }

  _dart_FPDFAttachment_GetStringValue _FPDFAttachment_GetStringValue;

  int FPDFAttachment_SetFile(
    ffi.Pointer<fpdf_attachment_t__> attachment,
    ffi.Pointer<fpdf_document_t__> document,
    ffi.Pointer<ffi.Void> contents,
    int len,
  ) {
    _FPDFAttachment_SetFile ??= _dylib.lookupFunction<_c_FPDFAttachment_SetFile,
        _dart_FPDFAttachment_SetFile>('FPDFAttachment_SetFile');
    return _FPDFAttachment_SetFile(
      attachment,
      document,
      contents,
      len,
    );
  }

  _dart_FPDFAttachment_SetFile _FPDFAttachment_SetFile;

  int FPDFAttachment_GetFile(
    ffi.Pointer<fpdf_attachment_t__> attachment,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Uint64> out_buflen,
  ) {
    _FPDFAttachment_GetFile ??= _dylib.lookupFunction<_c_FPDFAttachment_GetFile,
        _dart_FPDFAttachment_GetFile>('FPDFAttachment_GetFile');
    return _FPDFAttachment_GetFile(
      attachment,
      buffer,
      buflen,
      out_buflen,
    );
  }

  _dart_FPDFAttachment_GetFile _FPDFAttachment_GetFile;

  int FPDFText_GetCharIndexFromTextIndex(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int nTextIndex,
  ) {
    _FPDFText_GetCharIndexFromTextIndex ??= _dylib.lookupFunction<
            _c_FPDFText_GetCharIndexFromTextIndex,
            _dart_FPDFText_GetCharIndexFromTextIndex>(
        'FPDFText_GetCharIndexFromTextIndex');
    return _FPDFText_GetCharIndexFromTextIndex(
      text_page,
      nTextIndex,
    );
  }

  _dart_FPDFText_GetCharIndexFromTextIndex _FPDFText_GetCharIndexFromTextIndex;

  int FPDFText_GetTextIndexFromCharIndex(
    ffi.Pointer<fpdf_textpage_t__> text_page,
    int nCharIndex,
  ) {
    _FPDFText_GetTextIndexFromCharIndex ??= _dylib.lookupFunction<
            _c_FPDFText_GetTextIndexFromCharIndex,
            _dart_FPDFText_GetTextIndexFromCharIndex>(
        'FPDFText_GetTextIndexFromCharIndex');
    return _FPDFText_GetTextIndexFromCharIndex(
      text_page,
      nCharIndex,
    );
  }

  _dart_FPDFText_GetTextIndexFromCharIndex _FPDFText_GetTextIndexFromCharIndex;

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    _asctime ??= _dylib.lookupFunction<_c_asctime, _dart_asctime>('asctime');
    return _asctime(
      arg0,
    );
  }

  _dart_asctime _asctime;

  int clock() {
    _clock ??= _dylib.lookupFunction<_c_clock, _dart_clock>('clock');
    return _clock();
  }

  _dart_clock _clock;

  ffi.Pointer<ffi.Int8> ctime(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _ctime ??= _dylib.lookupFunction<_c_ctime, _dart_ctime>('ctime');
    return _ctime(
      arg0,
    );
  }

  _dart_ctime _ctime;

  double difftime(
    int arg0,
    int arg1,
  ) {
    _difftime ??=
        _dylib.lookupFunction<_c_difftime, _dart_difftime>('difftime');
    return _difftime(
      arg0,
      arg1,
    );
  }

  _dart_difftime _difftime;

  ffi.Pointer<tm> getdate(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _getdate ??= _dylib.lookupFunction<_c_getdate, _dart_getdate>('getdate');
    return _getdate(
      arg0,
    );
  }

  _dart_getdate _getdate;

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _gmtime ??= _dylib.lookupFunction<_c_gmtime, _dart_gmtime>('gmtime');
    return _gmtime(
      arg0,
    );
  }

  _dart_gmtime _gmtime;

  ffi.Pointer<tm> localtime(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _localtime ??=
        _dylib.lookupFunction<_c_localtime, _dart_localtime>('localtime');
    return _localtime(
      arg0,
    );
  }

  _dart_localtime _localtime;

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    _mktime ??= _dylib.lookupFunction<_c_mktime, _dart_mktime>('mktime');
    return _mktime(
      arg0,
    );
  }

  _dart_mktime _mktime;

  int strftime(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    _strftime ??=
        _dylib.lookupFunction<_c_strftime, _dart_strftime>('strftime');
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_strftime _strftime;

  ffi.Pointer<ffi.Int8> strptime(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    _strptime ??=
        _dylib.lookupFunction<_c_strptime, _dart_strptime>('strptime');
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_strptime _strptime;

  int time(
    ffi.Pointer<ffi.Int64> arg0,
  ) {
    _time ??= _dylib.lookupFunction<_c_time, _dart_time>('time');
    return _time(
      arg0,
    );
  }

  _dart_time _time;

  void tzset() {
    _tzset ??= _dylib.lookupFunction<_c_tzset, _dart_tzset>('tzset');
    return _tzset();
  }

  _dart_tzset _tzset;

  ffi.Pointer<ffi.Int8> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _asctime_r ??=
        _dylib.lookupFunction<_c_asctime_r, _dart_asctime_r>('asctime_r');
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  _dart_asctime_r _asctime_r;

  ffi.Pointer<ffi.Int8> ctime_r(
    ffi.Pointer<ffi.Int64> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _ctime_r ??= _dylib.lookupFunction<_c_ctime_r, _dart_ctime_r>('ctime_r');
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  _dart_ctime_r _ctime_r;

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<ffi.Int64> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    _gmtime_r ??=
        _dylib.lookupFunction<_c_gmtime_r, _dart_gmtime_r>('gmtime_r');
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  _dart_gmtime_r _gmtime_r;

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<ffi.Int64> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    _localtime_r ??=
        _dylib.lookupFunction<_c_localtime_r, _dart_localtime_r>('localtime_r');
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  _dart_localtime_r _localtime_r;

  int posix2time(
    int arg0,
  ) {
    _posix2time ??=
        _dylib.lookupFunction<_c_posix2time, _dart_posix2time>('posix2time');
    return _posix2time(
      arg0,
    );
  }

  _dart_posix2time _posix2time;

  void tzsetwall() {
    _tzsetwall ??=
        _dylib.lookupFunction<_c_tzsetwall, _dart_tzsetwall>('tzsetwall');
    return _tzsetwall();
  }

  _dart_tzsetwall _tzsetwall;

  int time2posix(
    int arg0,
  ) {
    _time2posix ??=
        _dylib.lookupFunction<_c_time2posix, _dart_time2posix>('time2posix');
    return _time2posix(
      arg0,
    );
  }

  _dart_time2posix _time2posix;

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    _timelocal ??=
        _dylib.lookupFunction<_c_timelocal, _dart_timelocal>('timelocal');
    return _timelocal(
      arg0,
    );
  }

  _dart_timelocal _timelocal;

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    _timegm ??= _dylib.lookupFunction<_c_timegm, _dart_timegm>('timegm');
    return _timegm(
      arg0,
    );
  }

  _dart_timegm _timegm;

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    _nanosleep ??=
        _dylib.lookupFunction<_c_nanosleep, _dart_nanosleep>('nanosleep');
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  _dart_nanosleep _nanosleep;

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    _clock_getres ??= _dylib
        .lookupFunction<_c_clock_getres, _dart_clock_getres>('clock_getres');
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  _dart_clock_getres _clock_getres;

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_gettime ??= _dylib
        .lookupFunction<_c_clock_gettime, _dart_clock_gettime>('clock_gettime');
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_gettime _clock_gettime;

  int clock_gettime_nsec_np(
    int __clock_id,
  ) {
    _clock_gettime_nsec_np ??= _dylib.lookupFunction<_c_clock_gettime_nsec_np,
        _dart_clock_gettime_nsec_np>('clock_gettime_nsec_np');
    return _clock_gettime_nsec_np(
      __clock_id,
    );
  }

  _dart_clock_gettime_nsec_np _clock_gettime_nsec_np;

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_settime ??= _dylib
        .lookupFunction<_c_clock_settime, _dart_clock_settime>('clock_settime');
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_settime _clock_settime;

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    _timespec_get ??= _dylib
        .lookupFunction<_c_timespec_get, _dart_timespec_get>('timespec_get');
    return _timespec_get(
      ts,
      base,
    );
  }

  _dart_timespec_get _timespec_get;

  int FSDK_SetUnSpObjProcessHandler(
    ffi.Pointer<UNSUPPORT_INFO> unsp_info,
  ) {
    _FSDK_SetUnSpObjProcessHandler ??= _dylib.lookupFunction<
        _c_FSDK_SetUnSpObjProcessHandler,
        _dart_FSDK_SetUnSpObjProcessHandler>('FSDK_SetUnSpObjProcessHandler');
    return _FSDK_SetUnSpObjProcessHandler(
      unsp_info,
    );
  }

  _dart_FSDK_SetUnSpObjProcessHandler _FSDK_SetUnSpObjProcessHandler;

  void FSDK_SetTimeFunction(
    ffi.Pointer<ffi.NativeFunction<_typedefC_60>> func,
  ) {
    _FSDK_SetTimeFunction ??= _dylib.lookupFunction<_c_FSDK_SetTimeFunction,
        _dart_FSDK_SetTimeFunction>('FSDK_SetTimeFunction');
    return _FSDK_SetTimeFunction(
      func,
    );
  }

  _dart_FSDK_SetTimeFunction _FSDK_SetTimeFunction;

  void FSDK_SetLocaltimeFunction(
    ffi.Pointer<ffi.NativeFunction<_typedefC_61>> func,
  ) {
    _FSDK_SetLocaltimeFunction ??= _dylib.lookupFunction<
        _c_FSDK_SetLocaltimeFunction,
        _dart_FSDK_SetLocaltimeFunction>('FSDK_SetLocaltimeFunction');
    return _FSDK_SetLocaltimeFunction(
      func,
    );
  }

  _dart_FSDK_SetLocaltimeFunction _FSDK_SetLocaltimeFunction;

  int FPDFDoc_GetPageMode(
    ffi.Pointer<fpdf_document_t__> document,
  ) {
    _FPDFDoc_GetPageMode ??= _dylib.lookupFunction<_c_FPDFDoc_GetPageMode,
        _dart_FPDFDoc_GetPageMode>('FPDFDoc_GetPageMode');
    return _FPDFDoc_GetPageMode(
      document,
    );
  }

  _dart_FPDFDoc_GetPageMode _FPDFDoc_GetPageMode;

  int FPDF_RenderPageBitmapWithColorScheme_Start(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int flags,
    ffi.Pointer<FPDF_COLORSCHEME> color_scheme,
    ffi.Pointer<IFSDK_PAUSE> pause,
  ) {
    _FPDF_RenderPageBitmapWithColorScheme_Start ??= _dylib.lookupFunction<
            _c_FPDF_RenderPageBitmapWithColorScheme_Start,
            _dart_FPDF_RenderPageBitmapWithColorScheme_Start>(
        'FPDF_RenderPageBitmapWithColorScheme_Start');
    return _FPDF_RenderPageBitmapWithColorScheme_Start(
      bitmap,
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      flags,
      color_scheme,
      pause,
    );
  }

  _dart_FPDF_RenderPageBitmapWithColorScheme_Start
      _FPDF_RenderPageBitmapWithColorScheme_Start;

  int FPDF_RenderPageBitmap_Start(
    ffi.Pointer<fpdf_bitmap_t__> bitmap,
    ffi.Pointer<fpdf_page_t__> page,
    int start_x,
    int start_y,
    int size_x,
    int size_y,
    int rotate,
    int flags,
    ffi.Pointer<IFSDK_PAUSE> pause,
  ) {
    _FPDF_RenderPageBitmap_Start ??= _dylib.lookupFunction<
        _c_FPDF_RenderPageBitmap_Start,
        _dart_FPDF_RenderPageBitmap_Start>('FPDF_RenderPageBitmap_Start');
    return _FPDF_RenderPageBitmap_Start(
      bitmap,
      page,
      start_x,
      start_y,
      size_x,
      size_y,
      rotate,
      flags,
      pause,
    );
  }

  _dart_FPDF_RenderPageBitmap_Start _FPDF_RenderPageBitmap_Start;

  int FPDF_RenderPage_Continue(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<IFSDK_PAUSE> pause,
  ) {
    _FPDF_RenderPage_Continue ??= _dylib.lookupFunction<
        _c_FPDF_RenderPage_Continue,
        _dart_FPDF_RenderPage_Continue>('FPDF_RenderPage_Continue');
    return _FPDF_RenderPage_Continue(
      page,
      pause,
    );
  }

  _dart_FPDF_RenderPage_Continue _FPDF_RenderPage_Continue;

  void FPDF_RenderPage_Close(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDF_RenderPage_Close ??= _dylib.lookupFunction<_c_FPDF_RenderPage_Close,
        _dart_FPDF_RenderPage_Close>('FPDF_RenderPage_Close');
    return _FPDF_RenderPage_Close(
      page,
    );
  }

  _dart_FPDF_RenderPage_Close _FPDF_RenderPage_Close;

  ffi.Pointer<ffi.Void> FPDFAvail_Create(
    ffi.Pointer<FX_FILEAVAIL> file_avail,
    ffi.Pointer<FPDF_FILEACCESS> file,
  ) {
    _FPDFAvail_Create ??=
        _dylib.lookupFunction<_c_FPDFAvail_Create, _dart_FPDFAvail_Create>(
            'FPDFAvail_Create');
    return _FPDFAvail_Create(
      file_avail,
      file,
    );
  }

  _dart_FPDFAvail_Create _FPDFAvail_Create;

  void FPDFAvail_Destroy(
    ffi.Pointer<ffi.Void> avail,
  ) {
    _FPDFAvail_Destroy ??=
        _dylib.lookupFunction<_c_FPDFAvail_Destroy, _dart_FPDFAvail_Destroy>(
            'FPDFAvail_Destroy');
    return _FPDFAvail_Destroy(
      avail,
    );
  }

  _dart_FPDFAvail_Destroy _FPDFAvail_Destroy;

  int FPDFAvail_IsDocAvail(
    ffi.Pointer<ffi.Void> avail,
    ffi.Pointer<FX_DOWNLOADHINTS> hints,
  ) {
    _FPDFAvail_IsDocAvail ??= _dylib.lookupFunction<_c_FPDFAvail_IsDocAvail,
        _dart_FPDFAvail_IsDocAvail>('FPDFAvail_IsDocAvail');
    return _FPDFAvail_IsDocAvail(
      avail,
      hints,
    );
  }

  _dart_FPDFAvail_IsDocAvail _FPDFAvail_IsDocAvail;

  ffi.Pointer<fpdf_document_t__> FPDFAvail_GetDocument(
    ffi.Pointer<ffi.Void> avail,
    ffi.Pointer<ffi.Int8> password,
  ) {
    _FPDFAvail_GetDocument ??= _dylib.lookupFunction<_c_FPDFAvail_GetDocument,
        _dart_FPDFAvail_GetDocument>('FPDFAvail_GetDocument');
    return _FPDFAvail_GetDocument(
      avail,
      password,
    );
  }

  _dart_FPDFAvail_GetDocument _FPDFAvail_GetDocument;

  int FPDFAvail_GetFirstPageNum(
    ffi.Pointer<fpdf_document_t__> doc,
  ) {
    _FPDFAvail_GetFirstPageNum ??= _dylib.lookupFunction<
        _c_FPDFAvail_GetFirstPageNum,
        _dart_FPDFAvail_GetFirstPageNum>('FPDFAvail_GetFirstPageNum');
    return _FPDFAvail_GetFirstPageNum(
      doc,
    );
  }

  _dart_FPDFAvail_GetFirstPageNum _FPDFAvail_GetFirstPageNum;

  int FPDFAvail_IsPageAvail(
    ffi.Pointer<ffi.Void> avail,
    int page_index,
    ffi.Pointer<FX_DOWNLOADHINTS> hints,
  ) {
    _FPDFAvail_IsPageAvail ??= _dylib.lookupFunction<_c_FPDFAvail_IsPageAvail,
        _dart_FPDFAvail_IsPageAvail>('FPDFAvail_IsPageAvail');
    return _FPDFAvail_IsPageAvail(
      avail,
      page_index,
      hints,
    );
  }

  _dart_FPDFAvail_IsPageAvail _FPDFAvail_IsPageAvail;

  int FPDFAvail_IsFormAvail(
    ffi.Pointer<ffi.Void> avail,
    ffi.Pointer<FX_DOWNLOADHINTS> hints,
  ) {
    _FPDFAvail_IsFormAvail ??= _dylib.lookupFunction<_c_FPDFAvail_IsFormAvail,
        _dart_FPDFAvail_IsFormAvail>('FPDFAvail_IsFormAvail');
    return _FPDFAvail_IsFormAvail(
      avail,
      hints,
    );
  }

  _dart_FPDFAvail_IsFormAvail _FPDFAvail_IsFormAvail;

  int FPDFAvail_IsLinearized(
    ffi.Pointer<ffi.Void> avail,
  ) {
    _FPDFAvail_IsLinearized ??= _dylib.lookupFunction<_c_FPDFAvail_IsLinearized,
        _dart_FPDFAvail_IsLinearized>('FPDFAvail_IsLinearized');
    return _FPDFAvail_IsLinearized(
      avail,
    );
  }

  _dart_FPDFAvail_IsLinearized _FPDFAvail_IsLinearized;

  int FPDFPage_GetDecodedThumbnailData(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDFPage_GetDecodedThumbnailData ??= _dylib.lookupFunction<
            _c_FPDFPage_GetDecodedThumbnailData,
            _dart_FPDFPage_GetDecodedThumbnailData>(
        'FPDFPage_GetDecodedThumbnailData');
    return _FPDFPage_GetDecodedThumbnailData(
      page,
      buffer,
      buflen,
    );
  }

  _dart_FPDFPage_GetDecodedThumbnailData _FPDFPage_GetDecodedThumbnailData;

  int FPDFPage_GetRawThumbnailData(
    ffi.Pointer<fpdf_page_t__> page,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
  ) {
    _FPDFPage_GetRawThumbnailData ??= _dylib.lookupFunction<
        _c_FPDFPage_GetRawThumbnailData,
        _dart_FPDFPage_GetRawThumbnailData>('FPDFPage_GetRawThumbnailData');
    return _FPDFPage_GetRawThumbnailData(
      page,
      buffer,
      buflen,
    );
  }

  _dart_FPDFPage_GetRawThumbnailData _FPDFPage_GetRawThumbnailData;

  ffi.Pointer<fpdf_bitmap_t__> FPDFPage_GetThumbnailAsBitmap(
    ffi.Pointer<fpdf_page_t__> page,
  ) {
    _FPDFPage_GetThumbnailAsBitmap ??= _dylib.lookupFunction<
        _c_FPDFPage_GetThumbnailAsBitmap,
        _dart_FPDFPage_GetThumbnailAsBitmap>('FPDFPage_GetThumbnailAsBitmap');
    return _FPDFPage_GetThumbnailAsBitmap(
      page,
    );
  }

  _dart_FPDFPage_GetThumbnailAsBitmap _FPDFPage_GetThumbnailAsBitmap;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

abstract class FPDF_TEXT_RENDERMODE {
  static const int FPDF_TEXTRENDERMODE_UNKNOWN = -1;
  static const int FPDF_TEXTRENDERMODE_FILL = 0;
  static const int FPDF_TEXTRENDERMODE_STROKE = 1;
  static const int FPDF_TEXTRENDERMODE_FILL_STROKE = 2;
  static const int FPDF_TEXTRENDERMODE_INVISIBLE = 3;
  static const int FPDF_TEXTRENDERMODE_FILL_CLIP = 4;
  static const int FPDF_TEXTRENDERMODE_STROKE_CLIP = 5;
  static const int FPDF_TEXTRENDERMODE_FILL_STROKE_CLIP = 6;
  static const int FPDF_TEXTRENDERMODE_CLIP = 7;
  static const int FPDF_TEXTRENDERMODE_LAST = 7;
}

class fpdf_action_t__ extends ffi.Struct {}

class fpdf_annotation_t__ extends ffi.Struct {}

class fpdf_attachment_t__ extends ffi.Struct {}

class fpdf_bitmap_t__ extends ffi.Struct {}

class fpdf_bookmark_t__ extends ffi.Struct {}

class fpdf_clippath_t__ extends ffi.Struct {}

class fpdf_dest_t__ extends ffi.Struct {}

class fpdf_document_t__ extends ffi.Struct {}

class fpdf_font_t__ extends ffi.Struct {}

class fpdf_form_handle_t__ extends ffi.Struct {}

class fpdf_javascript_action_t extends ffi.Struct {}

class fpdf_link_t__ extends ffi.Struct {}

class fpdf_page_t__ extends ffi.Struct {}

class fpdf_pagelink_t__ extends ffi.Struct {}

class fpdf_pageobject_t__ extends ffi.Struct {}

class fpdf_pageobjectmark_t__ extends ffi.Struct {}

class fpdf_pagerange_t__ extends ffi.Struct {}

class fpdf_pathsegment_t extends ffi.Struct {}

class fpdf_schhandle_t__ extends ffi.Struct {}

class fpdf_structelement_t__ extends ffi.Struct {}

class fpdf_structtree_t__ extends ffi.Struct {}

class fpdf_textpage_t__ extends ffi.Struct {}

class fpdf_widget_t__ extends ffi.Struct {}

abstract class FPDF_DUPLEXTYPE {
  static const int DuplexUndefined = 0;
  static const int Simplex = 1;
  static const int DuplexFlipShortEdge = 2;
  static const int DuplexFlipLongEdge = 3;
}

class FPDF_BSTR extends ffi.Struct {
  ffi.Pointer<ffi.Int8> str;

  @ffi.Int32()
  int len;
}

class FS_MATRIX extends ffi.Struct {
  @ffi.Float()
  double a;

  @ffi.Float()
  double b;

  @ffi.Float()
  double c;

  @ffi.Float()
  double d;

  @ffi.Float()
  double e;

  @ffi.Float()
  double f;
}

class FS_RECTF extends ffi.Struct {
  @ffi.Float()
  double left;

  @ffi.Float()
  double top;

  @ffi.Float()
  double right;

  @ffi.Float()
  double bottom;
}

class FS_SIZEF extends ffi.Struct {
  @ffi.Float()
  double width;

  @ffi.Float()
  double height;
}

class FS_POINTF extends ffi.Struct {
  @ffi.Float()
  double x;

  @ffi.Float()
  double y;
}

class FPDF_LIBRARY_CONFIG extends ffi.Struct {
  @ffi.Int32()
  int version;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> m_pUserFontPaths;

  ffi.Pointer<ffi.Void> m_pIsolate;

  @ffi.Uint32()
  int m_v8EmbedderSlot;

  ffi.Pointer<ffi.Void> m_pPlatform;
}

class FPDF_FILEACCESS extends ffi.Struct {
  @ffi.Uint64()
  int m_FileLen;

  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> m_GetBlock;

  ffi.Pointer<ffi.Void> m_Param;
}

class FPDF_FILEHANDLER extends ffi.Struct {
  ffi.Pointer<ffi.Void> clientData;

  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> Release;

  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> GetSize;

  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> ReadBlock;

  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> WriteBlock;

  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> Flush;

  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> Truncate;
}

class FPDF_COLORSCHEME extends ffi.Struct {
  @ffi.Uint64()
  int path_fill_color;

  @ffi.Uint64()
  int path_stroke_color;

  @ffi.Uint64()
  int text_fill_color;

  @ffi.Uint64()
  int text_stroke_color;
}

abstract class FPDF_FILEIDTYPE {
  static const int FILEIDTYPE_PERMANENT = 0;
  static const int FILEIDTYPE_CHANGING = 1;
}

class FS_QUADPOINTSF extends ffi.Struct {
  @ffi.Float()
  double x1;

  @ffi.Float()
  double y1;

  @ffi.Float()
  double x2;

  @ffi.Float()
  double y2;

  @ffi.Float()
  double x3;

  @ffi.Float()
  double y3;

  @ffi.Float()
  double x4;

  @ffi.Float()
  double y4;
}

class FPDF_IMAGEOBJ_METADATA extends ffi.Struct {
  @ffi.Uint32()
  int width;

  @ffi.Uint32()
  int height;

  @ffi.Float()
  double horizontal_dpi;

  @ffi.Float()
  double vertical_dpi;

  @ffi.Uint32()
  int bits_per_pixel;

  @ffi.Int32()
  int colorspace;

  @ffi.Int32()
  int marked_content_id;
}

abstract class FWL_EVENTFLAG {
  static const int FWL_EVENTFLAG_ShiftKey = 1;
  static const int FWL_EVENTFLAG_ControlKey = 2;
  static const int FWL_EVENTFLAG_AltKey = 4;
  static const int FWL_EVENTFLAG_MetaKey = 8;
  static const int FWL_EVENTFLAG_KeyPad = 16;
  static const int FWL_EVENTFLAG_AutoRepeat = 32;
  static const int FWL_EVENTFLAG_LeftButtonDown = 64;
  static const int FWL_EVENTFLAG_MiddleButtonDown = 128;
  static const int FWL_EVENTFLAG_RightButtonDown = 256;
}

abstract class FWL_VKEYCODE {
  static const int FWL_VKEY_Back = 8;
  static const int FWL_VKEY_Tab = 9;
  static const int FWL_VKEY_NewLine = 10;
  static const int FWL_VKEY_Clear = 12;
  static const int FWL_VKEY_Return = 13;
  static const int FWL_VKEY_Shift = 16;
  static const int FWL_VKEY_Control = 17;
  static const int FWL_VKEY_Menu = 18;
  static const int FWL_VKEY_Pause = 19;
  static const int FWL_VKEY_Capital = 20;
  static const int FWL_VKEY_Kana = 21;
  static const int FWL_VKEY_Hangul = 21;
  static const int FWL_VKEY_Junja = 23;
  static const int FWL_VKEY_Final = 24;
  static const int FWL_VKEY_Hanja = 25;
  static const int FWL_VKEY_Kanji = 25;
  static const int FWL_VKEY_Escape = 27;
  static const int FWL_VKEY_Convert = 28;
  static const int FWL_VKEY_NonConvert = 29;
  static const int FWL_VKEY_Accept = 30;
  static const int FWL_VKEY_ModeChange = 31;
  static const int FWL_VKEY_Space = 32;
  static const int FWL_VKEY_Prior = 33;
  static const int FWL_VKEY_Next = 34;
  static const int FWL_VKEY_End = 35;
  static const int FWL_VKEY_Home = 36;
  static const int FWL_VKEY_Left = 37;
  static const int FWL_VKEY_Up = 38;
  static const int FWL_VKEY_Right = 39;
  static const int FWL_VKEY_Down = 40;
  static const int FWL_VKEY_Select = 41;
  static const int FWL_VKEY_Print = 42;
  static const int FWL_VKEY_Execute = 43;
  static const int FWL_VKEY_Snapshot = 44;
  static const int FWL_VKEY_Insert = 45;
  static const int FWL_VKEY_Delete = 46;
  static const int FWL_VKEY_Help = 47;
  static const int FWL_VKEY_0 = 48;
  static const int FWL_VKEY_1 = 49;
  static const int FWL_VKEY_2 = 50;
  static const int FWL_VKEY_3 = 51;
  static const int FWL_VKEY_4 = 52;
  static const int FWL_VKEY_5 = 53;
  static const int FWL_VKEY_6 = 54;
  static const int FWL_VKEY_7 = 55;
  static const int FWL_VKEY_8 = 56;
  static const int FWL_VKEY_9 = 57;
  static const int FWL_VKEY_A = 65;
  static const int FWL_VKEY_B = 66;
  static const int FWL_VKEY_C = 67;
  static const int FWL_VKEY_D = 68;
  static const int FWL_VKEY_E = 69;
  static const int FWL_VKEY_F = 70;
  static const int FWL_VKEY_G = 71;
  static const int FWL_VKEY_H = 72;
  static const int FWL_VKEY_I = 73;
  static const int FWL_VKEY_J = 74;
  static const int FWL_VKEY_K = 75;
  static const int FWL_VKEY_L = 76;
  static const int FWL_VKEY_M = 77;
  static const int FWL_VKEY_N = 78;
  static const int FWL_VKEY_O = 79;
  static const int FWL_VKEY_P = 80;
  static const int FWL_VKEY_Q = 81;
  static const int FWL_VKEY_R = 82;
  static const int FWL_VKEY_S = 83;
  static const int FWL_VKEY_T = 84;
  static const int FWL_VKEY_U = 85;
  static const int FWL_VKEY_V = 86;
  static const int FWL_VKEY_W = 87;
  static const int FWL_VKEY_X = 88;
  static const int FWL_VKEY_Y = 89;
  static const int FWL_VKEY_Z = 90;
  static const int FWL_VKEY_LWin = 91;
  static const int FWL_VKEY_Command = 91;
  static const int FWL_VKEY_RWin = 92;
  static const int FWL_VKEY_Apps = 93;
  static const int FWL_VKEY_Sleep = 95;
  static const int FWL_VKEY_NumPad0 = 96;
  static const int FWL_VKEY_NumPad1 = 97;
  static const int FWL_VKEY_NumPad2 = 98;
  static const int FWL_VKEY_NumPad3 = 99;
  static const int FWL_VKEY_NumPad4 = 100;
  static const int FWL_VKEY_NumPad5 = 101;
  static const int FWL_VKEY_NumPad6 = 102;
  static const int FWL_VKEY_NumPad7 = 103;
  static const int FWL_VKEY_NumPad8 = 104;
  static const int FWL_VKEY_NumPad9 = 105;
  static const int FWL_VKEY_Multiply = 106;
  static const int FWL_VKEY_Add = 107;
  static const int FWL_VKEY_Separator = 108;
  static const int FWL_VKEY_Subtract = 109;
  static const int FWL_VKEY_Decimal = 110;
  static const int FWL_VKEY_Divide = 111;
  static const int FWL_VKEY_F1 = 112;
  static const int FWL_VKEY_F2 = 113;
  static const int FWL_VKEY_F3 = 114;
  static const int FWL_VKEY_F4 = 115;
  static const int FWL_VKEY_F5 = 116;
  static const int FWL_VKEY_F6 = 117;
  static const int FWL_VKEY_F7 = 118;
  static const int FWL_VKEY_F8 = 119;
  static const int FWL_VKEY_F9 = 120;
  static const int FWL_VKEY_F10 = 121;
  static const int FWL_VKEY_F11 = 122;
  static const int FWL_VKEY_F12 = 123;
  static const int FWL_VKEY_F13 = 124;
  static const int FWL_VKEY_F14 = 125;
  static const int FWL_VKEY_F15 = 126;
  static const int FWL_VKEY_F16 = 127;
  static const int FWL_VKEY_F17 = 128;
  static const int FWL_VKEY_F18 = 129;
  static const int FWL_VKEY_F19 = 130;
  static const int FWL_VKEY_F20 = 131;
  static const int FWL_VKEY_F21 = 132;
  static const int FWL_VKEY_F22 = 133;
  static const int FWL_VKEY_F23 = 134;
  static const int FWL_VKEY_F24 = 135;
  static const int FWL_VKEY_NunLock = 144;
  static const int FWL_VKEY_Scroll = 145;
  static const int FWL_VKEY_LShift = 160;
  static const int FWL_VKEY_RShift = 161;
  static const int FWL_VKEY_LControl = 162;
  static const int FWL_VKEY_RControl = 163;
  static const int FWL_VKEY_LMenu = 164;
  static const int FWL_VKEY_RMenu = 165;
  static const int FWL_VKEY_BROWSER_Back = 166;
  static const int FWL_VKEY_BROWSER_Forward = 167;
  static const int FWL_VKEY_BROWSER_Refresh = 168;
  static const int FWL_VKEY_BROWSER_Stop = 169;
  static const int FWL_VKEY_BROWSER_Search = 170;
  static const int FWL_VKEY_BROWSER_Favorites = 171;
  static const int FWL_VKEY_BROWSER_Home = 172;
  static const int FWL_VKEY_VOLUME_Mute = 173;
  static const int FWL_VKEY_VOLUME_Down = 174;
  static const int FWL_VKEY_VOLUME_Up = 175;
  static const int FWL_VKEY_MEDIA_NEXT_Track = 176;
  static const int FWL_VKEY_MEDIA_PREV_Track = 177;
  static const int FWL_VKEY_MEDIA_Stop = 178;
  static const int FWL_VKEY_MEDIA_PLAY_Pause = 179;
  static const int FWL_VKEY_MEDIA_LAUNCH_Mail = 180;
  static const int FWL_VKEY_MEDIA_LAUNCH_MEDIA_Select = 181;
  static const int FWL_VKEY_MEDIA_LAUNCH_APP1 = 182;
  static const int FWL_VKEY_MEDIA_LAUNCH_APP2 = 183;
  static const int FWL_VKEY_OEM_1 = 186;
  static const int FWL_VKEY_OEM_Plus = 187;
  static const int FWL_VKEY_OEM_Comma = 188;
  static const int FWL_VKEY_OEM_Minus = 189;
  static const int FWL_VKEY_OEM_Period = 190;
  static const int FWL_VKEY_OEM_2 = 191;
  static const int FWL_VKEY_OEM_3 = 192;
  static const int FWL_VKEY_OEM_4 = 219;
  static const int FWL_VKEY_OEM_5 = 220;
  static const int FWL_VKEY_OEM_6 = 221;
  static const int FWL_VKEY_OEM_7 = 222;
  static const int FWL_VKEY_OEM_8 = 223;
  static const int FWL_VKEY_OEM_102 = 226;
  static const int FWL_VKEY_ProcessKey = 229;
  static const int FWL_VKEY_Packet = 231;
  static const int FWL_VKEY_Attn = 246;
  static const int FWL_VKEY_Crsel = 247;
  static const int FWL_VKEY_Exsel = 248;
  static const int FWL_VKEY_Ereof = 249;
  static const int FWL_VKEY_Play = 250;
  static const int FWL_VKEY_Zoom = 251;
  static const int FWL_VKEY_NoName = 252;
  static const int FWL_VKEY_PA1 = 253;
  static const int FWL_VKEY_OEM_Clear = 254;
  static const int FWL_VKEY_Unknown = 0;
}

class IPDF_JSPLATFORM extends ffi.Struct {
  @ffi.Int32()
  int version;

  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> app_alert;

  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> app_beep;

  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> app_response;

  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> Doc_getFilePath;

  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> Doc_mail;

  ffi.Pointer<ffi.NativeFunction<_typedefC_14>> Doc_print;

  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> Doc_submitForm;

  ffi.Pointer<ffi.NativeFunction<_typedefC_16>> Doc_gotoPage;

  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> Field_browse;

  ffi.Pointer<ffi.Void> m_pFormfillinfo;

  ffi.Pointer<ffi.Void> m_isolate;

  @ffi.Uint32()
  int m_v8EmbedderSlot;
}

class FPDF_SYSTEMTIME extends ffi.Struct {
  @ffi.Uint16()
  int wYear;

  @ffi.Uint16()
  int wMonth;

  @ffi.Uint16()
  int wDayOfWeek;

  @ffi.Uint16()
  int wDay;

  @ffi.Uint16()
  int wHour;

  @ffi.Uint16()
  int wMinute;

  @ffi.Uint16()
  int wSecond;

  @ffi.Uint16()
  int wMilliseconds;
}

class FPDF_FORMFILLINFO extends ffi.Struct {
  @ffi.Int32()
  int version;

  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> Release;

  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> FFI_Invalidate;

  ffi.Pointer<ffi.NativeFunction<_typedefC_20>> FFI_OutputSelectedRect;

  ffi.Pointer<ffi.NativeFunction<_typedefC_21>> FFI_SetCursor;

  ffi.Pointer<ffi.NativeFunction<_typedefC_22>> FFI_SetTimer;

  ffi.Pointer<ffi.NativeFunction<_typedefC_23>> FFI_KillTimer;

  ffi.Pointer<ffi.NativeFunction<_typedefC_24>> FFI_GetLocalTime;

  ffi.Pointer<ffi.NativeFunction<_typedefC_25>> FFI_OnChange;

  ffi.Pointer<ffi.NativeFunction<_typedefC_26>> FFI_GetPage;

  ffi.Pointer<ffi.NativeFunction<_typedefC_27>> FFI_GetCurrentPage;

  ffi.Pointer<ffi.NativeFunction<_typedefC_28>> FFI_GetRotation;

  ffi.Pointer<ffi.NativeFunction<_typedefC_29>> FFI_ExecuteNamedAction;

  ffi.Pointer<ffi.NativeFunction<_typedefC_30>> FFI_SetTextFieldFocus;

  ffi.Pointer<ffi.NativeFunction<_typedefC_31>> FFI_DoURIAction;

  ffi.Pointer<ffi.NativeFunction<_typedefC_32>> FFI_DoGoToAction;

  ffi.Pointer<IPDF_JSPLATFORM> m_pJsPlatform;

  @ffi.Int32()
  int xfa_disabled;

  ffi.Pointer<ffi.NativeFunction<_typedefC_33>> FFI_DisplayCaret;

  ffi.Pointer<ffi.NativeFunction<_typedefC_34>> FFI_GetCurrentPageIndex;

  ffi.Pointer<ffi.NativeFunction<_typedefC_35>> FFI_SetCurrentPage;

  ffi.Pointer<ffi.NativeFunction<_typedefC_36>> FFI_GotoURL;

  ffi.Pointer<ffi.NativeFunction<_typedefC_37>> FFI_GetPageViewRect;

  ffi.Pointer<ffi.NativeFunction<_typedefC_38>> FFI_PageEvent;

  ffi.Pointer<ffi.NativeFunction<_typedefC_39>> FFI_PopupMenu;

  ffi.Pointer<ffi.NativeFunction<_typedefC_40>> FFI_OpenFile;

  ffi.Pointer<ffi.NativeFunction<_typedefC_41>> FFI_EmailTo;

  ffi.Pointer<ffi.NativeFunction<_typedefC_42>> FFI_UploadTo;

  ffi.Pointer<ffi.NativeFunction<_typedefC_43>> FFI_GetPlatform;

  ffi.Pointer<ffi.NativeFunction<_typedefC_44>> FFI_GetLanguage;

  ffi.Pointer<ffi.NativeFunction<_typedefC_45>> FFI_DownloadFromURL;

  ffi.Pointer<ffi.NativeFunction<_typedefC_46>> FFI_PostRequestURL;

  ffi.Pointer<ffi.NativeFunction<_typedefC_47>> FFI_PutRequestURL;

  ffi.Pointer<ffi.NativeFunction<_typedefC_48>> FFI_OnFocusChange;

  /// Method: FFI_DoURIActionWithKeyboardModifier
  /// Ask the implementation to navigate to a uniform resource identifier
  /// with the specified modifiers.
  /// Interface Version:
  /// Ignored if |version| < 2.
  /// Implementation Required:
  /// No
  /// Parameters:
  /// param           -   Pointer to the interface structure itself.
  /// uri             -   A byte string which indicates the uniform
  /// resource identifier, terminated by 0.
  /// modifiers       -   Keyboard modifier that indicates which of
  /// the virtual keys are down, if any.
  /// Return value:
  /// None.
  /// Comments:
  /// If the embedder who is version 2 and does not implement this API,
  /// then a call will be redirected to FFI_DoURIAction.
  /// See the URI actions description of <<PDF Reference, version 1.7>>
  /// for more details.
  ffi.Pointer<ffi.NativeFunction<_typedefC_49>>
      FFI_DoURIActionWithKeyboardModifier;
}

abstract class FPDFANNOT_COLORTYPE {
  static const int FPDFANNOT_COLORTYPE_Color = 0;
  static const int FPDFANNOT_COLORTYPE_InteriorColor = 1;
}

class FPDF_FILEWRITE extends ffi.Struct {
  @ffi.Int32()
  int version;

  ffi.Pointer<ffi.NativeFunction<_typedefC_50>> WriteBlock;
}

class FPDF_SYSFONTINFO extends ffi.Struct {
  @ffi.Int32()
  int version;

  ffi.Pointer<ffi.NativeFunction<_typedefC_51>> Release;

  ffi.Pointer<ffi.NativeFunction<_typedefC_52>> EnumFonts;

  ffi.Pointer<ffi.NativeFunction<_typedefC_53>> MapFont;

  ffi.Pointer<ffi.NativeFunction<_typedefC_54>> GetFont;

  ffi.Pointer<ffi.NativeFunction<_typedefC_55>> GetFontData;

  ffi.Pointer<ffi.NativeFunction<_typedefC_56>> GetFaceName;

  ffi.Pointer<ffi.NativeFunction<_typedefC_57>> GetFontCharset;

  ffi.Pointer<ffi.NativeFunction<_typedefC_58>> DeleteFont;
}

class FPDF_CharsetFontMap extends ffi.Struct {
  @ffi.Int32()
  int charset;

  ffi.Pointer<ffi.Int8> fontname;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  int tm_sec;

  @ffi.Int32()
  int tm_min;

  @ffi.Int32()
  int tm_hour;

  @ffi.Int32()
  int tm_mday;

  @ffi.Int32()
  int tm_mon;

  @ffi.Int32()
  int tm_year;

  @ffi.Int32()
  int tm_wday;

  @ffi.Int32()
  int tm_yday;

  @ffi.Int32()
  int tm_isdst;

  @ffi.Int64()
  int tm_gmtoff;

  ffi.Pointer<ffi.Int8> tm_zone;
}

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

class UNSUPPORT_INFO extends ffi.Struct {
  @ffi.Int32()
  int version;

  ffi.Pointer<ffi.NativeFunction<_typedefC_59>> FSDK_UnSupport_Handler;
}

class IFSDK_PAUSE extends ffi.Struct {
  @ffi.Int32()
  int version;

  ffi.Pointer<ffi.NativeFunction<_typedefC_62>> NeedToPauseNow;

  ffi.Pointer<ffi.Void> user;
}

class FX_FILEAVAIL extends ffi.Struct {
  @ffi.Int32()
  int version;

  ffi.Pointer<ffi.NativeFunction<_typedefC_63>> IsDataAvail;
}

class FX_DOWNLOADHINTS extends ffi.Struct {
  @ffi.Int32()
  int version;

  ffi.Pointer<ffi.NativeFunction<_typedefC_64>> AddSegment;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int FPDF_OBJECT_UNKNOWN = 0;

const int FPDF_OBJECT_BOOLEAN = 1;

const int FPDF_OBJECT_NUMBER = 2;

const int FPDF_OBJECT_STRING = 3;

const int FPDF_OBJECT_NAME = 4;

const int FPDF_OBJECT_ARRAY = 5;

const int FPDF_OBJECT_DICTIONARY = 6;

const int FPDF_OBJECT_STREAM = 7;

const int FPDF_OBJECT_NULLOBJ = 8;

const int FPDF_OBJECT_REFERENCE = 9;

const int FPDF_POLICY_MACHINETIME_ACCESS = 0;

const int FPDF_ERR_SUCCESS = 0;

const int FPDF_ERR_UNKNOWN = 1;

const int FPDF_ERR_FILE = 2;

const int FPDF_ERR_FORMAT = 3;

const int FPDF_ERR_PASSWORD = 4;

const int FPDF_ERR_SECURITY = 5;

const int FPDF_ERR_PAGE = 6;

const int FPDF_ANNOT = 1;

const int FPDF_LCD_TEXT = 2;

const int FPDF_NO_NATIVETEXT = 4;

const int FPDF_GRAYSCALE = 8;

const int FPDF_DEBUG_INFO = 128;

const int FPDF_NO_CATCH = 256;

const int FPDF_RENDER_LIMITEDIMAGECACHE = 512;

const int FPDF_RENDER_FORCEHALFTONE = 1024;

const int FPDF_PRINTING = 2048;

const int FPDF_RENDER_NO_SMOOTHTEXT = 4096;

const int FPDF_RENDER_NO_SMOOTHIMAGE = 8192;

const int FPDF_RENDER_NO_SMOOTHPATH = 16384;

const int FPDF_REVERSE_BYTE_ORDER = 16;

const int FPDF_CONVERT_FILL_TO_STROKE = 32;

const int FPDFBitmap_Unknown = 0;

const int FPDFBitmap_Gray = 1;

const int FPDFBitmap_BGR = 2;

const int FPDFBitmap_BGRx = 3;

const int FPDFBitmap_BGRA = 4;

const int FPDF_MATCHCASE = 1;

const int FPDF_MATCHWHOLEWORD = 2;

const int FPDF_CONSECUTIVE = 4;

const int PDFACTION_UNSUPPORTED = 0;

const int PDFACTION_GOTO = 1;

const int PDFACTION_REMOTEGOTO = 2;

const int PDFACTION_URI = 3;

const int PDFACTION_LAUNCH = 4;

const int PDFDEST_VIEW_UNKNOWN_MODE = 0;

const int PDFDEST_VIEW_XYZ = 1;

const int PDFDEST_VIEW_FIT = 2;

const int PDFDEST_VIEW_FITH = 3;

const int PDFDEST_VIEW_FITV = 4;

const int PDFDEST_VIEW_FITR = 5;

const int PDFDEST_VIEW_FITB = 6;

const int PDFDEST_VIEW_FITBH = 7;

const int PDFDEST_VIEW_FITBV = 8;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int FPDF_COLORSPACE_UNKNOWN = 0;

const int FPDF_COLORSPACE_DEVICEGRAY = 1;

const int FPDF_COLORSPACE_DEVICERGB = 2;

const int FPDF_COLORSPACE_DEVICECMYK = 3;

const int FPDF_COLORSPACE_CALGRAY = 4;

const int FPDF_COLORSPACE_CALRGB = 5;

const int FPDF_COLORSPACE_LAB = 6;

const int FPDF_COLORSPACE_ICCBASED = 7;

const int FPDF_COLORSPACE_SEPARATION = 8;

const int FPDF_COLORSPACE_DEVICEN = 9;

const int FPDF_COLORSPACE_INDEXED = 10;

const int FPDF_COLORSPACE_PATTERN = 11;

const int FPDF_PAGEOBJ_UNKNOWN = 0;

const int FPDF_PAGEOBJ_TEXT = 1;

const int FPDF_PAGEOBJ_PATH = 2;

const int FPDF_PAGEOBJ_IMAGE = 3;

const int FPDF_PAGEOBJ_SHADING = 4;

const int FPDF_PAGEOBJ_FORM = 5;

const int FPDF_SEGMENT_UNKNOWN = -1;

const int FPDF_SEGMENT_LINETO = 0;

const int FPDF_SEGMENT_BEZIERTO = 1;

const int FPDF_SEGMENT_MOVETO = 2;

const int FPDF_FILLMODE_NONE = 0;

const int FPDF_FILLMODE_ALTERNATE = 1;

const int FPDF_FILLMODE_WINDING = 2;

const int FPDF_FONT_TYPE1 = 1;

const int FPDF_FONT_TRUETYPE = 2;

const int FPDF_LINECAP_BUTT = 0;

const int FPDF_LINECAP_ROUND = 1;

const int FPDF_LINECAP_PROJECTING_SQUARE = 2;

const int FPDF_LINEJOIN_MITER = 0;

const int FPDF_LINEJOIN_ROUND = 1;

const int FPDF_LINEJOIN_BEVEL = 2;

const int FPDF_PRINTMODE_EMF = 0;

const int FPDF_PRINTMODE_TEXTONLY = 1;

const int FPDF_PRINTMODE_POSTSCRIPT2 = 2;

const int FPDF_PRINTMODE_POSTSCRIPT3 = 3;

const int FPDF_PRINTMODE_POSTSCRIPT2_PASSTHROUGH = 4;

const int FPDF_PRINTMODE_POSTSCRIPT3_PASSTHROUGH = 5;

const int FPDF_PRINTMODE_EMF_IMAGE_MASKS = 6;

const int FORMTYPE_NONE = 0;

const int FORMTYPE_ACRO_FORM = 1;

const int FORMTYPE_XFA_FULL = 2;

const int FORMTYPE_XFA_FOREGROUND = 3;

const int FORMTYPE_COUNT = 4;

const int JSPLATFORM_ALERT_BUTTON_OK = 0;

const int JSPLATFORM_ALERT_BUTTON_OKCANCEL = 1;

const int JSPLATFORM_ALERT_BUTTON_YESNO = 2;

const int JSPLATFORM_ALERT_BUTTON_YESNOCANCEL = 3;

const int JSPLATFORM_ALERT_BUTTON_DEFAULT = 0;

const int JSPLATFORM_ALERT_ICON_ERROR = 0;

const int JSPLATFORM_ALERT_ICON_WARNING = 1;

const int JSPLATFORM_ALERT_ICON_QUESTION = 2;

const int JSPLATFORM_ALERT_ICON_STATUS = 3;

const int JSPLATFORM_ALERT_ICON_ASTERISK = 4;

const int JSPLATFORM_ALERT_ICON_DEFAULT = 0;

const int JSPLATFORM_ALERT_RETURN_OK = 1;

const int JSPLATFORM_ALERT_RETURN_CANCEL = 2;

const int JSPLATFORM_ALERT_RETURN_NO = 3;

const int JSPLATFORM_ALERT_RETURN_YES = 4;

const int JSPLATFORM_BEEP_ERROR = 0;

const int JSPLATFORM_BEEP_WARNING = 1;

const int JSPLATFORM_BEEP_QUESTION = 2;

const int JSPLATFORM_BEEP_STATUS = 3;

const int JSPLATFORM_BEEP_DEFAULT = 4;

const int FXCT_ARROW = 0;

const int FXCT_NESW = 1;

const int FXCT_NWSE = 2;

const int FXCT_VBEAM = 3;

const int FXCT_HBEAM = 4;

const int FXCT_HAND = 5;

const int FPDFDOC_AACTION_WC = 16;

const int FPDFDOC_AACTION_WS = 17;

const int FPDFDOC_AACTION_DS = 18;

const int FPDFDOC_AACTION_WP = 19;

const int FPDFDOC_AACTION_DP = 20;

const int FPDFPAGE_AACTION_OPEN = 0;

const int FPDFPAGE_AACTION_CLOSE = 1;

const int FPDF_FORMFIELD_UNKNOWN = 0;

const int FPDF_FORMFIELD_PUSHBUTTON = 1;

const int FPDF_FORMFIELD_CHECKBOX = 2;

const int FPDF_FORMFIELD_RADIOBUTTON = 3;

const int FPDF_FORMFIELD_COMBOBOX = 4;

const int FPDF_FORMFIELD_LISTBOX = 5;

const int FPDF_FORMFIELD_TEXTFIELD = 6;

const int FPDF_FORMFIELD_SIGNATURE = 7;

const int FPDF_FORMFIELD_COUNT = 8;

const int FPDF_ANNOT_UNKNOWN = 0;

const int FPDF_ANNOT_TEXT = 1;

const int FPDF_ANNOT_LINK = 2;

const int FPDF_ANNOT_FREETEXT = 3;

const int FPDF_ANNOT_LINE = 4;

const int FPDF_ANNOT_SQUARE = 5;

const int FPDF_ANNOT_CIRCLE = 6;

const int FPDF_ANNOT_POLYGON = 7;

const int FPDF_ANNOT_POLYLINE = 8;

const int FPDF_ANNOT_HIGHLIGHT = 9;

const int FPDF_ANNOT_UNDERLINE = 10;

const int FPDF_ANNOT_SQUIGGLY = 11;

const int FPDF_ANNOT_STRIKEOUT = 12;

const int FPDF_ANNOT_STAMP = 13;

const int FPDF_ANNOT_CARET = 14;

const int FPDF_ANNOT_INK = 15;

const int FPDF_ANNOT_POPUP = 16;

const int FPDF_ANNOT_FILEATTACHMENT = 17;

const int FPDF_ANNOT_SOUND = 18;

const int FPDF_ANNOT_MOVIE = 19;

const int FPDF_ANNOT_WIDGET = 20;

const int FPDF_ANNOT_SCREEN = 21;

const int FPDF_ANNOT_PRINTERMARK = 22;

const int FPDF_ANNOT_TRAPNET = 23;

const int FPDF_ANNOT_WATERMARK = 24;

const int FPDF_ANNOT_THREED = 25;

const int FPDF_ANNOT_RICHMEDIA = 26;

const int FPDF_ANNOT_XFAWIDGET = 27;

const int FPDF_ANNOT_FLAG_NONE = 0;

const int FPDF_ANNOT_FLAG_INVISIBLE = 1;

const int FPDF_ANNOT_FLAG_HIDDEN = 2;

const int FPDF_ANNOT_FLAG_PRINT = 4;

const int FPDF_ANNOT_FLAG_NOZOOM = 8;

const int FPDF_ANNOT_FLAG_NOROTATE = 16;

const int FPDF_ANNOT_FLAG_NOVIEW = 32;

const int FPDF_ANNOT_FLAG_READONLY = 64;

const int FPDF_ANNOT_FLAG_LOCKED = 128;

const int FPDF_ANNOT_FLAG_TOGGLENOVIEW = 256;

const int FPDF_ANNOT_APPEARANCEMODE_NORMAL = 0;

const int FPDF_ANNOT_APPEARANCEMODE_ROLLOVER = 1;

const int FPDF_ANNOT_APPEARANCEMODE_DOWN = 2;

const int FPDF_ANNOT_APPEARANCEMODE_COUNT = 3;

const int FPDF_FORMFLAG_NONE = 0;

const int FPDF_FORMFLAG_READONLY = 1;

const int FPDF_FORMFLAG_REQUIRED = 2;

const int FPDF_FORMFLAG_NOEXPORT = 4;

const int FPDF_FORMFLAG_TEXT_MULTILINE = 4096;

const int FPDF_FORMFLAG_TEXT_PASSWORD = 8192;

const int FPDF_FORMFLAG_CHOICE_COMBO = 131072;

const int FPDF_FORMFLAG_CHOICE_EDIT = 262144;

const int FPDF_FORMFLAG_CHOICE_MULTI_SELECT = 2097152;

const int FLATTEN_FAIL = 0;

const int FLATTEN_SUCCESS = 1;

const int FLATTEN_NOTHINGTODO = 2;

const int FLAT_NORMALDISPLAY = 0;

const int FLAT_PRINT = 1;

const int FPDF_INCREMENTAL = 1;

const int FPDF_NO_INCREMENTAL = 2;

const int FPDF_REMOVE_SECURITY = 3;

const int FXFONT_ANSI_CHARSET = 0;

const int FXFONT_DEFAULT_CHARSET = 1;

const int FXFONT_SYMBOL_CHARSET = 2;

const int FXFONT_SHIFTJIS_CHARSET = 128;

const int FXFONT_HANGEUL_CHARSET = 129;

const int FXFONT_GB2312_CHARSET = 134;

const int FXFONT_CHINESEBIG5_CHARSET = 136;

const int FXFONT_ARABIC_CHARSET = 178;

const int FXFONT_CYRILLIC_CHARSET = 204;

const int FXFONT_EASTERNEUROPEAN_CHARSET = 238;

const int FXFONT_FF_FIXEDPITCH = 1;

const int FXFONT_FF_ROMAN = 16;

const int FXFONT_FF_SCRIPT = 64;

const int FXFONT_FW_NORMAL = 400;

const int FXFONT_FW_BOLD = 700;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const int FPDF_UNSP_DOC_XFAFORM = 1;

const int FPDF_UNSP_DOC_PORTABLECOLLECTION = 2;

const int FPDF_UNSP_DOC_ATTACHMENT = 3;

const int FPDF_UNSP_DOC_SECURITY = 4;

const int FPDF_UNSP_DOC_SHAREDREVIEW = 5;

const int FPDF_UNSP_DOC_SHAREDFORM_ACROBAT = 6;

const int FPDF_UNSP_DOC_SHAREDFORM_FILESYSTEM = 7;

const int FPDF_UNSP_DOC_SHAREDFORM_EMAIL = 8;

const int FPDF_UNSP_ANNOT_3DANNOT = 11;

const int FPDF_UNSP_ANNOT_MOVIE = 12;

const int FPDF_UNSP_ANNOT_SOUND = 13;

const int FPDF_UNSP_ANNOT_SCREEN_MEDIA = 14;

const int FPDF_UNSP_ANNOT_SCREEN_RICHMEDIA = 15;

const int FPDF_UNSP_ANNOT_ATTACHMENT = 16;

const int FPDF_UNSP_ANNOT_SIG = 17;

const int PAGEMODE_UNKNOWN = -1;

const int PAGEMODE_USENONE = 0;

const int PAGEMODE_USEOUTLINES = 1;

const int PAGEMODE_USETHUMBS = 2;

const int PAGEMODE_FULLSCREEN = 3;

const int PAGEMODE_USEOC = 4;

const int PAGEMODE_USEATTACHMENTS = 5;

const int FPDF_RENDER_READY = 0;

const int FPDF_RENDER_TOBECONTINUED = 1;

const int FPDF_RENDER_DONE = 2;

const int FPDF_RENDER_FAILED = 3;

const int PDF_LINEARIZATION_UNKNOWN = -1;

const int PDF_NOT_LINEARIZED = 0;

const int PDF_LINEARIZED = 1;

const int PDF_DATA_ERROR = -1;

const int PDF_DATA_NOTAVAIL = 0;

const int PDF_DATA_AVAIL = 1;

const int PDF_FORM_ERROR = -1;

const int PDF_FORM_NOTAVAIL = 0;

const int PDF_FORM_AVAIL = 1;

const int PDF_FORM_NOTEXIST = 2;

typedef _c_FPDF_InitLibrary = ffi.Void Function();

typedef _dart_FPDF_InitLibrary = void Function();

typedef _c_FPDF_InitLibraryWithConfig = ffi.Void Function(
  ffi.Pointer<FPDF_LIBRARY_CONFIG> config,
);

typedef _dart_FPDF_InitLibraryWithConfig = void Function(
  ffi.Pointer<FPDF_LIBRARY_CONFIG> config,
);

typedef _c_FPDF_DestroyLibrary = ffi.Void Function();

typedef _dart_FPDF_DestroyLibrary = void Function();

typedef _c_FPDF_SetSandBoxPolicy = ffi.Void Function(
  ffi.Uint64 policy,
  ffi.Int32 enable,
);

typedef _dart_FPDF_SetSandBoxPolicy = void Function(
  int policy,
  int enable,
);

typedef _c_FPDF_LoadDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Int8> file_path,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_FPDF_LoadDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Int8> file_path,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FPDF_LoadMemDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> data_buf,
  ffi.Int32 size,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_FPDF_LoadMemDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> data_buf,
  int size,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FPDF_LoadMemDocument64 = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> data_buf,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_FPDF_LoadMemDocument64 = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> data_buf,
  int size,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FPDF_LoadCustomDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<FPDF_FILEACCESS> pFileAccess,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_FPDF_LoadCustomDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<FPDF_FILEACCESS> pFileAccess,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FPDF_GetFileVersion = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> doc,
  ffi.Pointer<ffi.Int32> fileVersion,
);

typedef _dart_FPDF_GetFileVersion = int Function(
  ffi.Pointer<fpdf_document_t__> doc,
  ffi.Pointer<ffi.Int32> fileVersion,
);

typedef _c_FPDF_GetLastError = ffi.Uint64 Function();

typedef _dart_FPDF_GetLastError = int Function();

typedef _c_FPDF_DocumentHasValidCrossReferenceTable = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_DocumentHasValidCrossReferenceTable = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_GetDocPermissions = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_GetDocPermissions = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_GetSecurityHandlerRevision = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_GetSecurityHandlerRevision = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_GetPageCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_GetPageCount = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_LoadPage = ffi.Pointer<fpdf_page_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 page_index,
);

typedef _dart_FPDF_LoadPage = ffi.Pointer<fpdf_page_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  int page_index,
);

typedef _c_FPDF_GetPageWidthF = ffi.Float Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_GetPageWidthF = double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_GetPageWidth = ffi.Double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_GetPageWidth = double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_GetPageHeightF = ffi.Float Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_GetPageHeightF = double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_GetPageHeight = ffi.Double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_GetPageHeight = double Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_GetPageBoundingBox = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _dart_FPDF_GetPageBoundingBox = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _c_FPDF_GetPageSizeByIndexF = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 page_index,
  ffi.Pointer<FS_SIZEF> size,
);

typedef _dart_FPDF_GetPageSizeByIndexF = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  int page_index,
  ffi.Pointer<FS_SIZEF> size,
);

typedef _c_FPDF_GetPageSizeByIndex = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 page_index,
  ffi.Pointer<ffi.Double> width,
  ffi.Pointer<ffi.Double> height,
);

typedef _dart_FPDF_GetPageSizeByIndex = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  int page_index,
  ffi.Pointer<ffi.Double> width,
  ffi.Pointer<ffi.Double> height,
);

typedef _c_FPDF_RenderPageBitmap = ffi.Void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Int32 flags,
);

typedef _dart_FPDF_RenderPageBitmap = void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  int flags,
);

typedef _c_FPDF_RenderPageBitmapWithMatrix = ffi.Void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_MATRIX> matrix,
  ffi.Pointer<FS_RECTF> clipping,
  ffi.Int32 flags,
);

typedef _dart_FPDF_RenderPageBitmapWithMatrix = void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_MATRIX> matrix,
  ffi.Pointer<FS_RECTF> clipping,
  int flags,
);

typedef _c_FPDF_ClosePage = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_ClosePage = void Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_CloseDocument = ffi.Void Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_CloseDocument = void Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_DeviceToPage = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Int32 device_x,
  ffi.Int32 device_y,
  ffi.Pointer<ffi.Double> page_x,
  ffi.Pointer<ffi.Double> page_y,
);

typedef _dart_FPDF_DeviceToPage = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  int device_x,
  int device_y,
  ffi.Pointer<ffi.Double> page_x,
  ffi.Pointer<ffi.Double> page_y,
);

typedef _c_FPDF_PageToDevice = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Double page_x,
  ffi.Double page_y,
  ffi.Pointer<ffi.Int32> device_x,
  ffi.Pointer<ffi.Int32> device_y,
);

typedef _dart_FPDF_PageToDevice = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  double page_x,
  double page_y,
  ffi.Pointer<ffi.Int32> device_x,
  ffi.Pointer<ffi.Int32> device_y,
);

typedef _c_FPDFBitmap_Create = ffi.Pointer<fpdf_bitmap_t__> Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 alpha,
);

typedef _dart_FPDFBitmap_Create = ffi.Pointer<fpdf_bitmap_t__> Function(
  int width,
  int height,
  int alpha,
);

typedef _c_FPDFBitmap_CreateEx = ffi.Pointer<fpdf_bitmap_t__> Function(
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Int32 format,
  ffi.Pointer<ffi.Void> first_scan,
  ffi.Int32 stride,
);

typedef _dart_FPDFBitmap_CreateEx = ffi.Pointer<fpdf_bitmap_t__> Function(
  int width,
  int height,
  int format,
  ffi.Pointer<ffi.Void> first_scan,
  int stride,
);

typedef _c_FPDFBitmap_GetFormat = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetFormat = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_FillRect = ffi.Void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Int32 left,
  ffi.Int32 top,
  ffi.Int32 width,
  ffi.Int32 height,
  ffi.Uint64 color,
);

typedef _dart_FPDFBitmap_FillRect = void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  int left,
  int top,
  int width,
  int height,
  int color,
);

typedef _c_FPDFBitmap_GetBuffer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetBuffer = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_GetWidth = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetWidth = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_GetHeight = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetHeight = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_GetStride = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_GetStride = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFBitmap_Destroy = ffi.Void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFBitmap_Destroy = void Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDF_VIEWERREF_GetPrintScaling = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_VIEWERREF_GetPrintScaling = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_VIEWERREF_GetNumCopies = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_VIEWERREF_GetNumCopies = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_VIEWERREF_GetPrintPageRange = ffi.Pointer<fpdf_pagerange_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_VIEWERREF_GetPrintPageRange = ffi.Pointer<fpdf_pagerange_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_VIEWERREF_GetPrintPageRangeCount = ffi.Uint64 Function(
  ffi.Pointer<fpdf_pagerange_t__> pagerange,
);

typedef _dart_FPDF_VIEWERREF_GetPrintPageRangeCount = int Function(
  ffi.Pointer<fpdf_pagerange_t__> pagerange,
);

typedef _c_FPDF_VIEWERREF_GetPrintPageRangeElement = ffi.Int32 Function(
  ffi.Pointer<fpdf_pagerange_t__> pagerange,
  ffi.Uint64 index,
);

typedef _dart_FPDF_VIEWERREF_GetPrintPageRangeElement = int Function(
  ffi.Pointer<fpdf_pagerange_t__> pagerange,
  int index,
);

typedef _c_FPDF_VIEWERREF_GetDuplex = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_VIEWERREF_GetDuplex = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_VIEWERREF_GetName = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Uint64 length,
);

typedef _dart_FPDF_VIEWERREF_GetName = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> buffer,
  int length,
);

typedef _c_FPDF_CountNamedDests = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_CountNamedDests = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_GetNamedDestByName = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_FPDF_GetNamedDestByName = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_FPDF_GetNamedDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Int64> buflen,
);

typedef _dart_FPDF_GetNamedDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  int index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Pointer<ffi.Int64> buflen,
);

typedef _c_FPDFCatalog_IsTagged = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDFCatalog_IsTagged = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_StructTree_GetForPage = ffi.Pointer<fpdf_structtree_t__>
    Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_StructTree_GetForPage = ffi.Pointer<fpdf_structtree_t__>
    Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDF_StructTree_Close = ffi.Void Function(
  ffi.Pointer<fpdf_structtree_t__> struct_tree,
);

typedef _dart_FPDF_StructTree_Close = void Function(
  ffi.Pointer<fpdf_structtree_t__> struct_tree,
);

typedef _c_FPDF_StructTree_CountChildren = ffi.Int32 Function(
  ffi.Pointer<fpdf_structtree_t__> struct_tree,
);

typedef _dart_FPDF_StructTree_CountChildren = int Function(
  ffi.Pointer<fpdf_structtree_t__> struct_tree,
);

typedef _c_FPDF_StructTree_GetChildAtIndex = ffi.Pointer<fpdf_structelement_t__>
    Function(
  ffi.Pointer<fpdf_structtree_t__> struct_tree,
  ffi.Int32 index,
);

typedef _dart_FPDF_StructTree_GetChildAtIndex
    = ffi.Pointer<fpdf_structelement_t__> Function(
  ffi.Pointer<fpdf_structtree_t__> struct_tree,
  int index,
);

typedef _c_FPDF_StructElement_GetAltText = ffi.Uint64 Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDF_StructElement_GetAltText = int Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDF_StructElement_GetMarkedContentID = ffi.Int32 Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
);

typedef _dart_FPDF_StructElement_GetMarkedContentID = int Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
);

typedef _c_FPDF_StructElement_GetType = ffi.Uint64 Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDF_StructElement_GetType = int Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDF_StructElement_GetTitle = ffi.Uint64 Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDF_StructElement_GetTitle = int Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDF_StructElement_CountChildren = ffi.Int32 Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
);

typedef _dart_FPDF_StructElement_CountChildren = int Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
);

typedef _c_FPDF_StructElement_GetChildAtIndex
    = ffi.Pointer<fpdf_structelement_t__> Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
  ffi.Int32 index,
);

typedef _dart_FPDF_StructElement_GetChildAtIndex
    = ffi.Pointer<fpdf_structelement_t__> Function(
  ffi.Pointer<fpdf_structelement_t__> struct_element,
  int index,
);

typedef _c_FPDFText_LoadPage = ffi.Pointer<fpdf_textpage_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDFText_LoadPage = ffi.Pointer<fpdf_textpage_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDFText_ClosePage = ffi.Void Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
);

typedef _dart_FPDFText_ClosePage = void Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
);

typedef _c_FPDFText_CountChars = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
);

typedef _dart_FPDFText_CountChars = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
);

typedef _c_FPDFText_GetUnicode = ffi.Uint32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
);

typedef _dart_FPDFText_GetUnicode = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
);

typedef _c_FPDFText_GetFontSize = ffi.Double Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
);

typedef _dart_FPDFText_GetFontSize = double Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
);

typedef _c_FPDFText_GetFontInfo = ffi.Uint64 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
  ffi.Pointer<ffi.Int32> flags,
);

typedef _dart_FPDFText_GetFontInfo = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
  ffi.Pointer<ffi.Int32> flags,
);

typedef _c_FPDFText_GetFontWeight = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
);

typedef _dart_FPDFText_GetFontWeight = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
);

typedef _c_FPDFText_GetTextRenderMode = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
);

typedef _dart_FPDFText_GetTextRenderMode = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
);

typedef _c_FPDFText_GetFillColor = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _dart_FPDFText_GetFillColor = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _c_FPDFText_GetStrokeColor = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _dart_FPDFText_GetStrokeColor = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _c_FPDFText_GetCharAngle = ffi.Float Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
);

typedef _dart_FPDFText_GetCharAngle = double Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
);

typedef _c_FPDFText_GetCharBox = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
  ffi.Pointer<ffi.Double> left,
  ffi.Pointer<ffi.Double> right,
  ffi.Pointer<ffi.Double> bottom,
  ffi.Pointer<ffi.Double> top,
);

typedef _dart_FPDFText_GetCharBox = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
  ffi.Pointer<ffi.Double> left,
  ffi.Pointer<ffi.Double> right,
  ffi.Pointer<ffi.Double> bottom,
  ffi.Pointer<ffi.Double> top,
);

typedef _c_FPDFText_GetLooseCharBox = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _dart_FPDFText_GetLooseCharBox = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _c_FPDFText_GetMatrix = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _dart_FPDFText_GetMatrix = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _c_FPDFText_GetCharOrigin = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 index,
  ffi.Pointer<ffi.Double> x,
  ffi.Pointer<ffi.Double> y,
);

typedef _dart_FPDFText_GetCharOrigin = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int index,
  ffi.Pointer<ffi.Double> x,
  ffi.Pointer<ffi.Double> y,
);

typedef _c_FPDFText_GetCharIndexAtPos = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Double x,
  ffi.Double y,
  ffi.Double xTolerance,
  ffi.Double yTolerance,
);

typedef _dart_FPDFText_GetCharIndexAtPos = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  double x,
  double y,
  double xTolerance,
  double yTolerance,
);

typedef _c_FPDFText_GetText = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 start_index,
  ffi.Int32 count,
  ffi.Pointer<ffi.Uint16> result,
);

typedef _dart_FPDFText_GetText = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int start_index,
  int count,
  ffi.Pointer<ffi.Uint16> result,
);

typedef _c_FPDFText_CountRects = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 start_index,
  ffi.Int32 count,
);

typedef _dart_FPDFText_CountRects = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int start_index,
  int count,
);

typedef _c_FPDFText_GetRect = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 rect_index,
  ffi.Pointer<ffi.Double> left,
  ffi.Pointer<ffi.Double> top,
  ffi.Pointer<ffi.Double> right,
  ffi.Pointer<ffi.Double> bottom,
);

typedef _dart_FPDFText_GetRect = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int rect_index,
  ffi.Pointer<ffi.Double> left,
  ffi.Pointer<ffi.Double> top,
  ffi.Pointer<ffi.Double> right,
  ffi.Pointer<ffi.Double> bottom,
);

typedef _c_FPDFText_GetBoundedText = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Double left,
  ffi.Double top,
  ffi.Double right,
  ffi.Double bottom,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Int32 buflen,
);

typedef _dart_FPDFText_GetBoundedText = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  double left,
  double top,
  double right,
  double bottom,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFText_FindStart = ffi.Pointer<fpdf_schhandle_t__> Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Pointer<ffi.Uint16> findwhat,
  ffi.Uint64 flags,
  ffi.Int32 start_index,
);

typedef _dart_FPDFText_FindStart = ffi.Pointer<fpdf_schhandle_t__> Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Pointer<ffi.Uint16> findwhat,
  int flags,
  int start_index,
);

typedef _c_FPDFText_FindNext = ffi.Int32 Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _dart_FPDFText_FindNext = int Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _c_FPDFText_FindPrev = ffi.Int32 Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _dart_FPDFText_FindPrev = int Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _c_FPDFText_GetSchResultIndex = ffi.Int32 Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _dart_FPDFText_GetSchResultIndex = int Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _c_FPDFText_GetSchCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _dart_FPDFText_GetSchCount = int Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _c_FPDFText_FindClose = ffi.Void Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _dart_FPDFText_FindClose = void Function(
  ffi.Pointer<fpdf_schhandle_t__> handle,
);

typedef _c_FPDFLink_LoadWebLinks = ffi.Pointer<fpdf_pagelink_t__> Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
);

typedef _dart_FPDFLink_LoadWebLinks = ffi.Pointer<fpdf_pagelink_t__> Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
);

typedef _c_FPDFLink_CountWebLinks = ffi.Int32 Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
);

typedef _dart_FPDFLink_CountWebLinks = int Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
);

typedef _c_FPDFLink_GetURL = ffi.Int32 Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
  ffi.Int32 link_index,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Int32 buflen,
);

typedef _dart_FPDFLink_GetURL = int Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
  int link_index,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFLink_CountRects = ffi.Int32 Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
  ffi.Int32 link_index,
);

typedef _dart_FPDFLink_CountRects = int Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
  int link_index,
);

typedef _c_FPDFLink_GetRect = ffi.Int32 Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
  ffi.Int32 link_index,
  ffi.Int32 rect_index,
  ffi.Pointer<ffi.Double> left,
  ffi.Pointer<ffi.Double> top,
  ffi.Pointer<ffi.Double> right,
  ffi.Pointer<ffi.Double> bottom,
);

typedef _dart_FPDFLink_GetRect = int Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
  int link_index,
  int rect_index,
  ffi.Pointer<ffi.Double> left,
  ffi.Pointer<ffi.Double> top,
  ffi.Pointer<ffi.Double> right,
  ffi.Pointer<ffi.Double> bottom,
);

typedef _c_FPDFLink_GetTextRange = ffi.Int32 Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
  ffi.Int32 link_index,
  ffi.Pointer<ffi.Int32> start_char_index,
  ffi.Pointer<ffi.Int32> char_count,
);

typedef _dart_FPDFLink_GetTextRange = int Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
  int link_index,
  ffi.Pointer<ffi.Int32> start_char_index,
  ffi.Pointer<ffi.Int32> char_count,
);

typedef _c_FPDFLink_CloseWebLinks = ffi.Void Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
);

typedef _dart_FPDFLink_CloseWebLinks = void Function(
  ffi.Pointer<fpdf_pagelink_t__> link_page,
);

typedef _c_FPDFBookmark_GetFirstChild = ffi.Pointer<fpdf_bookmark_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
);

typedef _dart_FPDFBookmark_GetFirstChild = ffi.Pointer<fpdf_bookmark_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
);

typedef _c_FPDFBookmark_GetNextSibling = ffi.Pointer<fpdf_bookmark_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
);

typedef _dart_FPDFBookmark_GetNextSibling = ffi.Pointer<fpdf_bookmark_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
);

typedef _c_FPDFBookmark_GetTitle = ffi.Uint64 Function(
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFBookmark_GetTitle = int Function(
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDFBookmark_Find = ffi.Pointer<fpdf_bookmark_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Uint16> title,
);

typedef _dart_FPDFBookmark_Find = ffi.Pointer<fpdf_bookmark_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Uint16> title,
);

typedef _c_FPDFBookmark_GetDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
);

typedef _dart_FPDFBookmark_GetDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
);

typedef _c_FPDFBookmark_GetAction = ffi.Pointer<fpdf_action_t__> Function(
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
);

typedef _dart_FPDFBookmark_GetAction = ffi.Pointer<fpdf_action_t__> Function(
  ffi.Pointer<fpdf_bookmark_t__> bookmark,
);

typedef _c_FPDFAction_GetType = ffi.Uint64 Function(
  ffi.Pointer<fpdf_action_t__> action,
);

typedef _dart_FPDFAction_GetType = int Function(
  ffi.Pointer<fpdf_action_t__> action,
);

typedef _c_FPDFAction_GetDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_action_t__> action,
);

typedef _dart_FPDFAction_GetDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_action_t__> action,
);

typedef _c_FPDFAction_GetFilePath = ffi.Uint64 Function(
  ffi.Pointer<fpdf_action_t__> action,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAction_GetFilePath = int Function(
  ffi.Pointer<fpdf_action_t__> action,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDFAction_GetURIPath = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_action_t__> action,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAction_GetURIPath = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_action_t__> action,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDFDest_GetDestPageIndex = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_dest_t__> dest,
);

typedef _dart_FPDFDest_GetDestPageIndex = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_dest_t__> dest,
);

typedef _c_FPDFDest_GetView = ffi.Uint64 Function(
  ffi.Pointer<fpdf_dest_t__> dest,
  ffi.Pointer<ffi.Uint64> pNumParams,
  ffi.Pointer<ffi.Float> pParams,
);

typedef _dart_FPDFDest_GetView = int Function(
  ffi.Pointer<fpdf_dest_t__> dest,
  ffi.Pointer<ffi.Uint64> pNumParams,
  ffi.Pointer<ffi.Float> pParams,
);

typedef _c_FPDFDest_GetLocationInPage = ffi.Int32 Function(
  ffi.Pointer<fpdf_dest_t__> dest,
  ffi.Pointer<ffi.Int32> hasXVal,
  ffi.Pointer<ffi.Int32> hasYVal,
  ffi.Pointer<ffi.Int32> hasZoomVal,
  ffi.Pointer<ffi.Float> x,
  ffi.Pointer<ffi.Float> y,
  ffi.Pointer<ffi.Float> zoom,
);

typedef _dart_FPDFDest_GetLocationInPage = int Function(
  ffi.Pointer<fpdf_dest_t__> dest,
  ffi.Pointer<ffi.Int32> hasXVal,
  ffi.Pointer<ffi.Int32> hasYVal,
  ffi.Pointer<ffi.Int32> hasZoomVal,
  ffi.Pointer<ffi.Float> x,
  ffi.Pointer<ffi.Float> y,
  ffi.Pointer<ffi.Float> zoom,
);

typedef _c_FPDFLink_GetLinkAtPoint = ffi.Pointer<fpdf_link_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Double x,
  ffi.Double y,
);

typedef _dart_FPDFLink_GetLinkAtPoint = ffi.Pointer<fpdf_link_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
  double x,
  double y,
);

typedef _c_FPDFLink_GetLinkZOrderAtPoint = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Double x,
  ffi.Double y,
);

typedef _dart_FPDFLink_GetLinkZOrderAtPoint = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  double x,
  double y,
);

typedef _c_FPDFLink_GetDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_link_t__> link,
);

typedef _dart_FPDFLink_GetDest = ffi.Pointer<fpdf_dest_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_link_t__> link,
);

typedef _c_FPDFLink_GetAction = ffi.Pointer<fpdf_action_t__> Function(
  ffi.Pointer<fpdf_link_t__> link,
);

typedef _dart_FPDFLink_GetAction = ffi.Pointer<fpdf_action_t__> Function(
  ffi.Pointer<fpdf_link_t__> link,
);

typedef _c_FPDFLink_Enumerate = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Int32> start_pos,
  ffi.Pointer<ffi.Pointer<fpdf_link_t__>> link_annot,
);

typedef _dart_FPDFLink_Enumerate = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Int32> start_pos,
  ffi.Pointer<ffi.Pointer<fpdf_link_t__>> link_annot,
);

typedef _c_FPDFLink_GetAnnotRect = ffi.Int32 Function(
  ffi.Pointer<fpdf_link_t__> link_annot,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _dart_FPDFLink_GetAnnotRect = int Function(
  ffi.Pointer<fpdf_link_t__> link_annot,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _c_FPDFLink_CountQuadPoints = ffi.Int32 Function(
  ffi.Pointer<fpdf_link_t__> link_annot,
);

typedef _dart_FPDFLink_CountQuadPoints = int Function(
  ffi.Pointer<fpdf_link_t__> link_annot,
);

typedef _c_FPDFLink_GetQuadPoints = ffi.Int32 Function(
  ffi.Pointer<fpdf_link_t__> link_annot,
  ffi.Int32 quad_index,
  ffi.Pointer<FS_QUADPOINTSF> quad_points,
);

typedef _dart_FPDFLink_GetQuadPoints = int Function(
  ffi.Pointer<fpdf_link_t__> link_annot,
  int quad_index,
  ffi.Pointer<FS_QUADPOINTSF> quad_points,
);

typedef _c_FPDF_GetFileIdentifier = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 id_type,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDF_GetFileIdentifier = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  int id_type,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDF_GetMetaText = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> tag,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDF_GetMetaText = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> tag,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDF_GetPageLabel = ffi.Uint64 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 page_index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDF_GetPageLabel = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  int page_index,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDF_CreateNewDocument = ffi.Pointer<fpdf_document_t__> Function();

typedef _dart_FPDF_CreateNewDocument = ffi.Pointer<fpdf_document_t__>
    Function();

typedef _c_FPDFPage_New = ffi.Pointer<fpdf_page_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 page_index,
  ffi.Double width,
  ffi.Double height,
);

typedef _dart_FPDFPage_New = ffi.Pointer<fpdf_page_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  int page_index,
  double width,
  double height,
);

typedef _c_FPDFPage_Delete = ffi.Void Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 page_index,
);

typedef _dart_FPDFPage_Delete = void Function(
  ffi.Pointer<fpdf_document_t__> document,
  int page_index,
);

typedef _c_FPDFPage_GetRotation = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDFPage_GetRotation = int Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDFPage_SetRotation = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 rotate,
);

typedef _dart_FPDFPage_SetRotation = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  int rotate,
);

typedef _c_FPDFPage_InsertObject = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_pageobject_t__> page_obj,
);

typedef _dart_FPDFPage_InsertObject = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_pageobject_t__> page_obj,
);

typedef _c_FPDFPage_RemoveObject = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_pageobject_t__> page_obj,
);

typedef _dart_FPDFPage_RemoveObject = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_pageobject_t__> page_obj,
);

typedef _c_FPDFPage_CountObjects = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDFPage_CountObjects = int Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDFPage_GetObject = ffi.Pointer<fpdf_pageobject_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 index,
);

typedef _dart_FPDFPage_GetObject = ffi.Pointer<fpdf_pageobject_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
  int index,
);

typedef _c_FPDFPage_HasTransparency = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDFPage_HasTransparency = int Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDFPage_GenerateContent = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDFPage_GenerateContent = int Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDFPageObj_Destroy = ffi.Void Function(
  ffi.Pointer<fpdf_pageobject_t__> page_obj,
);

typedef _dart_FPDFPageObj_Destroy = void Function(
  ffi.Pointer<fpdf_pageobject_t__> page_obj,
);

typedef _c_FPDFPageObj_HasTransparency = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _dart_FPDFPageObj_HasTransparency = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _c_FPDFPageObj_GetType = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _dart_FPDFPageObj_GetType = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _c_FPDFPageObj_Transform = ffi.Void Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Double a,
  ffi.Double b,
  ffi.Double c,
  ffi.Double d,
  ffi.Double e,
  ffi.Double f,
);

typedef _dart_FPDFPageObj_Transform = void Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  double a,
  double b,
  double c,
  double d,
  double e,
  double f,
);

typedef _c_FPDFPage_TransformAnnots = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Double a,
  ffi.Double b,
  ffi.Double c,
  ffi.Double d,
  ffi.Double e,
  ffi.Double f,
);

typedef _dart_FPDFPage_TransformAnnots = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  double a,
  double b,
  double c,
  double d,
  double e,
  double f,
);

typedef _c_FPDFPageObj_NewImageObj = ffi.Pointer<fpdf_pageobject_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDFPageObj_NewImageObj = ffi.Pointer<fpdf_pageobject_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDFPageObj_CountMarks = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _dart_FPDFPageObj_CountMarks = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _c_FPDFPageObj_GetMark = ffi.Pointer<fpdf_pageobjectmark_t__> Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Uint64 index,
);

typedef _dart_FPDFPageObj_GetMark = ffi.Pointer<fpdf_pageobjectmark_t__>
    Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  int index,
);

typedef _c_FPDFPageObj_AddMark = ffi.Pointer<fpdf_pageobjectmark_t__> Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_FPDFPageObj_AddMark = ffi.Pointer<fpdf_pageobjectmark_t__>
    Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_FPDFPageObj_RemoveMark = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
);

typedef _dart_FPDFPageObj_RemoveMark = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
);

typedef _c_FPDFPageObjMark_GetName = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _dart_FPDFPageObjMark_GetName = int Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _c_FPDFPageObjMark_CountParams = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
);

typedef _dart_FPDFPageObjMark_CountParams = int Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
);

typedef _c_FPDFPageObjMark_GetParamKey = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Uint64 index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _dart_FPDFPageObjMark_GetParamKey = int Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  int index,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _c_FPDFPageObjMark_GetParamValueType = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_FPDFPageObjMark_GetParamValueType = int Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_FPDFPageObjMark_GetParamIntValue = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int32> out_value,
);

typedef _dart_FPDFPageObjMark_GetParamIntValue = int Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int32> out_value,
);

typedef _c_FPDFPageObjMark_GetParamStringValue = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _dart_FPDFPageObjMark_GetParamStringValue = int Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _c_FPDFPageObjMark_GetParamBlobValue = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _dart_FPDFPageObjMark_GetParamBlobValue = int Function(
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _c_FPDFPageObjMark_SetIntParam = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Int32 value,
);

typedef _dart_FPDFPageObjMark_SetIntParam = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  int value,
);

typedef _c_FPDFPageObjMark_SetStringParam = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_FPDFPageObjMark_SetStringParam = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_FPDFPageObjMark_SetBlobParam = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Void> value,
  ffi.Uint64 value_len,
);

typedef _dart_FPDFPageObjMark_SetBlobParam = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Void> value,
  int value_len,
);

typedef _c_FPDFPageObjMark_RemoveParam = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_FPDFPageObjMark_RemoveParam = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<fpdf_pageobjectmark_t__> mark,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_FPDFImageObj_LoadJpegFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<fpdf_page_t__>> pages,
  ffi.Int32 count,
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<FPDF_FILEACCESS> file_access,
);

typedef _dart_FPDFImageObj_LoadJpegFile = int Function(
  ffi.Pointer<ffi.Pointer<fpdf_page_t__>> pages,
  int count,
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<FPDF_FILEACCESS> file_access,
);

typedef _c_FPDFImageObj_LoadJpegFileInline = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<fpdf_page_t__>> pages,
  ffi.Int32 count,
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<FPDF_FILEACCESS> file_access,
);

typedef _dart_FPDFImageObj_LoadJpegFileInline = int Function(
  ffi.Pointer<ffi.Pointer<fpdf_page_t__>> pages,
  int count,
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<FPDF_FILEACCESS> file_access,
);

typedef _c_FPDFImageObj_GetMatrix = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<ffi.Double> a,
  ffi.Pointer<ffi.Double> b,
  ffi.Pointer<ffi.Double> c,
  ffi.Pointer<ffi.Double> d,
  ffi.Pointer<ffi.Double> e,
  ffi.Pointer<ffi.Double> f,
);

typedef _dart_FPDFImageObj_GetMatrix = int Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<ffi.Double> a,
  ffi.Pointer<ffi.Double> b,
  ffi.Pointer<ffi.Double> c,
  ffi.Pointer<ffi.Double> d,
  ffi.Pointer<ffi.Double> e,
  ffi.Pointer<ffi.Double> f,
);

typedef _c_FPDFImageObj_SetMatrix = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Double a,
  ffi.Double b,
  ffi.Double c,
  ffi.Double d,
  ffi.Double e,
  ffi.Double f,
);

typedef _dart_FPDFImageObj_SetMatrix = int Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  double a,
  double b,
  double c,
  double d,
  double e,
  double f,
);

typedef _c_FPDFImageObj_SetBitmap = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<fpdf_page_t__>> pages,
  ffi.Int32 count,
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _dart_FPDFImageObj_SetBitmap = int Function(
  ffi.Pointer<ffi.Pointer<fpdf_page_t__>> pages,
  int count,
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
);

typedef _c_FPDFImageObj_GetBitmap = ffi.Pointer<fpdf_bitmap_t__> Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
);

typedef _dart_FPDFImageObj_GetBitmap = ffi.Pointer<fpdf_bitmap_t__> Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
);

typedef _c_FPDFImageObj_GetImageDataDecoded = ffi.Uint64 Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFImageObj_GetImageDataDecoded = int Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDFImageObj_GetImageDataRaw = ffi.Uint64 Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFImageObj_GetImageDataRaw = int Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDFImageObj_GetImageFilterCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
);

typedef _dart_FPDFImageObj_GetImageFilterCount = int Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
);

typedef _c_FPDFImageObj_GetImageFilter = ffi.Uint64 Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Int32 index,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFImageObj_GetImageFilter = int Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  int index,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDFImageObj_GetImageMetadata = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FPDF_IMAGEOBJ_METADATA> metadata,
);

typedef _dart_FPDFImageObj_GetImageMetadata = int Function(
  ffi.Pointer<fpdf_pageobject_t__> image_object,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FPDF_IMAGEOBJ_METADATA> metadata,
);

typedef _c_FPDFPageObj_CreateNewPath = ffi.Pointer<fpdf_pageobject_t__>
    Function(
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_FPDFPageObj_CreateNewPath = ffi.Pointer<fpdf_pageobject_t__>
    Function(
  double x,
  double y,
);

typedef _c_FPDFPageObj_CreateNewRect = ffi.Pointer<fpdf_pageobject_t__>
    Function(
  ffi.Float x,
  ffi.Float y,
  ffi.Float w,
  ffi.Float h,
);

typedef _dart_FPDFPageObj_CreateNewRect = ffi.Pointer<fpdf_pageobject_t__>
    Function(
  double x,
  double y,
  double w,
  double h,
);

typedef _c_FPDFPageObj_GetBounds = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _dart_FPDFPageObj_GetBounds = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _c_FPDFPageObj_SetBlendMode = ffi.Void Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Int8> blend_mode,
);

typedef _dart_FPDFPageObj_SetBlendMode = void Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Int8> blend_mode,
);

typedef _c_FPDFPageObj_SetStrokeColor = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Uint32 R,
  ffi.Uint32 G,
  ffi.Uint32 B,
  ffi.Uint32 A,
);

typedef _dart_FPDFPageObj_SetStrokeColor = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  int R,
  int G,
  int B,
  int A,
);

typedef _c_FPDFPageObj_GetStrokeColor = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _dart_FPDFPageObj_GetStrokeColor = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _c_FPDFPageObj_SetStrokeWidth = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Float width,
);

typedef _dart_FPDFPageObj_SetStrokeWidth = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  double width,
);

typedef _c_FPDFPageObj_GetStrokeWidth = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Float> width,
);

typedef _dart_FPDFPageObj_GetStrokeWidth = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Float> width,
);

typedef _c_FPDFPageObj_GetLineJoin = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _dart_FPDFPageObj_GetLineJoin = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _c_FPDFPageObj_SetLineJoin = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Int32 line_join,
);

typedef _dart_FPDFPageObj_SetLineJoin = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  int line_join,
);

typedef _c_FPDFPageObj_GetLineCap = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _dart_FPDFPageObj_GetLineCap = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _c_FPDFPageObj_SetLineCap = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Int32 line_cap,
);

typedef _dart_FPDFPageObj_SetLineCap = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  int line_cap,
);

typedef _c_FPDFPageObj_SetFillColor = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Uint32 R,
  ffi.Uint32 G,
  ffi.Uint32 B,
  ffi.Uint32 A,
);

typedef _dart_FPDFPageObj_SetFillColor = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  int R,
  int G,
  int B,
  int A,
);

typedef _c_FPDFPageObj_GetFillColor = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _dart_FPDFPageObj_GetFillColor = int Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _c_FPDFPath_CountSegments = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
);

typedef _dart_FPDFPath_CountSegments = int Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
);

typedef _c_FPDFPath_GetPathSegment = ffi.Pointer<fpdf_pathsegment_t> Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Int32 index,
);

typedef _dart_FPDFPath_GetPathSegment = ffi.Pointer<fpdf_pathsegment_t>
    Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  int index,
);

typedef _c_FPDFPathSegment_GetPoint = ffi.Int32 Function(
  ffi.Pointer<fpdf_pathsegment_t> segment,
  ffi.Pointer<ffi.Float> x,
  ffi.Pointer<ffi.Float> y,
);

typedef _dart_FPDFPathSegment_GetPoint = int Function(
  ffi.Pointer<fpdf_pathsegment_t> segment,
  ffi.Pointer<ffi.Float> x,
  ffi.Pointer<ffi.Float> y,
);

typedef _c_FPDFPathSegment_GetType = ffi.Int32 Function(
  ffi.Pointer<fpdf_pathsegment_t> segment,
);

typedef _dart_FPDFPathSegment_GetType = int Function(
  ffi.Pointer<fpdf_pathsegment_t> segment,
);

typedef _c_FPDFPathSegment_GetClose = ffi.Int32 Function(
  ffi.Pointer<fpdf_pathsegment_t> segment,
);

typedef _dart_FPDFPathSegment_GetClose = int Function(
  ffi.Pointer<fpdf_pathsegment_t> segment,
);

typedef _c_FPDFPath_MoveTo = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_FPDFPath_MoveTo = int Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  double x,
  double y,
);

typedef _c_FPDFPath_LineTo = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Float x,
  ffi.Float y,
);

typedef _dart_FPDFPath_LineTo = int Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  double x,
  double y,
);

typedef _c_FPDFPath_BezierTo = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Float x1,
  ffi.Float y1,
  ffi.Float x2,
  ffi.Float y2,
  ffi.Float x3,
  ffi.Float y3,
);

typedef _dart_FPDFPath_BezierTo = int Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  double x1,
  double y1,
  double x2,
  double y2,
  double x3,
  double y3,
);

typedef _c_FPDFPath_Close = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
);

typedef _dart_FPDFPath_Close = int Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
);

typedef _c_FPDFPath_SetDrawMode = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Int32 fillmode,
  ffi.Int32 stroke,
);

typedef _dart_FPDFPath_SetDrawMode = int Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  int fillmode,
  int stroke,
);

typedef _c_FPDFPath_GetDrawMode = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Pointer<ffi.Int32> fillmode,
  ffi.Pointer<ffi.Int32> stroke,
);

typedef _dart_FPDFPath_GetDrawMode = int Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Pointer<ffi.Int32> fillmode,
  ffi.Pointer<ffi.Int32> stroke,
);

typedef _c_FPDFPath_GetMatrix = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _dart_FPDFPath_GetMatrix = int Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _c_FPDFPath_SetMatrix = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _dart_FPDFPath_SetMatrix = int Function(
  ffi.Pointer<fpdf_pageobject_t__> path,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _c_FPDFPageObj_NewTextObj = ffi.Pointer<fpdf_pageobject_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> font,
  ffi.Float font_size,
);

typedef _dart_FPDFPageObj_NewTextObj = ffi.Pointer<fpdf_pageobject_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> font,
  double font_size,
);

typedef _c_FPDFText_SetText = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> text_object,
  ffi.Pointer<ffi.Uint16> text,
);

typedef _dart_FPDFText_SetText = int Function(
  ffi.Pointer<fpdf_pageobject_t__> text_object,
  ffi.Pointer<ffi.Uint16> text,
);

typedef _c_FPDFText_LoadFont = ffi.Pointer<fpdf_font_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Uint32 size,
  ffi.Int32 font_type,
  ffi.Int32 cid,
);

typedef _dart_FPDFText_LoadFont = ffi.Pointer<fpdf_font_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Uint8> data,
  int size,
  int font_type,
  int cid,
);

typedef _c_FPDFText_LoadStandardFont = ffi.Pointer<fpdf_font_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> font,
);

typedef _dart_FPDFText_LoadStandardFont = ffi.Pointer<fpdf_font_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Int8> font,
);

typedef _c_FPDFTextObj_GetMatrix = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _dart_FPDFTextObj_GetMatrix = int Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _c_FPDFTextObj_GetFontSize = ffi.Float Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
);

typedef _dart_FPDFTextObj_GetFontSize = double Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
);

typedef _c_FPDFFont_Close = ffi.Void Function(
  ffi.Pointer<fpdf_font_t__> font,
);

typedef _dart_FPDFFont_Close = void Function(
  ffi.Pointer<fpdf_font_t__> font,
);

typedef _c_FPDFPageObj_CreateTextObj = ffi.Pointer<fpdf_pageobject_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_font_t__> font,
  ffi.Float font_size,
);

typedef _dart_FPDFPageObj_CreateTextObj = ffi.Pointer<fpdf_pageobject_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<fpdf_font_t__> font,
  double font_size,
);

typedef _c_FPDFTextObj_GetTextRenderMode = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
);

typedef _dart_FPDFTextObj_GetTextRenderMode = int Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
);

typedef _c_FPDFTextObj_SetTextRenderMode = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
  ffi.Int32 render_mode,
);

typedef _dart_FPDFTextObj_SetTextRenderMode = int Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
  int render_mode,
);

typedef _c_FPDFTextObj_GetFontName = ffi.Uint64 Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 length,
);

typedef _dart_FPDFTextObj_GetFontName = int Function(
  ffi.Pointer<fpdf_pageobject_t__> text,
  ffi.Pointer<ffi.Void> buffer,
  int length,
);

typedef _c_FPDFTextObj_GetText = ffi.Uint64 Function(
  ffi.Pointer<fpdf_pageobject_t__> text_object,
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 length,
);

typedef _dart_FPDFTextObj_GetText = int Function(
  ffi.Pointer<fpdf_pageobject_t__> text_object,
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Pointer<ffi.Void> buffer,
  int length,
);

typedef _c_FPDFFormObj_CountObjects = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> form_object,
);

typedef _dart_FPDFFormObj_CountObjects = int Function(
  ffi.Pointer<fpdf_pageobject_t__> form_object,
);

typedef _c_FPDFFormObj_GetObject = ffi.Pointer<fpdf_pageobject_t__> Function(
  ffi.Pointer<fpdf_pageobject_t__> form_object,
  ffi.Uint64 index,
);

typedef _dart_FPDFFormObj_GetObject = ffi.Pointer<fpdf_pageobject_t__> Function(
  ffi.Pointer<fpdf_pageobject_t__> form_object,
  int index,
);

typedef _c_FPDFFormObj_GetMatrix = ffi.Int32 Function(
  ffi.Pointer<fpdf_pageobject_t__> form_object,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _dart_FPDFFormObj_GetMatrix = int Function(
  ffi.Pointer<fpdf_pageobject_t__> form_object,
  ffi.Pointer<FS_MATRIX> matrix,
);

typedef _c_FPDFPage_SetMediaBox = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Float left,
  ffi.Float bottom,
  ffi.Float right,
  ffi.Float top,
);

typedef _dart_FPDFPage_SetMediaBox = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  double left,
  double bottom,
  double right,
  double top,
);

typedef _c_FPDFPage_SetCropBox = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Float left,
  ffi.Float bottom,
  ffi.Float right,
  ffi.Float top,
);

typedef _dart_FPDFPage_SetCropBox = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  double left,
  double bottom,
  double right,
  double top,
);

typedef _c_FPDFPage_SetBleedBox = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Float left,
  ffi.Float bottom,
  ffi.Float right,
  ffi.Float top,
);

typedef _dart_FPDFPage_SetBleedBox = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  double left,
  double bottom,
  double right,
  double top,
);

typedef _c_FPDFPage_SetTrimBox = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Float left,
  ffi.Float bottom,
  ffi.Float right,
  ffi.Float top,
);

typedef _dart_FPDFPage_SetTrimBox = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  double left,
  double bottom,
  double right,
  double top,
);

typedef _c_FPDFPage_SetArtBox = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Float left,
  ffi.Float bottom,
  ffi.Float right,
  ffi.Float top,
);

typedef _dart_FPDFPage_SetArtBox = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  double left,
  double bottom,
  double right,
  double top,
);

typedef _c_FPDFPage_GetMediaBox = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _dart_FPDFPage_GetMediaBox = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _c_FPDFPage_GetCropBox = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _dart_FPDFPage_GetCropBox = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _c_FPDFPage_GetBleedBox = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _dart_FPDFPage_GetBleedBox = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _c_FPDFPage_GetTrimBox = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _dart_FPDFPage_GetTrimBox = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _c_FPDFPage_GetArtBox = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _dart_FPDFPage_GetArtBox = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Float> left,
  ffi.Pointer<ffi.Float> bottom,
  ffi.Pointer<ffi.Float> right,
  ffi.Pointer<ffi.Float> top,
);

typedef _c_FPDFPage_TransFormWithClip = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_MATRIX> matrix,
  ffi.Pointer<FS_RECTF> clipRect,
);

typedef _dart_FPDFPage_TransFormWithClip = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_MATRIX> matrix,
  ffi.Pointer<FS_RECTF> clipRect,
);

typedef _c_FPDFPageObj_TransformClipPath = ffi.Void Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  ffi.Double a,
  ffi.Double b,
  ffi.Double c,
  ffi.Double d,
  ffi.Double e,
  ffi.Double f,
);

typedef _dart_FPDFPageObj_TransformClipPath = void Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
  double a,
  double b,
  double c,
  double d,
  double e,
  double f,
);

typedef _c_FPDFPageObj_GetClipPath = ffi.Pointer<fpdf_clippath_t__> Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _dart_FPDFPageObj_GetClipPath = ffi.Pointer<fpdf_clippath_t__> Function(
  ffi.Pointer<fpdf_pageobject_t__> page_object,
);

typedef _c_FPDFClipPath_CountPaths = ffi.Int32 Function(
  ffi.Pointer<fpdf_clippath_t__> clip_path,
);

typedef _dart_FPDFClipPath_CountPaths = int Function(
  ffi.Pointer<fpdf_clippath_t__> clip_path,
);

typedef _c_FPDFClipPath_CountPathSegments = ffi.Int32 Function(
  ffi.Pointer<fpdf_clippath_t__> clip_path,
  ffi.Int32 path_index,
);

typedef _dart_FPDFClipPath_CountPathSegments = int Function(
  ffi.Pointer<fpdf_clippath_t__> clip_path,
  int path_index,
);

typedef _c_FPDFClipPath_GetPathSegment = ffi.Pointer<fpdf_pathsegment_t>
    Function(
  ffi.Pointer<fpdf_clippath_t__> clip_path,
  ffi.Int32 path_index,
  ffi.Int32 segment_index,
);

typedef _dart_FPDFClipPath_GetPathSegment = ffi.Pointer<fpdf_pathsegment_t>
    Function(
  ffi.Pointer<fpdf_clippath_t__> clip_path,
  int path_index,
  int segment_index,
);

typedef _c_FPDF_CreateClipPath = ffi.Pointer<fpdf_clippath_t__> Function(
  ffi.Float left,
  ffi.Float bottom,
  ffi.Float right,
  ffi.Float top,
);

typedef _dart_FPDF_CreateClipPath = ffi.Pointer<fpdf_clippath_t__> Function(
  double left,
  double bottom,
  double right,
  double top,
);

typedef _c_FPDF_DestroyClipPath = ffi.Void Function(
  ffi.Pointer<fpdf_clippath_t__> clipPath,
);

typedef _dart_FPDF_DestroyClipPath = void Function(
  ffi.Pointer<fpdf_clippath_t__> clipPath,
);

typedef _c_FPDFPage_InsertClipPath = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_clippath_t__> clipPath,
);

typedef _dart_FPDFPage_InsertClipPath = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_clippath_t__> clipPath,
);

typedef _c_FPDFDOC_InitFormFillEnvironment = ffi.Pointer<fpdf_form_handle_t__>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<FPDF_FORMFILLINFO> formInfo,
);

typedef _dart_FPDFDOC_InitFormFillEnvironment
    = ffi.Pointer<fpdf_form_handle_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<FPDF_FORMFILLINFO> formInfo,
);

typedef _c_FPDFDOC_ExitFormFillEnvironment = ffi.Void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _dart_FPDFDOC_ExitFormFillEnvironment = void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _c_FORM_OnAfterLoadPage = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _dart_FORM_OnAfterLoadPage = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _c_FORM_OnBeforeClosePage = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _dart_FORM_OnBeforeClosePage = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _c_FORM_DoDocumentJSAction = ffi.Void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _dart_FORM_DoDocumentJSAction = void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _c_FORM_DoDocumentOpenAction = ffi.Void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _dart_FORM_DoDocumentOpenAction = void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _c_FORM_DoDocumentAAction = ffi.Void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Int32 aaType,
);

typedef _dart_FORM_DoDocumentAAction = void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  int aaType,
);

typedef _c_FORM_DoPageAAction = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Int32 aaType,
);

typedef _dart_FORM_DoPageAAction = void Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  int aaType,
);

typedef _c_FORM_OnMouseMove = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 modifier,
  ffi.Double page_x,
  ffi.Double page_y,
);

typedef _dart_FORM_OnMouseMove = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int modifier,
  double page_x,
  double page_y,
);

typedef _c_FORM_OnMouseWheel = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 modifier,
  ffi.Pointer<FS_POINTF> page_coord,
  ffi.Int32 delta_x,
  ffi.Int32 delta_y,
);

typedef _dart_FORM_OnMouseWheel = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int modifier,
  ffi.Pointer<FS_POINTF> page_coord,
  int delta_x,
  int delta_y,
);

typedef _c_FORM_OnFocus = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 modifier,
  ffi.Double page_x,
  ffi.Double page_y,
);

typedef _dart_FORM_OnFocus = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int modifier,
  double page_x,
  double page_y,
);

typedef _c_FORM_OnLButtonDown = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 modifier,
  ffi.Double page_x,
  ffi.Double page_y,
);

typedef _dart_FORM_OnLButtonDown = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int modifier,
  double page_x,
  double page_y,
);

typedef _c_FORM_OnRButtonDown = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 modifier,
  ffi.Double page_x,
  ffi.Double page_y,
);

typedef _dart_FORM_OnRButtonDown = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int modifier,
  double page_x,
  double page_y,
);

typedef _c_FORM_OnLButtonUp = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 modifier,
  ffi.Double page_x,
  ffi.Double page_y,
);

typedef _dart_FORM_OnLButtonUp = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int modifier,
  double page_x,
  double page_y,
);

typedef _c_FORM_OnRButtonUp = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 modifier,
  ffi.Double page_x,
  ffi.Double page_y,
);

typedef _dart_FORM_OnRButtonUp = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int modifier,
  double page_x,
  double page_y,
);

typedef _c_FORM_OnLButtonDoubleClick = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 modifier,
  ffi.Double page_x,
  ffi.Double page_y,
);

typedef _dart_FORM_OnLButtonDoubleClick = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int modifier,
  double page_x,
  double page_y,
);

typedef _c_FORM_OnKeyDown = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 nKeyCode,
  ffi.Int32 modifier,
);

typedef _dart_FORM_OnKeyDown = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int nKeyCode,
  int modifier,
);

typedef _c_FORM_OnKeyUp = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 nKeyCode,
  ffi.Int32 modifier,
);

typedef _dart_FORM_OnKeyUp = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int nKeyCode,
  int modifier,
);

typedef _c_FORM_OnChar = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 nChar,
  ffi.Int32 modifier,
);

typedef _dart_FORM_OnChar = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int nChar,
  int modifier,
);

typedef _c_FORM_GetFocusedText = ffi.Uint64 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FORM_GetFocusedText = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FORM_GetSelectedText = ffi.Uint64 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FORM_GetSelectedText = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FORM_ReplaceSelection = ffi.Void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Uint16> wsText,
);

typedef _dart_FORM_ReplaceSelection = void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Uint16> wsText,
);

typedef _c_FORM_CanUndo = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FORM_CanUndo = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FORM_CanRedo = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FORM_CanRedo = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FORM_Undo = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FORM_Undo = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FORM_Redo = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FORM_Redo = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FORM_ForceToKillFocus = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _dart_FORM_ForceToKillFocus = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _c_FORM_GetFocusedAnnot = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> handle,
  ffi.Pointer<ffi.Int32> page_index,
  ffi.Pointer<ffi.Pointer<fpdf_annotation_t__>> annot,
);

typedef _dart_FORM_GetFocusedAnnot = int Function(
  ffi.Pointer<fpdf_form_handle_t__> handle,
  ffi.Pointer<ffi.Int32> page_index,
  ffi.Pointer<ffi.Pointer<fpdf_annotation_t__>> annot,
);

typedef _c_FORM_SetFocusedAnnot = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> handle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FORM_SetFocusedAnnot = int Function(
  ffi.Pointer<fpdf_form_handle_t__> handle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFPage_HasFormFieldAtPoint = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Double page_x,
  ffi.Double page_y,
);

typedef _dart_FPDFPage_HasFormFieldAtPoint = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  double page_x,
  double page_y,
);

typedef _c_FPDFPage_FormFieldZOrderAtPoint = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Double page_x,
  ffi.Double page_y,
);

typedef _dart_FPDFPage_FormFieldZOrderAtPoint = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  double page_x,
  double page_y,
);

typedef _c_FPDF_SetFormFieldHighlightColor = ffi.Void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Int32 fieldType,
  ffi.Uint64 color,
);

typedef _dart_FPDF_SetFormFieldHighlightColor = void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  int fieldType,
  int color,
);

typedef _c_FPDF_SetFormFieldHighlightAlpha = ffi.Void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Uint8 alpha,
);

typedef _dart_FPDF_SetFormFieldHighlightAlpha = void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  int alpha,
);

typedef _c_FPDF_RemoveFormFieldHighlight = ffi.Void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _dart_FPDF_RemoveFormFieldHighlight = void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _c_FPDF_FFLDraw = ffi.Void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Int32 flags,
);

typedef _dart_FPDF_FFLDraw = void Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  int flags,
);

typedef _c_FPDF_GetFormType = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_GetFormType = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FORM_SetIndexSelected = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 index,
  ffi.Int32 selected,
);

typedef _dart_FORM_SetIndexSelected = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int index,
  int selected,
);

typedef _c_FORM_IsIndexSelected = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 index,
);

typedef _dart_FORM_IsIndexSelected = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  int index,
);

typedef _c_FPDF_LoadXFA = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDF_LoadXFA = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDFAnnot_IsSupportedSubtype = ffi.Int32 Function(
  ffi.Int32 subtype,
);

typedef _dart_FPDFAnnot_IsSupportedSubtype = int Function(
  int subtype,
);

typedef _c_FPDFPage_CreateAnnot = ffi.Pointer<fpdf_annotation_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 subtype,
);

typedef _dart_FPDFPage_CreateAnnot = ffi.Pointer<fpdf_annotation_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
  int subtype,
);

typedef _c_FPDFPage_GetAnnotCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDFPage_GetAnnotCount = int Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDFPage_GetAnnot = ffi.Pointer<fpdf_annotation_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 index,
);

typedef _dart_FPDFPage_GetAnnot = ffi.Pointer<fpdf_annotation_t__> Function(
  ffi.Pointer<fpdf_page_t__> page,
  int index,
);

typedef _c_FPDFPage_GetAnnotIndex = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFPage_GetAnnotIndex = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFPage_CloseAnnot = ffi.Void Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFPage_CloseAnnot = void Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFPage_RemoveAnnot = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 index,
);

typedef _dart_FPDFPage_RemoveAnnot = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  int index,
);

typedef _c_FPDFAnnot_GetSubtype = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_GetSubtype = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_IsObjectSupportedSubtype = ffi.Int32 Function(
  ffi.Int32 subtype,
);

typedef _dart_FPDFAnnot_IsObjectSupportedSubtype = int Function(
  int subtype,
);

typedef _c_FPDFAnnot_UpdateObject = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<fpdf_pageobject_t__> obj,
);

typedef _dart_FPDFAnnot_UpdateObject = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<fpdf_pageobject_t__> obj,
);

typedef _c_FPDFAnnot_AddInkStroke = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<FS_POINTF> points,
  ffi.Uint64 point_count,
);

typedef _dart_FPDFAnnot_AddInkStroke = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<FS_POINTF> points,
  int point_count,
);

typedef _c_FPDFAnnot_RemoveInkList = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_RemoveInkList = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_AppendObject = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<fpdf_pageobject_t__> obj,
);

typedef _dart_FPDFAnnot_AppendObject = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<fpdf_pageobject_t__> obj,
);

typedef _c_FPDFAnnot_GetObjectCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_GetObjectCount = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_GetObject = ffi.Pointer<fpdf_pageobject_t__> Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Int32 index,
);

typedef _dart_FPDFAnnot_GetObject = ffi.Pointer<fpdf_pageobject_t__> Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  int index,
);

typedef _c_FPDFAnnot_RemoveObject = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Int32 index,
);

typedef _dart_FPDFAnnot_RemoveObject = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  int index,
);

typedef _c_FPDFAnnot_SetColor = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Int32 type,
  ffi.Uint32 R,
  ffi.Uint32 G,
  ffi.Uint32 B,
  ffi.Uint32 A,
);

typedef _dart_FPDFAnnot_SetColor = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  int type,
  int R,
  int G,
  int B,
  int A,
);

typedef _c_FPDFAnnot_GetColor = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Int32 type,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _dart_FPDFAnnot_GetColor = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  int type,
  ffi.Pointer<ffi.Uint32> R,
  ffi.Pointer<ffi.Uint32> G,
  ffi.Pointer<ffi.Uint32> B,
  ffi.Pointer<ffi.Uint32> A,
);

typedef _c_FPDFAnnot_HasAttachmentPoints = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_HasAttachmentPoints = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_SetAttachmentPoints = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Uint64 quad_index,
  ffi.Pointer<FS_QUADPOINTSF> quad_points,
);

typedef _dart_FPDFAnnot_SetAttachmentPoints = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  int quad_index,
  ffi.Pointer<FS_QUADPOINTSF> quad_points,
);

typedef _c_FPDFAnnot_AppendAttachmentPoints = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<FS_QUADPOINTSF> quad_points,
);

typedef _dart_FPDFAnnot_AppendAttachmentPoints = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<FS_QUADPOINTSF> quad_points,
);

typedef _c_FPDFAnnot_CountAttachmentPoints = ffi.Uint64 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_CountAttachmentPoints = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_GetAttachmentPoints = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Uint64 quad_index,
  ffi.Pointer<FS_QUADPOINTSF> quad_points,
);

typedef _dart_FPDFAnnot_GetAttachmentPoints = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  int quad_index,
  ffi.Pointer<FS_QUADPOINTSF> quad_points,
);

typedef _c_FPDFAnnot_SetRect = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _dart_FPDFAnnot_SetRect = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _c_FPDFAnnot_GetRect = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _dart_FPDFAnnot_GetRect = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<FS_RECTF> rect,
);

typedef _c_FPDFAnnot_HasKey = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_FPDFAnnot_HasKey = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_FPDFAnnot_GetValueType = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_FPDFAnnot_GetValueType = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_FPDFAnnot_SetStringValue = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint16> value,
);

typedef _dart_FPDFAnnot_SetStringValue = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint16> value,
);

typedef _c_FPDFAnnot_GetStringValue = ffi.Uint64 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAnnot_GetStringValue = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFAnnot_GetNumberValue = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Float> value,
);

typedef _dart_FPDFAnnot_GetNumberValue = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Float> value,
);

typedef _c_FPDFAnnot_SetAP = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Int32 appearanceMode,
  ffi.Pointer<ffi.Uint16> value,
);

typedef _dart_FPDFAnnot_SetAP = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  int appearanceMode,
  ffi.Pointer<ffi.Uint16> value,
);

typedef _c_FPDFAnnot_GetAP = ffi.Uint64 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Int32 appearanceMode,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAnnot_GetAP = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  int appearanceMode,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFAnnot_GetLinkedAnnot = ffi.Pointer<fpdf_annotation_t__> Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_FPDFAnnot_GetLinkedAnnot = ffi.Pointer<fpdf_annotation_t__>
    Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_FPDFAnnot_GetFlags = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_GetFlags = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_SetFlags = ffi.Int32 Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Int32 flags,
);

typedef _dart_FPDFAnnot_SetFlags = int Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
  int flags,
);

typedef _c_FPDFAnnot_GetFormFieldFlags = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> handle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_GetFormFieldFlags = int Function(
  ffi.Pointer<fpdf_form_handle_t__> handle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_GetFormFieldAtPoint = ffi.Pointer<fpdf_annotation_t__>
    Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_POINTF> point,
);

typedef _dart_FPDFAnnot_GetFormFieldAtPoint = ffi.Pointer<fpdf_annotation_t__>
    Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<FS_POINTF> point,
);

typedef _c_FPDFAnnot_GetFormFieldName = ffi.Uint64 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAnnot_GetFormFieldName = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFAnnot_GetFormFieldType = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_GetFormFieldType = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_GetFormFieldValue = ffi.Uint64 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAnnot_GetFormFieldValue = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFAnnot_GetOptionCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_GetOptionCount = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_GetOptionLabel = ffi.Uint64 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Int32 index,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAnnot_GetOptionLabel = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  int index,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFAnnot_IsOptionSelected = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> handle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Int32 index,
);

typedef _dart_FPDFAnnot_IsOptionSelected = int Function(
  ffi.Pointer<fpdf_form_handle_t__> handle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  int index,
);

typedef _c_FPDFAnnot_GetFontSize = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Float> value,
);

typedef _dart_FPDFAnnot_GetFontSize = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Float> value,
);

typedef _c_FPDFAnnot_IsChecked = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_IsChecked = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_SetFocusableSubtypes = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<ffi.Int32> subtypes,
  ffi.Uint64 count,
);

typedef _dart_FPDFAnnot_SetFocusableSubtypes = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<ffi.Int32> subtypes,
  int count,
);

typedef _c_FPDFAnnot_GetFocusableSubtypesCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _dart_FPDFAnnot_GetFocusableSubtypesCount = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
);

typedef _c_FPDFAnnot_GetFocusableSubtypes = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<ffi.Int32> subtypes,
  ffi.Uint64 count,
);

typedef _dart_FPDFAnnot_GetFocusableSubtypes = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<ffi.Int32> subtypes,
  int count,
);

typedef _c_FPDFAnnot_GetLink = ffi.Pointer<fpdf_link_t__> Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_GetLink = ffi.Pointer<fpdf_link_t__> Function(
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_GetFormControlCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_GetFormControlCount = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_GetFormControlIndex = ffi.Int32 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _dart_FPDFAnnot_GetFormControlIndex = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
);

typedef _c_FPDFAnnot_GetFormFieldExportValue = ffi.Uint64 Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAnnot_GetFormFieldExportValue = int Function(
  ffi.Pointer<fpdf_form_handle_t__> hHandle,
  ffi.Pointer<fpdf_annotation_t__> annot,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDF_ImportPages = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> dest_doc,
  ffi.Pointer<fpdf_document_t__> src_doc,
  ffi.Pointer<ffi.Int8> pagerange,
  ffi.Int32 index,
);

typedef _dart_FPDF_ImportPages = int Function(
  ffi.Pointer<fpdf_document_t__> dest_doc,
  ffi.Pointer<fpdf_document_t__> src_doc,
  ffi.Pointer<ffi.Int8> pagerange,
  int index,
);

typedef _c_FPDF_ImportNPagesToOne = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<fpdf_document_t__> src_doc,
  ffi.Float output_width,
  ffi.Float output_height,
  ffi.Uint64 num_pages_on_x_axis,
  ffi.Uint64 num_pages_on_y_axis,
);

typedef _dart_FPDF_ImportNPagesToOne = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<fpdf_document_t__> src_doc,
  double output_width,
  double output_height,
  int num_pages_on_x_axis,
  int num_pages_on_y_axis,
);

typedef _c_FPDF_CopyViewerPreferences = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> dest_doc,
  ffi.Pointer<fpdf_document_t__> src_doc,
);

typedef _dart_FPDF_CopyViewerPreferences = int Function(
  ffi.Pointer<fpdf_document_t__> dest_doc,
  ffi.Pointer<fpdf_document_t__> src_doc,
);

typedef _c_FPDFDoc_GetJavaScriptActionCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDFDoc_GetJavaScriptActionCount = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDFDoc_GetJavaScriptAction = ffi.Pointer<fpdf_javascript_action_t>
    Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 index,
);

typedef _dart_FPDFDoc_GetJavaScriptAction
    = ffi.Pointer<fpdf_javascript_action_t> Function(
  ffi.Pointer<fpdf_document_t__> document,
  int index,
);

typedef _c_FPDFDoc_CloseJavaScriptAction = ffi.Void Function(
  ffi.Pointer<fpdf_javascript_action_t> javascript,
);

typedef _dart_FPDFDoc_CloseJavaScriptAction = void Function(
  ffi.Pointer<fpdf_javascript_action_t> javascript,
);

typedef _c_FPDFJavaScriptAction_GetName = ffi.Uint64 Function(
  ffi.Pointer<fpdf_javascript_action_t> javascript,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFJavaScriptAction_GetName = int Function(
  ffi.Pointer<fpdf_javascript_action_t> javascript,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFJavaScriptAction_GetScript = ffi.Uint64 Function(
  ffi.Pointer<fpdf_javascript_action_t> javascript,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFJavaScriptAction_GetScript = int Function(
  ffi.Pointer<fpdf_javascript_action_t> javascript,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFPage_Flatten = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 nFlag,
);

typedef _dart_FPDFPage_Flatten = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  int nFlag,
);

typedef _c_FPDF_SaveAsCopy = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<FPDF_FILEWRITE> pFileWrite,
  ffi.Uint64 flags,
);

typedef _dart_FPDF_SaveAsCopy = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<FPDF_FILEWRITE> pFileWrite,
  int flags,
);

typedef _c_FPDF_SaveWithVersion = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<FPDF_FILEWRITE> pFileWrite,
  ffi.Uint64 flags,
  ffi.Int32 fileVersion,
);

typedef _dart_FPDF_SaveWithVersion = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<FPDF_FILEWRITE> pFileWrite,
  int flags,
  int fileVersion,
);

typedef _c_FPDF_GetDefaultTTFMap = ffi.Pointer<FPDF_CharsetFontMap> Function();

typedef _dart_FPDF_GetDefaultTTFMap = ffi.Pointer<FPDF_CharsetFontMap>
    Function();

typedef _c_FPDF_AddInstalledFont = ffi.Void Function(
  ffi.Pointer<ffi.Void> mapper,
  ffi.Pointer<ffi.Int8> face,
  ffi.Int32 charset,
);

typedef _dart_FPDF_AddInstalledFont = void Function(
  ffi.Pointer<ffi.Void> mapper,
  ffi.Pointer<ffi.Int8> face,
  int charset,
);

typedef _c_FPDF_SetSystemFontInfo = ffi.Void Function(
  ffi.Pointer<FPDF_SYSFONTINFO> pFontInfo,
);

typedef _dart_FPDF_SetSystemFontInfo = void Function(
  ffi.Pointer<FPDF_SYSFONTINFO> pFontInfo,
);

typedef _c_FPDF_GetDefaultSystemFontInfo = ffi.Pointer<FPDF_SYSFONTINFO>
    Function();

typedef _dart_FPDF_GetDefaultSystemFontInfo = ffi.Pointer<FPDF_SYSFONTINFO>
    Function();

typedef _c_FPDF_FreeDefaultSystemFontInfo = ffi.Void Function(
  ffi.Pointer<FPDF_SYSFONTINFO> pFontInfo,
);

typedef _dart_FPDF_FreeDefaultSystemFontInfo = void Function(
  ffi.Pointer<FPDF_SYSFONTINFO> pFontInfo,
);

typedef _c_FPDFDoc_GetAttachmentCount = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDFDoc_GetAttachmentCount = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDFDoc_AddAttachment = ffi.Pointer<fpdf_attachment_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Uint16> name,
);

typedef _dart_FPDFDoc_AddAttachment = ffi.Pointer<fpdf_attachment_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Uint16> name,
);

typedef _c_FPDFDoc_GetAttachment = ffi.Pointer<fpdf_attachment_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 index,
);

typedef _dart_FPDFDoc_GetAttachment = ffi.Pointer<fpdf_attachment_t__> Function(
  ffi.Pointer<fpdf_document_t__> document,
  int index,
);

typedef _c_FPDFDoc_DeleteAttachment = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Int32 index,
);

typedef _dart_FPDFDoc_DeleteAttachment = int Function(
  ffi.Pointer<fpdf_document_t__> document,
  int index,
);

typedef _c_FPDFAttachment_GetName = ffi.Uint64 Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAttachment_GetName = int Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFAttachment_HasKey = ffi.Int32 Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_FPDFAttachment_HasKey = int Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_FPDFAttachment_GetValueType = ffi.Int32 Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Int8> key,
);

typedef _dart_FPDFAttachment_GetValueType = int Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Int8> key,
);

typedef _c_FPDFAttachment_SetStringValue = ffi.Int32 Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint16> value,
);

typedef _dart_FPDFAttachment_SetStringValue = int Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint16> value,
);

typedef _c_FPDFAttachment_GetStringValue = ffi.Uint64 Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint16> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFAttachment_GetStringValue = int Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint16> buffer,
  int buflen,
);

typedef _c_FPDFAttachment_SetFile = ffi.Int32 Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Void> contents,
  ffi.Uint64 len,
);

typedef _dart_FPDFAttachment_SetFile = int Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<fpdf_document_t__> document,
  ffi.Pointer<ffi.Void> contents,
  int len,
);

typedef _c_FPDFAttachment_GetFile = ffi.Int32 Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _dart_FPDFAttachment_GetFile = int Function(
  ffi.Pointer<fpdf_attachment_t__> attachment,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
  ffi.Pointer<ffi.Uint64> out_buflen,
);

typedef _c_FPDFText_GetCharIndexFromTextIndex = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 nTextIndex,
);

typedef _dart_FPDFText_GetCharIndexFromTextIndex = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int nTextIndex,
);

typedef _c_FPDFText_GetTextIndexFromCharIndex = ffi.Int32 Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  ffi.Int32 nCharIndex,
);

typedef _dart_FPDFText_GetTextIndexFromCharIndex = int Function(
  ffi.Pointer<fpdf_textpage_t__> text_page,
  int nCharIndex,
);

typedef _c_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_clock = ffi.Uint64 Function();

typedef _dart_clock = int Function();

typedef _c_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_difftime = ffi.Double Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart_difftime = double Function(
  int arg0,
  int arg1,
);

typedef _c_getdate = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getdate = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_mktime = ffi.Int64 Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_mktime = int Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_strftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<tm> arg3,
);

typedef _dart_strftime = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<tm> arg3,
);

typedef _c_strptime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<tm> arg2,
);

typedef _dart_strptime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<tm> arg2,
);

typedef _c_time = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _dart_time = int Function(
  ffi.Pointer<ffi.Int64> arg0,
);

typedef _c_tzset = ffi.Void Function();

typedef _dart_tzset = void Function();

typedef _c_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _dart_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _c_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _dart_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> arg0,
  ffi.Pointer<tm> arg1,
);

typedef _c_posix2time = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_posix2time = int Function(
  int arg0,
);

typedef _c_tzsetwall = ffi.Void Function();

typedef _dart_tzsetwall = void Function();

typedef _c_time2posix = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_time2posix = int Function(
  int arg0,
);

typedef _c_timelocal = ffi.Int64 Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_timelocal = int Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_timegm = ffi.Int64 Function(
  ffi.Pointer<tm> arg0,
);

typedef _dart_timegm = int Function(
  ffi.Pointer<tm> arg0,
);

typedef _c_nanosleep = ffi.Int32 Function(
  ffi.Pointer<timespec> __rqtp,
  ffi.Pointer<timespec> __rmtp,
);

typedef _dart_nanosleep = int Function(
  ffi.Pointer<timespec> __rqtp,
  ffi.Pointer<timespec> __rmtp,
);

typedef _c_clock_getres = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _dart_clock_getres = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _c_clock_gettime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_gettime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_clock_gettime_nsec_np = ffi.Uint64 Function(
  ffi.Int32 __clock_id,
);

typedef _dart_clock_gettime_nsec_np = int Function(
  int __clock_id,
);

typedef _c_clock_settime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_settime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_timespec_get = ffi.Int32 Function(
  ffi.Pointer<timespec> ts,
  ffi.Int32 base,
);

typedef _dart_timespec_get = int Function(
  ffi.Pointer<timespec> ts,
  int base,
);

typedef _c_FSDK_SetUnSpObjProcessHandler = ffi.Int32 Function(
  ffi.Pointer<UNSUPPORT_INFO> unsp_info,
);

typedef _dart_FSDK_SetUnSpObjProcessHandler = int Function(
  ffi.Pointer<UNSUPPORT_INFO> unsp_info,
);

typedef _typedefC_60 = ffi.Int64 Function();

typedef _c_FSDK_SetTimeFunction = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_60>> func,
);

typedef _dart_FSDK_SetTimeFunction = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_60>> func,
);

typedef _typedefC_61 = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64>,
);

typedef _c_FSDK_SetLocaltimeFunction = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_61>> func,
);

typedef _dart_FSDK_SetLocaltimeFunction = void Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_61>> func,
);

typedef _c_FPDFDoc_GetPageMode = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _dart_FPDFDoc_GetPageMode = int Function(
  ffi.Pointer<fpdf_document_t__> document,
);

typedef _c_FPDF_RenderPageBitmapWithColorScheme_Start = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Int32 flags,
  ffi.Pointer<FPDF_COLORSCHEME> color_scheme,
  ffi.Pointer<IFSDK_PAUSE> pause,
);

typedef _dart_FPDF_RenderPageBitmapWithColorScheme_Start = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  int flags,
  ffi.Pointer<FPDF_COLORSCHEME> color_scheme,
  ffi.Pointer<IFSDK_PAUSE> pause,
);

typedef _c_FPDF_RenderPageBitmap_Start = ffi.Int32 Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Int32 start_x,
  ffi.Int32 start_y,
  ffi.Int32 size_x,
  ffi.Int32 size_y,
  ffi.Int32 rotate,
  ffi.Int32 flags,
  ffi.Pointer<IFSDK_PAUSE> pause,
);

typedef _dart_FPDF_RenderPageBitmap_Start = int Function(
  ffi.Pointer<fpdf_bitmap_t__> bitmap,
  ffi.Pointer<fpdf_page_t__> page,
  int start_x,
  int start_y,
  int size_x,
  int size_y,
  int rotate,
  int flags,
  ffi.Pointer<IFSDK_PAUSE> pause,
);

typedef _c_FPDF_RenderPage_Continue = ffi.Int32 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<IFSDK_PAUSE> pause,
);

typedef _dart_FPDF_RenderPage_Continue = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<IFSDK_PAUSE> pause,
);

typedef _c_FPDF_RenderPage_Close = ffi.Void Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDF_RenderPage_Close = void Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _c_FPDFAvail_Create = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<FX_FILEAVAIL> file_avail,
  ffi.Pointer<FPDF_FILEACCESS> file,
);

typedef _dart_FPDFAvail_Create = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<FX_FILEAVAIL> file_avail,
  ffi.Pointer<FPDF_FILEACCESS> file,
);

typedef _c_FPDFAvail_Destroy = ffi.Void Function(
  ffi.Pointer<ffi.Void> avail,
);

typedef _dart_FPDFAvail_Destroy = void Function(
  ffi.Pointer<ffi.Void> avail,
);

typedef _c_FPDFAvail_IsDocAvail = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> avail,
  ffi.Pointer<FX_DOWNLOADHINTS> hints,
);

typedef _dart_FPDFAvail_IsDocAvail = int Function(
  ffi.Pointer<ffi.Void> avail,
  ffi.Pointer<FX_DOWNLOADHINTS> hints,
);

typedef _c_FPDFAvail_GetDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> avail,
  ffi.Pointer<ffi.Int8> password,
);

typedef _dart_FPDFAvail_GetDocument = ffi.Pointer<fpdf_document_t__> Function(
  ffi.Pointer<ffi.Void> avail,
  ffi.Pointer<ffi.Int8> password,
);

typedef _c_FPDFAvail_GetFirstPageNum = ffi.Int32 Function(
  ffi.Pointer<fpdf_document_t__> doc,
);

typedef _dart_FPDFAvail_GetFirstPageNum = int Function(
  ffi.Pointer<fpdf_document_t__> doc,
);

typedef _c_FPDFAvail_IsPageAvail = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> avail,
  ffi.Int32 page_index,
  ffi.Pointer<FX_DOWNLOADHINTS> hints,
);

typedef _dart_FPDFAvail_IsPageAvail = int Function(
  ffi.Pointer<ffi.Void> avail,
  int page_index,
  ffi.Pointer<FX_DOWNLOADHINTS> hints,
);

typedef _c_FPDFAvail_IsFormAvail = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> avail,
  ffi.Pointer<FX_DOWNLOADHINTS> hints,
);

typedef _dart_FPDFAvail_IsFormAvail = int Function(
  ffi.Pointer<ffi.Void> avail,
  ffi.Pointer<FX_DOWNLOADHINTS> hints,
);

typedef _c_FPDFAvail_IsLinearized = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> avail,
);

typedef _dart_FPDFAvail_IsLinearized = int Function(
  ffi.Pointer<ffi.Void> avail,
);

typedef _c_FPDFPage_GetDecodedThumbnailData = ffi.Uint64 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFPage_GetDecodedThumbnailData = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDFPage_GetRawThumbnailData = ffi.Uint64 Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Void> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_FPDFPage_GetRawThumbnailData = int Function(
  ffi.Pointer<fpdf_page_t__> page,
  ffi.Pointer<ffi.Void> buffer,
  int buflen,
);

typedef _c_FPDFPage_GetThumbnailAsBitmap = ffi.Pointer<fpdf_bitmap_t__>
    Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _dart_FPDFPage_GetThumbnailAsBitmap = ffi.Pointer<fpdf_bitmap_t__>
    Function(
  ffi.Pointer<fpdf_page_t__> page,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint64,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_4 = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_5 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_6 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_8 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<IPDF_JSPLATFORM>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_10 = ffi.Void Function(
  ffi.Pointer<IPDF_JSPLATFORM>,
  ffi.Int32,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<IPDF_JSPLATFORM>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<IPDF_JSPLATFORM>,
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_13 = ffi.Void Function(
  ffi.Pointer<IPDF_JSPLATFORM>,
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
);

typedef _typedefC_14 = ffi.Void Function(
  ffi.Pointer<IPDF_JSPLATFORM>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_15 = ffi.Void Function(
  ffi.Pointer<IPDF_JSPLATFORM>,
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint16>,
);

typedef _typedefC_16 = ffi.Void Function(
  ffi.Pointer<IPDF_JSPLATFORM>,
  ffi.Int32,
);

typedef _typedefC_17 = ffi.Int32 Function(
  ffi.Pointer<IPDF_JSPLATFORM>,
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_18 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
);

typedef _typedefC_19 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_page_t__>,
  ffi.Double,
  ffi.Double,
  ffi.Double,
  ffi.Double,
);

typedef _typedefC_20 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_page_t__>,
  ffi.Double,
  ffi.Double,
  ffi.Double,
  ffi.Double,
);

typedef _typedefC_21 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Int32,
);

typedef TimerCallback = ffi.Void Function(
  ffi.Int32,
);

typedef _typedefC_22 = ffi.Int32 Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Int32,
  ffi.Pointer<ffi.NativeFunction<TimerCallback>>,
);

typedef _typedefC_23 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Int32,
);

typedef _typedefC_24 = FPDF_SYSTEMTIME Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
);

typedef _typedefC_25 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
);

typedef _typedefC_26 = ffi.Pointer<fpdf_page_t__> Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_document_t__>,
  ffi.Int32,
);

typedef _typedefC_27 = ffi.Pointer<fpdf_page_t__> Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_document_t__>,
);

typedef _typedefC_28 = ffi.Int32 Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_page_t__>,
);

typedef _typedefC_29 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_30 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Uint64,
  ffi.Int32,
);

typedef _typedefC_31 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_32 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Float>,
  ffi.Int32,
);

typedef _typedefC_33 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_page_t__>,
  ffi.Int32,
  ffi.Double,
  ffi.Double,
  ffi.Double,
  ffi.Double,
);

typedef _typedefC_34 = ffi.Int32 Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_document_t__>,
);

typedef _typedefC_35 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_document_t__>,
  ffi.Int32,
);

typedef _typedefC_36 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_document_t__>,
  ffi.Pointer<ffi.Uint16>,
);

typedef _typedefC_37 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_page_t__>,
  ffi.Pointer<ffi.Double>,
  ffi.Pointer<ffi.Double>,
  ffi.Pointer<ffi.Double>,
  ffi.Pointer<ffi.Double>,
);

typedef _typedefC_38 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Int32,
  ffi.Uint64,
);

typedef _typedefC_39 = ffi.Int32 Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_page_t__>,
  ffi.Pointer<fpdf_widget_t__>,
  ffi.Int32,
  ffi.Float,
  ffi.Float,
);

typedef _typedefC_40 = ffi.Pointer<FPDF_FILEHANDLER> Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_41 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<FPDF_FILEHANDLER>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
);

typedef _typedefC_42 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<FPDF_FILEHANDLER>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint16>,
);

typedef _typedefC_43 = ffi.Int32 Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_44 = ffi.Int32 Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<ffi.Void>,
  ffi.Int32,
);

typedef _typedefC_45 = ffi.Pointer<FPDF_FILEHANDLER> Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<ffi.Uint16>,
);

typedef _typedefC_46 = ffi.Int32 Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<FPDF_BSTR>,
);

typedef _typedefC_47 = ffi.Int32 Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
  ffi.Pointer<ffi.Uint16>,
);

typedef _typedefC_48 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<fpdf_annotation_t__>,
  ffi.Int32,
);

typedef _typedefC_49 = ffi.Void Function(
  ffi.Pointer<FPDF_FORMFILLINFO>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_50 = ffi.Int32 Function(
  ffi.Pointer<FPDF_FILEWRITE>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
);

typedef _typedefC_51 = ffi.Void Function(
  ffi.Pointer<FPDF_SYSFONTINFO>,
);

typedef _typedefC_52 = ffi.Void Function(
  ffi.Pointer<FPDF_SYSFONTINFO>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_53 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<FPDF_SYSFONTINFO>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_54 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<FPDF_SYSFONTINFO>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_55 = ffi.Uint64 Function(
  ffi.Pointer<FPDF_SYSFONTINFO>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint64,
);

typedef _typedefC_56 = ffi.Uint64 Function(
  ffi.Pointer<FPDF_SYSFONTINFO>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
);

typedef _typedefC_57 = ffi.Int32 Function(
  ffi.Pointer<FPDF_SYSFONTINFO>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_58 = ffi.Void Function(
  ffi.Pointer<FPDF_SYSFONTINFO>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_59 = ffi.Void Function(
  ffi.Pointer<UNSUPPORT_INFO>,
  ffi.Int32,
);

typedef _typedefC_62 = ffi.Int32 Function(
  ffi.Pointer<IFSDK_PAUSE>,
);

typedef _typedefC_63 = ffi.Int32 Function(
  ffi.Pointer<FX_FILEAVAIL>,
  ffi.Uint64,
  ffi.Uint64,
);

typedef _typedefC_64 = ffi.Void Function(
  ffi.Pointer<FX_DOWNLOADHINTS>,
  ffi.Uint64,
  ffi.Uint64,
);
